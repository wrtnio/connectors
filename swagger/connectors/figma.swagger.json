{
  "openapi": "3.1.0",
  "servers": [
    {
      "url": "https://studio-connector-api.wrtn.ai",
      "description": "Production Server"
    },
    {
      "url": "https://studio-connector-poc.dev.wrtn.club",
      "description": "Develop Server"
    },
    {
      "url": "http://localhost:3003",
      "description": "Local Server"
    }
  ],
  "info": {
    "title": "피그마 디자인 협업 플랫폼",
    "summary": "피그마 파일을 쉽게 관리하고 협업할 수 있어요.",
    "description": "피그마 파일에 접근하고, 댓글을 가져오거나 추가할 수 있어요. 디자인 작업과 팀 협업을 효율적으로 진행할 수 있어요. 프로젝트의 진행 상황을 확인하고, 팀원들의 피드백을 실시간으로 주고받을 수 있어요. 디자인 에셋을 관리하고, 버전 히스토리를 추적할 수 있어요. UI/UX 디자인, 프로토타이핑, 그래픽 디자인 등 다양한 디자인 작업을 수행하고 관리할 수 있어요.",
    "version": "0.1.335",
    "license": {
      "name": "AGPL-3.0-only"
    }
  },
  "paths": {
    "/connector/figma/get-files": {
      "post": {
        "summary": "Import Figma files",
        "description": "Import Figma files",
        "tags": [
          "Figma"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Conditional values for importing files",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IFigma.IReadFileInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "List of Figma files",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IFigma.IReadFileOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/fulls/Figma_full.svg"
      }
    },
    "/connector/figma/comments": {
      "post": {
        "summary": "Write a comment within the canvas",
        "description": "Write a comment",
        "tags": [
          "Figma"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Condition value for writing a comment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IFigma.IAddCommentInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Information about the comment just written",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/fulls/Figma_full.svg"
      }
    },
    "/connector/figma/get-comments": {
      "post": {
        "summary": "Get Figma comments",
        "description": "Get Figma comments",
        "tags": [
          "Figma"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Condition value to get comments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IFigma.IReadCommentInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "List of Figma comments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCommentsResponse"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/fulls/Figma_full.svg"
      }
    },
    "/connector/figma/projects/{id}/get-canvas": {
      "post": {
        "summary": "Search for canvases within a team",
        "description": "Get all canvases of a specific project\n\nCanvases are Figma files managed by a specific team.\n\nThis connector allows users to see which canvases are managed within their Figma team, along with their canvas names and thumbnail links.",
        "tags": [
          "Figma"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string",
              "x-wrtn-prerequisite": {
                "method": "post",
                "path": "/connector/figma/get-projects",
                "jmesPath": "proejcts[].{value:id, label:name}"
              }
            },
            "required": true,
            "description": " The ID of the project to search"
          }
        ],
        "requestBody": {
          "description": "Search conditions for projects",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IFigma.Secret"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "All files in the project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IFigma.IGetProjectFileOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/fulls/Figma_full.svg"
      }
    },
    "/connector/figma/get-statistics": {
      "post": {
        "summary": "Retrieve team-level Figma statistics",
        "description": "Retrieve team-level statistics",
        "tags": [
          "Figma"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Conditions for retrieving team-level statistics",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IFigma.IGetProjectStatisticsInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Results of team-level statistics retrieval",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IFigma.IGetStatisticsOutput"
                  }
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/fulls/Figma_full.svg"
      }
    },
    "/connector/figma/get-projects": {
      "post": {
        "summary": "Search for projects within a team",
        "description": "Search for projects within a team\n\nAs an argument, it should receive teamId, which is the team ID, and can be found by looking at the URL path of figma.\nWhen accessing the link `https://www.figma.com/files/team`, a number is automatically added after the `team` keyword, which is the team ID.\nA user can belong to multiple teams, so if you do not want to automate the search for these projects, you need to get a different team ID.",
        "tags": [
          "Figma"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Project search conditions",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IFigma.IGetProjectInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Project list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IFigma.IGetProejctOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/fulls/Figma_full.svg"
      }
    }
  },
  "components": {
    "schemas": {
      "IFigma.IReadFileOutput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "The name of the file in the editor",
            "description": "The name of the file in the editor."
          },
          "role": {
            "oneOf": [
              {
                "const": "owner"
              },
              {
                "const": "editor"
              },
              {
                "const": "viewer"
              }
            ],
            "title": "The role of the user performing the request",
            "description": "The role of the user performing the API request related to the file."
          },
          "lastModified": {
            "type": "string",
            "format": "date-time",
            "title": "The time the file was last modified",
            "description": "The UTC ISO 8601 time the file was last modified."
          },
          "editorType": {
            "oneOf": [
              {
                "const": "figma"
              },
              {
                "const": "figjam"
              }
            ],
            "title": "The type of editor associated with the file",
            "description": "The type of editor associated with this file."
          },
          "thumbnailUrl": {
            "type": "string",
            "title": "Thumbnail Image",
            "description": "A URL to the thumbnail image for the file."
          },
          "version": {
            "type": "string",
            "title": "The version number of the file",
            "description": "The version number of the file. This number is incremented each time the file is modified and can be used to determine if the file has changed between requests."
          },
          "components": {
            "type": "object",
            "properties": {},
            "title": "Mapping between component ID and component metadata",
            "description": "Mapping between component ID and component metadata.",
            "additionalProperties": {
              "$ref": "#/components/schemas/Component"
            }
          },
          "componentSets": {
            "type": "object",
            "properties": {},
            "title": "A mapping between a component set ID and component set metadata",
            "description": "A mapping between a component set ID and component set metadata.",
            "additionalProperties": {
              "$ref": "#/components/schemas/ComponentSet"
            }
          },
          "schemaVersion": {
            "type": "number",
            "title": "The version of the file schema used by this file",
            "description": "The version of the file schema used by this file."
          },
          "styles": {
            "type": "object",
            "properties": {},
            "title": "Mapping between style ID and style metadata",
            "description": "Mapping between style ID and style metadata.",
            "additionalProperties": {
              "$ref": "#/components/schemas/Style"
            }
          },
          "mainFileKey": {
            "type": "string",
            "title": "The primary file key of this file",
            "description": "The primary file key of this file. If present, this file is a component or a set of components."
          },
          "branches": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "title": "key",
                  "description": "This is the key of the branch."
                },
                "name": {
                  "type": "string",
                  "title": "name",
                  "description": "The name of the branch."
                },
                "thumbnail_url": {
                  "type": "string",
                  "title": "thumbnail_url",
                  "description": "A URL to the thumbnail image of the branch."
                },
                "last_modified": {
                  "type": "string",
                  "title": "last_modified",
                  "description": "The UTC ISO 8601 time when the branch was last modified."
                }
              },
              "required": [
                "key",
                "name",
                "thumbnail_url",
                "last_modified"
              ]
            },
            "title": "branches",
            "description": "This is a list of branches for this file."
          }
        },
        "required": [
          "name",
          "role",
          "lastModified",
          "editorType",
          "version",
          "components",
          "componentSets",
          "schemaVersion",
          "styles"
        ],
        "description": "DTO corresponding to the information in the read Figma file."
      },
      "Component": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key of the component"
          },
          "name": {
            "type": "string",
            "description": "Name of the component"
          },
          "description": {
            "type": "string",
            "description": "The description of the component as entered in the editor"
          },
          "componentSetId": {
            "type": "string",
            "description": "The ID of the component set if the component belongs to one"
          },
          "documentationLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentationLink"
            },
            "description": "An array of documentation links attached to this component"
          },
          "remote": {
            "type": "boolean",
            "description": "Whether this component is a remote component that doesn't live in this file"
          }
        },
        "required": [
          "key",
          "name",
          "description",
          "documentationLinks",
          "remote"
        ],
        "description": "A description of a main component. Helps you identify which component instances are attached to."
      },
      "DocumentationLink": {
        "type": "object",
        "properties": {
          "uri": {
            "type": "string",
            "title": "Should be a valid URI (e.g. https://www.figma.com)",
            "description": "Should be a valid URI (e.g. https://www.figma.com)."
          }
        },
        "required": [
          "uri"
        ],
        "description": "Represents a link to documentation for a component or component set."
      },
      "ComponentSet": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key of the component set"
          },
          "name": {
            "type": "string",
            "description": "Name of the component set"
          },
          "description": {
            "type": "string",
            "description": "The description of the component set as entered in the editor"
          },
          "documentationLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentationLink"
            },
            "description": "An array of documentation links attached to this component set"
          },
          "remote": {
            "type": "boolean",
            "description": "Whether this component set is a remote component set that doesn't live in this file"
          }
        },
        "required": [
          "key",
          "name",
          "description"
        ],
        "description": "A description of a component set, which is a node containing a set of variants of a component."
      },
      "Style": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key of the style"
          },
          "name": {
            "type": "string",
            "description": "Name of the style"
          },
          "description": {
            "type": "string",
            "description": "Description of the style"
          },
          "remote": {
            "type": "boolean",
            "description": "Whether this style is a remote style that doesn't live in this file"
          },
          "styleType": {
            "oneOf": [
              {
                "const": "FILL"
              },
              {
                "const": "TEXT"
              },
              {
                "const": "EFFECT"
              },
              {
                "const": "GRID"
              }
            ]
          }
        },
        "required": [
          "key",
          "name",
          "description",
          "remote",
          "styleType"
        ],
        "description": "A set of properties that can be applied to nodes and published. Styles for a property can be\ncreated in the corresponding property's panel while editing a file."
      },
      "IFigma.IReadFileInput": {
        "type": "object",
        "properties": {
          "fileKey": {
            "type": "string",
            "title": "A unique key value for each Figma file or component",
            "description": "It means the key of the file.\n\nHere, the file key means the Figma frame."
          },
          "version": {
            "type": "string",
            "title": "The specific version ID to retrieve",
            "description": "The specific version ID to retrieve. If omitted, the current version of the file is retrieved."
          },
          "ids": {
            "type": "string",
            "title": "A comma-separated list of nodes of interest in the document",
            "description": "A comma-separated list of nodes of interest in the document. If specified, only the node, its children, and all subsets between the root node and the listed nodes will be returned.\n\nNote: Other nodes outside the ancestor chain of the desired node may be included in the returned JSON. The response may also include dependencies of things in the node's subtree. For example, if the node's subtree contains instances of local components located elsewhere in the file, those components and their ancestor chains will also be included.\n\nFor historical reasons, the top-level canvas node is always returned, regardless of whether it is listed in the `ids` parameter. This quirk may be removed in a future API version."
          },
          "depth": {
            "type": "integer",
            "title": "A positive integer indicating how deep to traverse the document tree",
            "description": "A positive integer indicating how deep to traverse the document tree. For example, setting this to 1 will return only pages, while setting it to 2 will return the pages and all top-level objects for each page. If this parameter is not set, all nodes will be returned."
          },
          "geometry": {
            "type": "string",
            "title": "Vector data to export",
            "description": "Set to \"paths\" when exporting vector data."
          },
          "plugin_data": {
            "type": "string",
            "title": "A comma-separated list of plugin IDs and/or the string \"shared\"",
            "description": "A comma-separated list of plugin IDs and/or the string \"shared\". All data in the document created by that plugin will be included in the `pluginData` and `sharedPluginData` properties of the result."
          },
          "branch_data": {
            "type": "boolean",
            "default": false,
            "title": "Indicates whether to return branch metadata for the requested file",
            "description": "Returns branch metadata for the requested file. If the file is a branch, the returned response also includes the main file key. If the file has a branch, its metadata is also returned. Default: false."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "figma",
            "x-wrtn-secret-scopes": [
              "files:read",
              "file_variables:read",
              "file_variables:write",
              "file_comments:write",
              "file_dev_resources:read",
              "file_dev_resources:write",
              "library_analytics:read",
              "webhooks:write"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "fileKey",
          "secretKey"
        ],
        "description": "A DTO that retrieves files from a specific Figma frame.\n\nYou can read files from one frame at a time."
      },
      "Comment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Unique identifier for comment",
            "description": "Unique identifier for comment."
          },
          "client_meta": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Vector"
              },
              {
                "$ref": "#/components/schemas/FrameOffset"
              },
              {
                "$ref": "#/components/schemas/Region"
              },
              {
                "$ref": "#/components/schemas/FrameOffsetRegion"
              }
            ],
            "description": "Positioning information of the comment. Includes information on the location of the comment pin,\nwhich is either the absolute coordinates on the canvas or a relative offset within a frame. If\nthe comment is a region, it will also contain the region height, width, and position of the\nanchor in regards to the region."
          },
          "file_key": {
            "type": "string",
            "description": "The file in which the comment lives"
          },
          "parent_id": {
            "type": "string",
            "description": "If present, the id of the comment to which this is the reply"
          },
          "user": {
            "$ref": "#/components/schemas/User",
            "description": "The user who left the comment"
          },
          "created_at": {
            "type": "string",
            "description": "The UTC ISO 8601 time at which the comment was left"
          },
          "resolved_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "description": "If set, the UTC ISO 8601 time the comment was resolved"
          },
          "message": {
            "type": "string",
            "description": "The content of the comment"
          },
          "order_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "description": "Only set for top level comments. The number displayed with the comment in the UI"
          },
          "reactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Reaction"
            },
            "description": "An array of reactions to the comment"
          }
        },
        "required": [
          "id",
          "client_meta",
          "file_key",
          "user",
          "created_at",
          "message",
          "order_id",
          "reactions"
        ],
        "description": "A comment or reply left by a user."
      },
      "Vector": {
        "type": "object",
        "properties": {
          "x": {
            "type": "number",
            "title": "X coordinate of the vector",
            "description": "X coordinate of the vector."
          },
          "y": {
            "type": "number",
            "title": "Y coordinate of the vector",
            "description": "Y coordinate of the vector."
          }
        },
        "required": [
          "x",
          "y"
        ],
        "description": "A 2d vector."
      },
      "FrameOffset": {
        "type": "object",
        "properties": {
          "node_id": {
            "type": "string",
            "title": "Unique id specifying the frame",
            "description": "Unique id specifying the frame."
          },
          "node_offset": {
            "$ref": "#/components/schemas/Vector",
            "title": "2D vector offset within the frame from the top-left corner",
            "description": "2D vector offset within the frame from the top-left corner."
          }
        },
        "required": [
          "node_id",
          "node_offset"
        ],
        "description": "Position of a comment relative to the frame to which it is attached."
      },
      "Region": {
        "type": "object",
        "properties": {
          "x": {
            "type": "number",
            "title": "X coordinate of the position",
            "description": "X coordinate of the position."
          },
          "y": {
            "type": "number",
            "title": "Y coordinate of the position",
            "description": "Y coordinate of the position."
          },
          "region_height": {
            "type": "number",
            "title": "The height of the comment region. Must be greater than 0",
            "description": "The height of the comment region. Must be greater than 0."
          },
          "region_width": {
            "type": "number",
            "title": "The width of the comment region. Must be greater than 0",
            "description": "The width of the comment region. Must be greater than 0."
          },
          "comment_pin_corner": {
            "oneOf": [
              {
                "const": "top-left"
              },
              {
                "const": "top-right"
              },
              {
                "const": "bottom-left"
              },
              {
                "const": "bottom-right"
              }
            ],
            "title": "The corner of the comment region to pin to the node's corner as a string enum",
            "description": "The corner of the comment region to pin to the node's corner as a string enum."
          }
        },
        "required": [
          "x",
          "y",
          "region_height",
          "region_width"
        ],
        "description": "Position of a region comment on the canvas."
      },
      "FrameOffsetRegion": {
        "type": "object",
        "properties": {
          "node_id": {
            "type": "string",
            "title": "Unique id specifying the frame",
            "description": "Unique id specifying the frame."
          },
          "node_offset": {
            "$ref": "#/components/schemas/Vector",
            "title": "2D vector offset within the frame from the top-left corner",
            "description": "2D vector offset within the frame from the top-left corner."
          },
          "region_height": {
            "type": "number",
            "title": "The height of the comment region. Must be greater than 0",
            "description": "The height of the comment region. Must be greater than 0."
          },
          "region_width": {
            "type": "number",
            "title": "The width of the comment region. Must be greater than 0",
            "description": "The width of the comment region. Must be greater than 0."
          },
          "comment_pin_corner": {
            "oneOf": [
              {
                "const": "top-left"
              },
              {
                "const": "top-right"
              },
              {
                "const": "bottom-left"
              },
              {
                "const": "bottom-right"
              }
            ],
            "title": "The corner of the comment region to pin to the node's corner as a string enum",
            "description": "The corner of the comment region to pin to the node's corner as a string enum."
          }
        },
        "required": [
          "node_id",
          "node_offset",
          "region_height",
          "region_width"
        ],
        "description": "Position of a region comment relative to the frame to which it is attached."
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Unique stable id of the user",
            "description": "Unique stable id of the user."
          },
          "handle": {
            "type": "string",
            "title": "Name of the user",
            "description": "Name of the user."
          },
          "img_url": {
            "type": "string",
            "title": "URL link to the user's profile image",
            "description": "URL link to the user's profile image."
          }
        },
        "required": [
          "id",
          "handle",
          "img_url"
        ],
        "description": "A description of a user."
      },
      "Reaction": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/User",
            "title": "The user who left the reaction",
            "description": "The user who left the reaction."
          },
          "emoji": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "title": "The UTC ISO 8601 time at which the reaction was left",
            "description": "The UTC ISO 8601 time at which the reaction was left."
          }
        },
        "required": [
          "user",
          "emoji",
          "created_at"
        ],
        "description": "A reaction left by a user."
      },
      "IFigma.IAddCommentInput": {
        "type": "object",
        "properties": {
          "fileKey": {
            "type": "string",
            "title": "A unique key value for each Figma file or component",
            "description": "It means the key of the file."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "figma",
            "x-wrtn-secret-scopes": [
              "files:read",
              "file_variables:read",
              "file_variables:write",
              "file_comments:write",
              "file_dev_resources:read",
              "file_dev_resources:write",
              "library_analytics:read",
              "webhooks:write"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          },
          "message": {
            "type": "string",
            "title": "The text contents of the comment to post",
            "description": "The text contents of the comment to post."
          },
          "comment_id": {
            "type": "string",
            "description": "The ID of the comment to reply to, if any. This must be a root comment. You cannot reply to other\nreplies (a comment that has a parent_id)."
          },
          "client_meta": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Vector"
              },
              {
                "$ref": "#/components/schemas/FrameOffset"
              },
              {
                "$ref": "#/components/schemas/Region"
              },
              {
                "$ref": "#/components/schemas/FrameOffsetRegion"
              }
            ],
            "title": "The position where to place the comment",
            "description": "The position where to place the comment."
          }
        },
        "required": [
          "fileKey",
          "secretKey",
          "message"
        ],
        "description": "DTO for adding comments to a specific area.\n\nYou can write one comment at a time, and you can write comments using coordinate values, nodes, or parent comments (root comments)."
      },
      "GetCommentsResponse": {
        "type": "object",
        "properties": {
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "title": "An array of comments",
            "description": "An array of comments."
          }
        },
        "required": [
          "comments"
        ],
        "description": "Response from the GET /v1/files/{file_key}/comments endpoint."
      },
      "IFigma.IReadCommentInput": {
        "type": "object",
        "properties": {
          "fileKey": {
            "type": "string",
            "title": "A unique key value for each Figma file or component",
            "description": "It means the key of the file."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "figma",
            "x-wrtn-secret-scopes": [
              "files:read",
              "file_variables:read",
              "file_variables:write",
              "file_comments:write",
              "file_dev_resources:read",
              "file_dev_resources:write",
              "library_analytics:read",
              "webhooks:write"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          },
          "as_md": {
            "type": "boolean",
            "title": "If enabled, will return comments as their markdown equivalents when applicable",
            "description": "If enabled, will return comments as their markdown equivalents when applicable."
          }
        },
        "required": [
          "fileKey",
          "secretKey"
        ],
        "description": "A DTO that retrieves comments from a specific Figma frame.\n\nYou can read comments from one frame at a time."
      },
      "IFigma.IGetProjectFileOutput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Project Name"
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IFigma.Canvas"
            },
            "title": "Canvas List",
            "description": "A list of canvases managed by the project."
          }
        },
        "required": [
          "name",
          "files"
        ]
      },
      "IFigma.Canvas": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "title": "Canvas Key",
            "description": "A key that uniquely identifies a file.\nThe files mentioned here refer to the canvases managed in the project.\nIn Figma, all child component elements of a canvas, including the canvas, are called files, so be careful not to confuse the terminology."
          },
          "name": {
            "type": "string",
            "title": "Canvas name",
            "description": "It means the name given by the user to identify the file.\nThe file mentioned here refers to the canvases managed in the project.\nIn Figma, all child component elements of the canvas, including the canvas, are called files, so be careful not to confuse the terminology."
          },
          "thumbnail_url": {
            "type": "string",
            "format": "uri",
            "contentMediaType": "image/*",
            "title": "Thumbnail",
            "description": "As a thumbnail image, it provides the main screen of this canvas as a screenshot.\nHowever, if you want to save this thumbnail as a link and use it, please note that this image is provided only for a certain period of time."
          },
          "last_modified": {
            "type": "string",
            "format": "date-time",
            "title": "Last modification time",
            "description": "This refers to the last modification time of the canvas.\nBased on this, you can distinguish the canvas that has been most recently changed or communicated, etc., and is maintained.\nHowever, this value cannot be known unless a comment has been added or there has been a change to the canvas."
          }
        },
        "required": [
          "key",
          "name",
          "thumbnail_url",
          "last_modified"
        ]
      },
      "IFigma.Secret": {
        "type": "object",
        "properties": {
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "figma",
            "x-wrtn-secret-scopes": [
              "files:read",
              "file_variables:read",
              "file_variables:write",
              "file_comments:write",
              "file_dev_resources:read",
              "file_dev_resources:write",
              "library_analytics:read",
              "webhooks:write"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "secretKey"
        ]
      },
      "IFigma.IGetStatisticsOutput": {
        "type": "object",
        "properties": {
          "canvasList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IFigma.CanvasStatistics"
            },
            "title": "Statistics by canvas within the project"
          },
          "name": {
            "type": "string",
            "title": "Project Name"
          },
          "id": {
            "type": "string",
            "title": "Project ID"
          }
        },
        "required": [
          "canvasList",
          "name",
          "id"
        ]
      },
      "IFigma.CanvasStatistics": {
        "type": "object",
        "properties": {
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "title": "List of comments in canvas"
          },
          "statistics": {
            "type": "object",
            "properties": {
              "users": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "title": "List of people who participated in the discussion"
              },
              "counts": {
                "$ref": "#/components/schemas/Recordstringnumber",
                "title": "Number of comments per person"
              }
            },
            "required": [
              "users",
              "counts"
            ],
            "title": "Statistics on comments in canvas"
          },
          "key": {
            "type": "string",
            "title": "Canvas Key",
            "description": "A key that uniquely identifies a file.\nThe files mentioned here refer to the canvases managed in the project.\nIn Figma, all child component elements of a canvas, including the canvas, are called files, so be careful not to confuse the terminology."
          },
          "name": {
            "type": "string",
            "title": "Canvas name",
            "description": "It means the name given by the user to identify the file.\nThe file mentioned here refers to the canvases managed in the project.\nIn Figma, all child component elements of the canvas, including the canvas, are called files, so be careful not to confuse the terminology."
          },
          "thumbnail_url": {
            "type": "string",
            "format": "uri",
            "contentMediaType": "image/*",
            "title": "Thumbnail",
            "description": "As a thumbnail image, it provides the main screen of this canvas as a screenshot.\nHowever, if you want to save this thumbnail as a link and use it, please note that this image is provided only for a certain period of time."
          },
          "last_modified": {
            "type": "string",
            "format": "date-time",
            "title": "Last modification time",
            "description": "This refers to the last modification time of the canvas.\nBased on this, you can distinguish the canvas that has been most recently changed or communicated, etc., and is maintained.\nHowever, this value cannot be known unless a comment has been added or there has been a change to the canvas."
          }
        },
        "required": [
          "comments",
          "statistics",
          "key",
          "name",
          "thumbnail_url",
          "last_modified"
        ]
      },
      "Recordstringnumber": {
        "type": "object",
        "properties": {},
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "type": "number"
        }
      },
      "IFigma.IGetProjectStatisticsInput": {
        "type": "object",
        "properties": {
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "figma",
            "x-wrtn-secret-scopes": [
              "files:read",
              "file_variables:read",
              "file_variables:write",
              "file_comments:write",
              "file_dev_resources:read",
              "file_dev_resources:write",
              "library_analytics:read",
              "webhooks:write"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          },
          "as_md": {
            "type": "boolean",
            "title": "If enabled, will return comments as their markdown equivalents when applicable",
            "description": "If enabled, will return comments as their markdown equivalents when applicable."
          },
          "teamId": {
            "type": "string",
            "title": "Team ID",
            "description": "When accessing the link `https://www.figma.com/files/team`, it refers to the string attached after the `team` keyword.\n\nThe team ID is in numeric format, and there can be multiple projects within the team."
          }
        },
        "required": [
          "secretKey",
          "teamId"
        ]
      },
      "IFigma.IGetProejctOutput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Team Name"
          },
          "projects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IFigma.Project"
            },
            "title": "Project List\n\nThis refers to the list of projects belonging to the team."
          }
        },
        "required": [
          "name",
          "projects"
        ]
      },
      "IFigma.Project": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Project ID"
          },
          "name": {
            "type": "string",
            "title": "Project Name"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "IFigma.IGetProjectInput": {
        "type": "object",
        "properties": {
          "teamId": {
            "type": "string",
            "title": "Team ID",
            "description": "When accessing the link `https://www.figma.com/files/team`, it refers to the string attached after the `team` keyword.\n\nThe team ID is in numeric format, and there can be multiple projects within the team."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "figma",
            "x-wrtn-secret-scopes": [
              "files:read",
              "file_variables:read",
              "file_variables:write",
              "file_comments:write",
              "file_dev_resources:read",
              "file_dev_resources:write",
              "library_analytics:read",
              "webhooks:write"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "teamId",
          "secretKey"
        ],
        "title": "Project search conditions"
      }
    }
  },
  "tags": [
    {
      "name": "Figma"
    }
  ],
  "x-samchon-emended": true
}