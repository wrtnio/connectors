{
  "openapi": "3.1.0",
  "servers": [
    {
      "url": "https://studio-connector-api.wrtn.ai",
      "description": "Production Server"
    },
    {
      "url": "https://studio-connector-poc.dev.wrtn.club",
      "description": "Develop Server"
    },
    {
      "url": "http://localhost:3003",
      "description": "Local Server"
    }
  ],
  "info": {
    "title": "Github",
    "summary": "Github에서 코드를 읽고 분석하고 작성해요",
    "description": "Github에서 유저나 코드를 조회하고 분석할 수 있어요. 직접 코드를 작성하고 커밋하고 PR을 날리거나, 또 코멘트를 남겨줄 수도 있습니다.",
    "version": "0.1.348",
    "license": {
      "name": "AGPL-3.0-only"
    }
  },
  "paths": {
    "/connector/github/users/get-received-events": {
      "post": {
        "summary": "List events received by the authenticated user",
        "description": "List events received by the authenticated user\n\nThese are events that you've received by watching repositories and following users.\nIf you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.\nIn this case, the \"received\" event includes the repository that the user is interested in or the activity of the user who is following,\nfor example, if the user has pushed to the repository, or if an issue has been created from the repository that the user is interested in.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IGetReceivedEventInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IGetEventOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/users/get-pinned-repositories": {
      "post": {
        "summary": "Inquire the user's pinned repository names",
        "description": "Inquire the user's pinned repositories\n\nInquire up to 6 repositories where the user has pinned.\nHere, only the name of the repository is searched, so if necessary, find detailed information about the repository by pageing the user's repository list.\nPlacing a pin in a repository is most likely a repository that users are most confident in.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IGetUserPinnedRepositoryInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "repositories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/users/get-repositories": {
      "post": {
        "summary": "Inquire the user's repositories",
        "description": "Inquire the user's repositories\n\nSince it contains only the simplest information of the repository here, there is no way to know the lead me of the repository or detailed information.\nIt is recommended to use additional connectors to explore because other connectors have the ability to read leads or internal files in the repository.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IGetUserRepositoryInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "repositories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IGetUserRepositoryOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/organizations/users/get-events": {
      "post": {
        "summary": "Lists organization events for the authenticated user",
        "description": "Lists organization events for the authenticated user\n\nThis API endpoint retrieves events that have occurred within the organizations\nthe authenticated user is a member of. It includes activities such as issues,\npull requests, commits, and other actions taken within the organization's repositories.\n\nThe events cover all repositories within the organization that the user has access to,\nmaking it useful for tracking the organization's activity or monitoring the progress\nof projects that the user is involved in within the team.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IGetOrganizationEventInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "A list of events from the organizations the authenticated user is a member of.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IGetEventOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/organizations/get-issues": {
      "post": {
        "summary": "List organization issues assigned to the authenticated user",
        "description": "List organization issues assigned to the authenticated user\n\nSimilar to the 'get-issues' connector, it is suitable for inquiring only about issues assigned within a specific organization.\nNaturally, the user will have to be a member of that organization.\n\nHere, the result value can be inquired together with PR because PR on GitHub is essentially an issue-like object.\nIf you want to see the issue separately, you should use a connector that looks up the issue in the repo, not the organization.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IGetOrganizationAuthenticationUserIssueInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IGetOrganizationAuthenticationUserIssueOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/organizations/get-repositories": {
      "post": {
        "summary": "List organization repositories",
        "description": "List organization repositories\n\nThis endpoint allows you to list all repositories that belong to a specified organization on GitHub.\nIt's useful for viewing all the repositories under an organization’s account, including both public and private repositories, depending on your access level.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IGetOrganizationEventInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IGetOrganizationRepositoryOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/organizations/get-events": {
      "post": {
        "summary": "List public organization events.",
        "description": "List public organization events\n\nIf you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.\n\nThis API endpoint retrieves a stream of public events that have occurred\nwithin a specified organization. These events include activities such as\nrepository creation, issues, pull requests, and other actions taken by members\nof the organization across all its public repositories.\n\nThis is useful for monitoring the public activity within an organization,\nproviding insights into how the organization is managing its projects,\nthe work being done by its members, and the overall public engagement with\nits repositories.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IGetOrganizationEventInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IGetEventOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/repos/get-collaborators": {
      "post": {
        "summary": "List repository collaborators",
        "description": "List repository collaborators\n\nFor organization-owned repositories, the list of collaborators includes outside collaborators,\norganization members that are direct collaborators, organization members with access through team memberships,\norganization members with access through default organization permissions, and organization owners.\nOrganization members with write, maintain, or admin privileges on the organization-owned repository can use this endpoint.\nTeam members will include the members of child teams.\n\nYou can refer to it before specifying a person in charge of the issue or a reviewer for PR.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IGetCollaboratorInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IGetCollaboratorOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/repos/commits/contents": {
      "delete": {
        "summary": "Delete file content and commit",
        "description": "Delete file content in github repository\n\nTo delete file content is the same as creating a single commit.\nCommit is a hash that must be created in github to save changes, such as uploading, modifying, deleting, and so on.\n\nAs the sha value of the file to be modified, a conflict may occur if it is not the latest sha value among the sha values of the file.\nIt's safe when you look up a list of files through API to check sha and put in a value, or want to re-modify the sha value of a file you just created.\n\nIf the user directly asks you to add, modify, or delete a file for a specific PR or specific branch, this connector should be considered.\nMany repositories are working on commit conventions. Before committing, it's a good idea to look up the commit-list to see how you leave the commit message.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IDeleteFileContentInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      },
      "put": {
        "summary": "Update File content and commit",
        "description": "Update file content in github repository\n\nUpdating file content is the same as creating a single commit.\nCommit is a hash that must be created in github to save changes, such as uploading, modifying, deleting, and so on.\n\nAs the sha value of the file to be modified, a conflict may occur if it is not the latest sha value among the sha values of the file.\nIt's safe when you look up a list of files through API to check sha and put in a value, or want to re-modify the sha value of a file you just created.\n\nIf you modify a file, it's not like appending the code to the file, it's like overwriting the file.\nGenerally, if a user says he wants to modify it, it means that he wants to add the code to a specific file or refact it,\nso it's right to check the existing code and then change some of the contents to the original to reflect it.\nIn addition, it is recommended to receive confirmation from the user every time about the content and then modify or add it.\n\nIf the user directly asks you to add, modify, or delete a file for a specific PR or specific branch, this connector should be considered.\nMany repositories are working on commit conventions. Before committing, it's a good idea to look up the commit-list to see how you leave the commit message.\n\nThe input property, which means the content of a file, changes to base64 inside that connector when written in human-recognizable natural language. So, do not encode any writing into base64.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IUpdateFileContentInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IUpsertFileContentOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      },
      "post": {
        "summary": "Create File content and commit",
        "description": "Create file content in github repository\n\nIf the file already exists in the same path, you should use the modification API and this connector is only responsible for generation.\nCreating file content is the same as creating a single commit.\nCommit is a hash that must be created in github to save changes, such as uploading, modifying, deleting, and so on.\n\nIf someone says they want to add a file to the repo it's like they want to commit.\nHowever, in this case, you should check which branch you want to add the file to, and you should not create it in the default branch if you do not specify the branch.\nUsers value branches that reflect their commitments.\nIn addition, it is recommended to receive confirmation from the user every time about the content and then modify or add it.\n\nIf the user directly asks you to add, modify, or delete a file for a specific PR or specific branch, this connector should be considered.\n\nThe input property, which means the content of a file, changes to base64 inside that connector when written in human-recognizable natural language. So, do not encode any writing into base64.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.ICreateFileContentInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IUpsertFileContentOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/repos/get-folder-structures": {
      "post": {
        "summary": "Review Repository Folder Structure",
        "description": "Review Repository Folder Structure\n\nIt allows you to know the overall folder structure by traversing files in the repository.\nThis feature is intended to navigate like a DFS based on folders.\nIf this function is so vast that you cannot see the entire folder, you can pass the `path` again to inquire.\nThe `path` delivered is treated like a Root folder and continues the navigation from this folder.\nThis feature is designed to navigate to the inside two more times, up to steps 0, 1 at a time, based on the root folder.\n\nIf you want to know the details of the file, it is recommended to use the get-contents connector.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IGetRepositoryFolderStructureInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/RepositoryFolderchildrenany"
                      },
                      {
                        "$ref": "#/components/schemas/StrictOmitIGithub.RepositoryFilecontentencoding"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "type",
                      "mapping": {
                        "dir": "#/components/schemas/RepositoryFolderchildrenany",
                        "file": "#/components/schemas/StrictOmitIGithub.RepositoryFilecontentencoding"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/repos/get-contents/bulk": {
      "post": {
        "summary": "Look up repository files(bulk)",
        "description": "Look up repository files(bulk)\n\nIf the file you want to inquire is a folder, internal files are provided in an array,\nand if it is a file, it inquires about the encoding method of the file and the body content of the file.\nSince there may be countless files and folders in the github repository, there may be many files that exceed the rate limit.\nIn this case, you can try to solve this problem by sequentially finding the folders one by one using the corresponding connector.\nYou can pass multiple file paths to view multiple files at the same time.\nThere is no limit to the number of files.\n\nThis is suitable for viewing files on specific branches, but if the user is for the purpose of viewing details of code reviews or PR, it is recommended to use a different connector.\nThere are connectors that view the list of files changed in PR, or see the changes.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IGetBulkFileContentInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "array",
                        "items": {
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/IGithub.RepositoryFolder"
                            },
                            {
                              "$ref": "#/components/schemas/StrictOmitIGithub.RepositoryFilecontentencoding"
                            }
                          ],
                          "discriminator": {
                            "propertyName": "type",
                            "mapping": {
                              "dir": "#/components/schemas/IGithub.RepositoryFolder",
                              "file": "#/components/schemas/StrictOmitIGithub.RepositoryFilecontentencoding"
                            }
                          }
                        }
                      },
                      {
                        "$ref": "#/components/schemas/IGithub.RepositoryFile"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "const": "null",
                            "title": "type"
                          },
                          "size": {
                            "const": 0,
                            "title": "size"
                          },
                          "message": {
                            "const": "No files exist corresponding to the path.",
                            "title": "message"
                          }
                        },
                        "required": [
                          "type",
                          "size",
                          "message"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/repos/get-contents": {
      "post": {
        "summary": "Look up repository files",
        "description": "Look up repository files\n\nIf the file you want to inquire is a folder, internal files are provided in an array,\nand if it is a file, it inquires about the encoding method of the file and the body content of the file.\nSince there may be countless files and folders in the github repository, there may be many files that exceed the rate limit.\nIn this case, you can try to solve this problem by sequentially finding the folders one by one using the corresponding connector.\n\nThis is suitable for viewing files on specific branches, but if the user is for the purpose of viewing details of code reviews or PR, it is recommended to use a different connector.\nThere are connectors that view the list of files changed in PR, or see the changes.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IGetFileContentInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/IGithub.RepositoryFolder"
                          },
                          {
                            "$ref": "#/components/schemas/StrictOmitIGithub.RepositoryFilecontentencoding"
                          }
                        ],
                        "discriminator": {
                          "propertyName": "type",
                          "mapping": {
                            "dir": "#/components/schemas/IGithub.RepositoryFolder",
                            "file": "#/components/schemas/StrictOmitIGithub.RepositoryFilecontentencoding"
                          }
                        }
                      }
                    },
                    {
                      "$ref": "#/components/schemas/IGithub.RepositoryFile"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "type": {
                          "const": "null",
                          "title": "type"
                        },
                        "size": {
                          "const": 0,
                          "title": "size"
                        },
                        "message": {
                          "const": "No files exist corresponding to the path.",
                          "title": "message"
                        }
                      },
                      "required": [
                        "type",
                        "size",
                        "message"
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/repos/get-readme": {
      "post": {
        "summary": "Read the README file",
        "description": "Read the README file in the repository\n\nREADME is one of the initial settings of the project and usually records a description of this repository,\nso it's useful if you want to see a rough description of the repository.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IGetReadmeFileContentInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "$ref": "#/components/schemas/IGithub.RepositoryFile"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "file": "#/components/schemas/IGithub.RepositoryFile"
                    }
                  }
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/repos/get-events": {
      "post": {
        "summary": "List events for the authenticated user",
        "description": "List events for the authenticated user\n\nIf you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.\nYou can check all events surrounding the repository, such as who inquired and who forked.\nIt is used in conjunction with a connector that inquires the activity details and is suitable for checking how active the repository is.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IGetRepoEventInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IGetEventOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/networks/get-events": {
      "post": {
        "summary": "List public events for a network of repositories",
        "description": "Fetches events across all forks of a specified repository.\n\nThis API endpoint provides a stream of events that occur in any fork\nof the specified repository. It includes actions such as commits,\npull requests, issues, and other activity happening in the forked\nrepositories.\n\nUse this endpoint when you need to monitor the activity not just\nin the original repository, but also in all of its forks. This can\nbe particularly useful for understanding the broader impact or\nactivity surrounding a popular project that has been forked multiple\ntimes.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IGetRepoEventInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IGetEventOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/users/get-events": {
      "post": {
        "summary": "List events for the authenticated user.",
        "description": "List events for the authenticated user\n\nThis API endpoint retrieves a stream of events related to the authenticated user,\nincluding activities such as issues, pull requests, commits, and repository actions\nthat the user has participated in or been mentioned in. The events reflect the user's\ninteractions across all repositories they have access to, both public and private (if\nthe user has appropriate permissions).\n\nThis is useful for tracking a user's activity on GitHub, allowing you to see a\npersonalized feed of their involvement in various projects and interactions with\nother users.\n\nIf you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.\nIt looks up users' public events. Username should be your own nickname because you can usually only see your own events.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IGetUserEventInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IGetEventOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/users/get-organizations": {
      "post": {
        "summary": "List organizations for a user",
        "description": "List organizations for a user\n\nLook up the user's organization list, but since you can't look up the user's private organization here,\nyou can't really conclude that there isn't an empty array.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IGetUserOrganizationInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IGetUserOrganizationOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/get-events": {
      "post": {
        "summary": "List public events.",
        "description": "List public events\n\nThis API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.\nWhen I look up the events, they may not be of much value to the user because they are events that occurred on github.\n\nIt's looking up public events, and it's looking at events that occur on github regardless of the specific user.\nTherefore, it may not be of much use unless it is a special case.\nIf you want to get your information, it would be more advantageous to use the 'user/get-events' connector.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IGetEventInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IGetEventOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/repositories/get-activities": {
      "post": {
        "summary": "Get Repository' activities",
        "description": "Get repository activities\n\nYou can use it to see how active your contribution is to the repository\nbecause it looks up all the activities that have occurred in the repository.\n\nThe types of activities that can be viewed here are as follows, and you can also find out by which user it was operated.\npush, force_push, branch_creation, branch_deletion, pr_merge, merge_queue_merge",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IGetRepositoryActivityInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IGetRepositoryActivityOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/repositories/pull-requests": {
      "put": {
        "description": "Update pull request\n\nUse to change the title or body of a PR, or draft status or open-close status.\nIt can also be used for overwriting labels or modifying them.\nIt can also be used to close or reopen pull request.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Update pull request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IUpdatePullRequestInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IUpdatePullRequestOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      },
      "post": {
        "description": "Create pull request\n\nCreates a pull request from a branch to a particular branch.\nIf the branch has already generated a pull request to the base branch, an error of 422 may occur.\nThis error indicates a collision because only one pull request from branch to another branch can exist open at the same time.\n\nIf the user wants to see each PR unit, this connector will be suitable.\n\nWhen creating a PR, be sure to specify the base branch and the head branch, and even if it can be omitted, be sure to include Titles and bodies as much as possible.\nYou can also create a pull request in draft state if necessary.\n\nIn order to create PR, you may need to refer to the PULL_REQUEST_TEMPLATE.md file that you specified in the .github folder in advance, in which case refer to the connector 'POST /connector/github/repos/get-contents'.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Create pull request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.ICreatePullRequestInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.ICreatePullRequestOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/repositories/pull-requests/get-comments": {
      "post": {
        "summary": "List pull request comments",
        "description": "List pull request comments\n\nYou can use the REST API to list comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.\nIn any case, you can also view comments with the number on pull request.\nIssue comments are ordered by ascending ID.\n\nThis is actually the same as connector POST '/connector/github/repositories/issues/get-comments'.\nComments and reviews on PR are separate, you can only see comments on this connector.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IGetPullRequestCommentsInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IGetIssueCommentsOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/repositories/pull-requests/comments": {
      "post": {
        "summary": "Create an pull request comment",
        "description": "Create an pull request comment",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.ICreateIssueCommentInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IssueComment"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/repositories/pull-requests/get-requested-reviewers": {
      "post": {
        "summary": "Get all requested reviewers for a pull request",
        "description": "Get all requested reviewers\n\nGets the users or teams whose review is requested for a pull request.\nOnce a requested reviewer submits a review, they are no longer considered a requested reviewer.\nTheir review will instead be returned by the List reviews for a pull request operation.\n\nThe requested_reviewers are the ones who have been asked to review, but not yet.\nSo when you see someone who has reviewed a PR, if that person is someone who has already finished a review, he/she will be part of the reviewers, not the requested_reviewers.\nTherefore, when you look at a reviewer, you should look at it separately between someone who has not yet reviewed it and one person who has reviewed it, which you should also call other features to see together.\nRefer to connector `:post /connector/github/repositories/pull-requests/get-reviews`.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IReadPullRequestDetailInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IReadPullRequestRequestedReviewerOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/repositories/pull-requests/requested-reviewers": {
      "delete": {
        "summary": "Remove requested reviewers from a pull request",
        "description": "Removes review requests from a pull request for a given set of users and/or teams\n\nYou should check the person who has already been requested as a reviewer, i.e., requested_reviewers, and then send out the delete request.\nEven if you don't do that, there will be no error, but it doesn't mean anything if you delete the person who hasn't been requested as a reviewer.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IRequestReviewerInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      },
      "post": {
        "summary": "Request reviewers for a pull request",
        "description": "Request reviewers for a pull request\n\nRequests reviews for a pull request from a given set of users and/or teams. This endpoint triggers notifications.\nYou can specify a reviewer by the user's name alone, but not by anyone, so use a connector that looks up collaborators first.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IRequestReviewerInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/repositories/pull-requests/reviews/get-comments": {
      "post": {
        "summary": "List comments for a pull request review",
        "description": "List comments for a pull request review\n\nLists comments for a specific pull request review.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IGetReviewCommentInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IGetReviewCommentOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/repositories/pull-requests/get-reviews": {
      "post": {
        "summary": "List reviews for a pull request",
        "description": "List reviews for a pull request\n\nPull Request Reviews are groups of pull request review comments on a pull request, grouped together with a state and optional body comment.\nLists all reviews for a specified pull request. The list of reviews returns in chronological order.\nSince github distinguishes requested_reviewers from those who have already completed the review,\nif you want to see a review for any PR, you should look up both of these connectors.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IReadPullRequestReviewInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IReadPullRequestReviewOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/repositories/pull-requests/reviews": {
      "post": {
        "summary": "Create a review for a pull request",
        "description": "Create a review for a pull request\n\nPull request reviews created in the PENDING state are not submitted and therefore do not include the submitted_at property in the response. To create a pending review for a pull request, leave the event parameter blank.\nThe position value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment. The line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IReviewPullRequestInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IReviewPullRequestOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/repositories/pull-requests/get-files": {
      "post": {
        "summary": "List pull requests files",
        "description": "List pull requests files\n\nThis is useful to see what files are contained in that PR.\nEach file's patch contains the entire format of the file.\nHowever, if you want to know the changes, you should look up diff, which is implemented with a different connector, so you'd better refer to it.\n\nIf the user wants to see each PR unit, this connector will be suitable.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IReadPullRequestFileInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IReadPullRequestFileOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/repositories/pull-requests/get-commits": {
      "post": {
        "description": "List commits on a pull request\n\nLists a maximum of 250 commits for a pull request.\nTo receive a complete commit list for pull requests with more than 250 commits, use the List commits endpoint.\n\nIf the user wants to see each PR unit, this connector will be suitable.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IReadPullRequestCommitInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IReadPullRequestCommitOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/repositories/pull-requests/get-diff": {
      "post": {
        "summary": "Get a diff of pull request",
        "description": "Get a diff of pull-request info\n\nThis is the same as PR's ability to query files,\nbut the format that this function returns is a string, which is more suitable for identifying changes to each file than viewing each file object,\nand in github, this is called the application/vnd.github.diff format.\nThis helps you see at a glance what codes have disappeared and been added in a form suitable for code review.\n\nIf the user wants to see each PR unit, this connector will be suitable.\n\nIf there are too many changes, the connector can export a 406 error.\nIn this case, it may be difficult to determine each change, but it is recommended to use the List pull requests connector.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IReadPullRequestDetailInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/repositories/pull-requests/get-detail": {
      "post": {
        "summary": "Get a pull request",
        "description": "Get a deatiled pull-request info\n\nYou can view detailed PR information using the PR number.\nHere, you can see the branch to be merged and the information on the branch it points to, and you can see information such as the status of the PR, the time of each state, and the person who created the PR.\nHowever, it should be used with other connectors because it provides information close to the header of PR and does not provide information about each file or commit of PR.\n\nIf the user wants to see each PR unit, this connector will be suitable.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IReadPullRequestDetailInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.PullRequest"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/repositories/get-pull-requests": {
      "post": {
        "summary": "Get Repository' pull request",
        "description": "List repository pull requests\n\nQuery pool requests to specific repositories.\nHere, you can filter issues and see only pool requests, and you can sort them by creation and inquiry dates, or filter by open or closed status.\nThe content of the body is omitted, so if you want to see it, you should use the detailed lookup connector.\nIf the user wants to see the body property, '/connector/github/repositories/pull-requests/get-detail' connector must be called.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IFetchRepositoryPullRequestInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IFetchRepositoryPullRequestOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/repositories/issues/get-detail": {
      "post": {
        "summary": "Get a issue",
        "description": "Get a deatiled issue info\n\nUnlike the body omitted from the issue list inquiry, it is suitable for viewing details as it can inquire all the contents.\nHowever, this connector alone cannot see all the comments or timelines inside, and other connectors must be used.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IGetIssueDetailInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.DetailedIssue"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/repositories/issues/get-comments": {
      "post": {
        "summary": "List issue comments",
        "description": "List issue comments\n\nYou can use the REST API to list comments on issues and pull requests. Every pull request is an issue, but not every issue is a pull request.\nIn any case, you can also view comments with the number on pull request.\nIssue comments are ordered by ascending ID.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IGetIssueCommentsInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IGetIssueCommentsOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/repositories/issues/comments": {
      "post": {
        "summary": "Create an issue comment",
        "description": "Create an issue comment\n\nAdd a comment. If you put an issue number, you can add a comment to the issue, where the issue number is also the number of PR.\nIn other words, both issue and PR can add a comment through this connector.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.ICreateIssueCommentInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IssueComment"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/repositories/get-issues": {
      "post": {
        "summary": "List repository issues",
        "description": "List repository issues\n\nList issues in a repository.\nThis connector is perfect if you want to see the issue of the repository because it can be viewed without being authenticated.\nInformation on the issue comes out, but only 10 people and labels attached to the issue are provided.\nTherefore, if you want more detailed information, it's a good idea to look at it with a connector that looks at the details of the issue.\nWhen looking up an issue, you can view open and closed issues and sort them by creation time, correction time, comment count, and reaction count.\nFor more information, you should check the properties part of the request type.\n\nThe content of the body is omitted, so if you want to see it, you should use the detailed lookup connector.\nIf the user wants to see the body property, '/connector/github/repositories/issues/get-detail' connector must be called.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IFetchRepositoryInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IFetchRepositoryOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/get-users": {
      "post": {
        "summary": "Search for users by keyword in github",
        "description": "Search for users by keyword in github",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.ISearchUserInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "list of user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.ISearchUserOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/get-user-profile": {
      "post": {
        "summary": "Look up the user's detailed profile",
        "description": "Look up the user's detailed profile",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IGetUserProfileInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "detailed profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IGetUserProfileOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/get-organizations": {
      "post": {
        "summary": "List organizations for the authenticated user",
        "description": "List organizations for the authenticated user\n\nInquire the user's repository.\nHere, the user is an authenticated user, which means a user of that token.\nIf a user does not select an organization at login or ask the organization's admin to link it,\nthe resource might not be viewed even if the token scope has permissions.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IGetAuthenticatedUserOrganizationInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IGetAuthenticatedUserOrganizationOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/get-branches": {
      "post": {
        "summary": "Inquire the user's branch",
        "description": "Inquire the user's branch\nYou can look up a list of branches in a specific repository.\nBecause it says what the last commit is, and when and to whom it was made,\nyou can see which of the branches is the latest and managed.\n\nYou shouldn't call the main branch arbitrarily because there may be people who use the master branch.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IGetBranchInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IGetBranchOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/branches": {
      "post": {
        "summary": "Create branch",
        "description": "Create branch\n\nCreates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.\nYou need to know the sha of the commit, so if you want to create a branch, you should first call another connector that looks up the commit list or header commitments to find out the sha value.\nIf you want to copy the branch, you should also look up the commit history of the branch and then retrieve the sha value from the branch's HEAD commit.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.ICreateBranchInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.ICreateBranchOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/get-pull-requests-associated-with-a-commit": {
      "post": {
        "summary": "get pull requests associated with a commit",
        "description": "List pull requests associated with a commit\n\nFetches the pull requests (PRs) associated with a specific commit in a GitHub repository.\nThis API endpoint retrieves a list of pull requests that include the specified commit.\nThis can be useful for tracking where and how a particular change was merged into a branch.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IGetPullRequestInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "pull requests associated with a commit",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StrictOmitIGithub.PullRequestcommentsmaintainer_can_modifymergeablerebaseablemergeable_statemerged_byreview_commentscommitsadditionsdeletionschanged_files"
                  }
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/get-commit-heads": {
      "post": {
        "summary": "Lists all branches that contain the HEAD commit",
        "description": "Lists all branches that contain the HEAD commit of a GitHub repository.\n\nThis function utilizes the GitHub API to retrieve a list of branches where the current\nHEAD commit (the latest commit on the checked-out branch) is included. This is useful for\ndetermining which branches contain the most recent changes.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IGetCommitHeadInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "A promise that resolves to an array of branch names that include the specified commit.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IGetCommitHeadOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/get-commit": {
      "post": {
        "summary": "Inquire the commit details of the user",
        "description": "Inquire the commit details of the user\nIt contains all the history of how the file changed, so you can see the details of a single commit node.\nIf you do not deliver ref, look up based on default_branch.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IGetCommitInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "detailed commit history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IGetCommitOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/get-commit-diff": {
      "post": {
        "summary": "Inquire the commit diff of the user",
        "description": "Inquire the commit diff of the user\ndiff is Github's own content type specification that allows you to identify changes per commit on the Github homepage.\nIf you do not deliver ref, look up based on default_branch.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IGetCommitInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "commit diff",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/get-commit-list": {
      "post": {
        "summary": "Look up the list of commitments for a specific repo, a specific branch",
        "description": "Look up the list of commitments for a specific repo, a specific branch\n\nThis function can be used in general because it sees the commit list in units of branches, but if the user wants to see it in units of PR, it is better to use another connector.\nIf the user specifies to view in PR units, use other connectors because there are connectors for viewing files, commit lists, and changes in PR units elsewhere.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IGetCommitListInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "list of commit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IGetCommitListOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/get-followers": {
      "post": {
        "summary": "Inquire the followers of the user",
        "description": "Inquire the followers of the user\n\nThis value can be viewed by about 100 people at a time because it is a page-nated result.\nIf you have someone you're looking for, it's important to keep looking for the next page, even if you haven't found the value on the first page.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IGetFollowerInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IGetFollowerOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/get-followees": {
      "post": {
        "summary": "Inquire the followees of the user",
        "description": "Inquire the followees of the user\n\nThis value can be viewed by about 100 people at a time because it is a page-nated result.\nIf you have someone you're looking for, it's important to keep looking for the next page, even if you haven't found the value on the first page.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IGetFolloweeInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IGetFolloweeOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/get-labels": {
      "post": {
        "summary": "List labels for a repository",
        "description": "List labels for a repository\n\nView a list of issues created and used in that repository.\nEach issue will only have labels that are already registered in this repository.\nOf course, it doesn't necessarily mean that you have to use only the labels here when creating issues,\nbut it would be beneficial to assign them by referring to the labels here.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IGetLabelInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.IGetLabelOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/github/issues": {
      "patch": {
        "summary": "Update an issue",
        "description": "Update an issue in the repository\n\nUpdate an issue, where you can enter labels and assignes together.\nThe information you must enter is who will create the issue in the owner's repository and under what title.\nThe information in the text should follow the markdown grammar allowed by github.\n\nIn some cases, if you are not the owner of this repository, you may not be able to make any marking on issues such as labels, assignees, milestones, etc.\nIt can also be used to close or reopen issues.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.IUpdateIssueInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.Issue"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      },
      "post": {
        "summary": "Create an issue",
        "description": "Leave an issue in the repository\n\nCreate an issue, where you can enter labels and assignes together.\nThe information you must enter is who will create the issue in the owner's repository and under what title.\nThe information in the text should follow the markdown grammar allowed by github.\n\nIn some cases, if you are not the owner of this repository, you may not be able to make any marking on issues such as labels, assignees, milestones, etc.\n\nIn order to create issue, you may need to refer to the issue template files that you specified in the .github folder in advance, in which case refer to the connector 'POST /connector/github/repos/get-contents'.",
        "tags": [
          "Github"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IGithub.ICreateIssueInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IGithub.Issue"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/github.svg"
      }
    },
    "/connector/rag/analyze": {
      "post": {
        "summary": "Request RAG analysis",
        "description": "Request RAG analysis for the input file\n\nThis connector can be used when creating a chatbot that compares multiple research papers.",
        "tags": [
          "RAG"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Information about the file to be analyzed",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IRag.IAnalyzeInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IRag.IAnalysisOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/fulls/RAG_full.svg"
      }
    },
    "/connector/rag/generate/{chatId}": {
      "post": {
        "summary": "Generate RAG-based results",
        "description": "Generates requested results based on RAG analysis\n\nA connector that can be used to generate answers to user questions through a chatbot that compares multiple research papers.",
        "tags": [
          "RAG"
        ],
        "parameters": [
          {
            "name": "chatId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IRag.IGenerateInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IRag.IGenerateOutput"
                }
              }
            }
          }
        },
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/fulls/RAG_full.svg"
      }
    }
  },
  "components": {
    "schemas": {
      "IGithub.IGetEventOutput": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "title": "id"
                },
                "type": {
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "const": "CommitCommentEvent",
                      "title": "CommitCommentEvent",
                      "description": "Triggered when a comment is added to a commit."
                    },
                    {
                      "const": "CreateEvent",
                      "title": "CreateEvent",
                      "description": "Triggered when a new branch, tag, or repository is created."
                    },
                    {
                      "const": "DeleteEvent",
                      "title": "DeleteEvent",
                      "description": "Triggered when a branch or tag is deleted."
                    },
                    {
                      "const": "ForkEvent",
                      "title": "ForkEvent",
                      "description": "Triggered when a user forks a repository."
                    },
                    {
                      "const": "GollumEvent",
                      "title": "GollumEvent",
                      "description": "Triggered when a Wiki page is created or updated."
                    },
                    {
                      "const": "IssueCommentEvent",
                      "title": "IssueCommentEvent",
                      "description": "Triggered when a comment is added to an issue."
                    },
                    {
                      "const": "IssuesEvent",
                      "title": "IssuesEvent",
                      "description": "Triggered when an issue is opened, edited, or closed."
                    },
                    {
                      "const": "MemberEvent",
                      "title": "MemberEvent",
                      "description": "Triggered when a user is added as a collaborator to a repository."
                    },
                    {
                      "const": "PublicEvent",
                      "title": "PublicEvent",
                      "description": "Triggered when a private repository is made public."
                    },
                    {
                      "const": "PullRequestEvent",
                      "title": "PullRequestEvent",
                      "description": "Triggered when a pull request is opened, edited, merged, or closed."
                    },
                    {
                      "const": "PullRequestReviewEvent",
                      "title": "PullRequestReviewEvent",
                      "description": "Triggered when a review is submitted for a pull request."
                    },
                    {
                      "const": "PullRequestReviewCommentEvent",
                      "title": "PullRequestReviewCommentEvent",
                      "description": "Triggered when a comment is added to a pull request's review."
                    },
                    {
                      "const": "PullRequestReviewThreadEvent",
                      "title": "PullRequestReviewThreadEvent",
                      "description": "Triggered when a review thread in a pull request has a change."
                    },
                    {
                      "const": "PushEvent",
                      "title": "PushEvent",
                      "description": "Triggered when commits are pushed to a repository."
                    },
                    {
                      "const": "ReleaseEvent",
                      "title": "ReleaseEvent",
                      "description": "Triggered when a release is published."
                    },
                    {
                      "const": "SponsorshipEvent",
                      "title": "SponsorshipEvent",
                      "description": "Triggered when a sponsorship is started or modified."
                    },
                    {
                      "const": "WatchEvent",
                      "title": "WatchEvent",
                      "description": "Triggered when a user stars a repository."
                    }
                  ],
                  "title": "event type\nThere are various events such as `WatchEvent`, `CreateEvent`, `ForkEvent`."
                },
                "actor": {
                  "$ref": "#/components/schemas/MyPickIGithub.Useridlogin",
                  "title": "user"
                },
                "repo": {
                  "$ref": "#/components/schemas/MyPickIGithub.Repositorynameid",
                  "title": "repo"
                },
                "org": {
                  "$ref": "#/components/schemas/MyPickIGithub.Organizationidlogindisplay_login",
                  "title": "org"
                },
                "payload": {
                  "$ref": "#/components/schemas/IGithub.Payload",
                  "title": "payload"
                },
                "public": {
                  "type": "boolean",
                  "title": "whather is public"
                },
                "created_at": {
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "type": "string",
                      "format": "date-time"
                    }
                  ],
                  "title": "created_at"
                }
              },
              "required": [
                "id",
                "type",
                "actor",
                "repo",
                "payload",
                "public",
                "created_at"
              ]
            },
            "title": "event"
          },
          "nextPage": {
            "type": "boolean",
            "title": "true if there is a next page",
            "description": "However, since true and false are judged by comparing the number of requested objects with the number of searched objects,\neven if true, the next page may be empty."
          },
          "after": {
            "type": "string",
            "title": "after\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the next page."
          },
          "before": {
            "type": "string",
            "title": "before\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the previous page."
          },
          "prev": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "prev",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the previous page."
          },
          "next": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "next",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the next page."
          },
          "last": {
            "type": "number",
            "title": "last",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the last page."
          },
          "first": {
            "type": "number",
            "title": "first",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the first page."
          }
        },
        "required": [
          "result",
          "nextPage"
        ]
      },
      "MyPickIGithub.Useridlogin": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "title": "id\n\nThis means the user's ID."
          },
          "login": {
            "type": "string",
            "title": "login",
            "description": "This means the user's nickname.\nIn github, nicknames are unique at least until that user changes their own nickname.\nThis means that only one person can own the nickname at a time.\nTherefore, it may be important to know the exact nickname because the github API calls the appi using the user's nickname."
          }
        },
        "required": [
          "id",
          "login"
        ]
      },
      "MyPickIGithub.Repositorynameid": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "name"
          },
          "id": {
            "type": "number",
            "title": "id"
          }
        },
        "required": [
          "name",
          "id"
        ]
      },
      "MyPickIGithub.Organizationidlogindisplay_login": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "title": "id"
          },
          "login": {
            "type": "string",
            "title": "login"
          },
          "display_login": {
            "type": "string",
            "title": "display_login"
          }
        },
        "required": [
          "id",
          "login"
        ]
      },
      "IGithub.Payload": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "title": "action",
            "description": "It means what this event means.\nAlthough the type of event usually has a resource or the name of the event,\nit is necessary to view it with this property because it does not specify what actions occurred in that event are modified, deleted, created, etc."
          },
          "issue": {
            "$ref": "#/components/schemas/IGithub.Issue",
            "title": "issue",
            "description": "If it is an event for an issue, contain the issue information."
          },
          "comment": {
            "$ref": "#/components/schemas/IGithub.Comment",
            "title": "comment",
            "description": "If it is an event for an comment, contain the comment information."
          }
        }
      },
      "IGithub.Issue": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "title": "issue id"
          },
          "html_url": {
            "type": "string",
            "format": "iri",
            "title": "html_url",
            "description": "If you want to see the issue or pull_request on the web, you can go to this link.\nIf pull is included on this link path, it is pull_request, and if issue is included, it is issue.\nIn essence, pull_request and issue are numbered together from the beginning, so while this connector does not distinguish the two, it can be distinguished by the url path."
          },
          "number": {
            "type": "integer",
            "title": "issue number\n\nNumber uniquely identifying the issue within its repository"
          },
          "state": {
            "type": "string",
            "title": "state\n\nState of the issue; either 'open' or 'closed'"
          },
          "state_reason": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "const": "completed"
              },
              {
                "const": "reopened"
              },
              {
                "const": "not_planned"
              }
            ],
            "title": "state_reason",
            "description": "The reason for the current state"
          },
          "title": {
            "type": "string",
            "title": "title",
            "description": "title of the issue"
          },
          "user": {
            "$ref": "#/components/schemas/MyPickIGithub.Usertypeidlogin",
            "title": "user"
          },
          "body": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "body",
            "description": "Contents of the issue\n\nYou can also render this content because it is in a markdown format."
          },
          "labels": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "title": "id"
                    },
                    "url": {
                      "type": "string",
                      "format": "iri",
                      "title": "url"
                    },
                    "name": {
                      "type": "string",
                      "title": "name"
                    },
                    "description": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "title": "description"
                    },
                    "color": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "title": "color"
                    },
                    "default": {
                      "type": "boolean",
                      "title": "default"
                    }
                  }
                }
              ]
            },
            "title": "labels\n\nLabels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository"
          },
          "assignee": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MyPickIGithub.Userlogin"
              }
            ],
            "title": "assignee"
          },
          "assignees": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MyPickIGithub.Userlogin"
                }
              }
            ],
            "title": "assignees\n\nIf there are many people in charge, you can be included in the array."
          }
        },
        "required": [
          "id",
          "html_url",
          "number",
          "state",
          "title",
          "user",
          "labels",
          "assignee"
        ]
      },
      "MyPickIGithub.Usertypeidlogin": {
        "type": "object",
        "properties": {
          "type": {
            "oneOf": [
              {
                "const": "User"
              },
              {
                "const": "Bot"
              },
              {
                "const": "Organization"
              }
            ],
            "title": "type"
          },
          "id": {
            "type": "number",
            "title": "id\n\nThis means the user's ID."
          },
          "login": {
            "type": "string",
            "title": "login",
            "description": "This means the user's nickname.\nIn github, nicknames are unique at least until that user changes their own nickname.\nThis means that only one person can own the nickname at a time.\nTherefore, it may be important to know the exact nickname because the github API calls the appi using the user's nickname."
          }
        },
        "required": [
          "type",
          "id",
          "login"
        ]
      },
      "MyPickIGithub.Userlogin": {
        "type": "object",
        "properties": {
          "login": {
            "type": "string",
            "title": "login",
            "description": "This means the user's nickname.\nIn github, nicknames are unique at least until that user changes their own nickname.\nThis means that only one person can own the nickname at a time.\nTherefore, it may be important to know the exact nickname because the github API calls the appi using the user's nickname."
          }
        },
        "required": [
          "login"
        ]
      },
      "IGithub.Comment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "title": "id"
          },
          "body": {
            "type": "string",
            "title": "body"
          },
          "user": {
            "$ref": "#/components/schemas/MyPickIGithub.Usertypeidloginhtml_urlavatar_url",
            "title": "user"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "created_at"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "updated_at"
          },
          "pages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IGithub.Page"
            },
            "title": "pages"
          }
        },
        "required": [
          "id",
          "user",
          "created_at",
          "updated_at"
        ]
      },
      "MyPickIGithub.Usertypeidloginhtml_urlavatar_url": {
        "type": "object",
        "properties": {
          "type": {
            "oneOf": [
              {
                "const": "User"
              },
              {
                "const": "Bot"
              },
              {
                "const": "Organization"
              }
            ],
            "title": "type"
          },
          "id": {
            "type": "number",
            "title": "id\n\nThis means the user's ID."
          },
          "login": {
            "type": "string",
            "title": "login",
            "description": "This means the user's nickname.\nIn github, nicknames are unique at least until that user changes their own nickname.\nThis means that only one person can own the nickname at a time.\nTherefore, it may be important to know the exact nickname because the github API calls the appi using the user's nickname."
          },
          "html_url": {
            "type": "string",
            "format": "iri",
            "title": "html_url\n\nIf you want to look up your profile, you can access this website."
          },
          "avatar_url": {
            "type": "string",
            "format": "iri",
            "title": "avatar url\n\nThis means the user's profile image."
          }
        },
        "required": [
          "type",
          "id",
          "login",
          "html_url",
          "avatar_url"
        ]
      },
      "IGithub.Page": {
        "type": "object",
        "properties": {
          "page_name": {
            "type": "string",
            "title": "page_name"
          },
          "title": {
            "type": "string",
            "title": "title"
          },
          "summary": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "summary"
          },
          "action": {
            "type": "string",
            "title": "action"
          },
          "sha": {
            "type": "string",
            "title": "sha"
          },
          "html_url": {
            "type": "string",
            "title": "html_url"
          }
        }
      },
      "IGithub.IGetReceivedEventInput": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "title": "user's nickname"
          },
          "page": {
            "type": "integer",
            "default": 1,
            "title": "page",
            "description": "The page number of the results to fetch."
          },
          "per_page": {
            "type": "integer",
            "default": 30,
            "maximum": 100,
            "title": "per_page",
            "description": "The number of results per page (max 100)."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "username",
          "secretKey"
        ]
      },
      "IGithub.IGetUserPinnedRepositoryInput": {
        "type": "object",
        "properties": {
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "x-wrtn-secret-scopes": [
              "repo"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          },
          "username": {
            "type": "string",
            "x-wrtn-prerequisite": {
              "method": "post",
              "path": "/connector/github/get-users",
              "jmesPath": "items[].{value:login, label:login}"
            },
            "title": "username\n\nThis refers to the nickname of the user who will look up the repository."
          }
        },
        "required": [
          "secretKey",
          "username"
        ]
      },
      "IGithub.IGetUserRepositoryOutput": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IGithub.RepositoryWithReadmeFile"
            },
            "title": "repositories"
          },
          "nextPage": {
            "type": "boolean",
            "title": "true if there is a next page",
            "description": "However, since true and false are judged by comparing the number of requested objects with the number of searched objects,\neven if true, the next page may be empty."
          },
          "after": {
            "type": "string",
            "title": "after\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the next page."
          },
          "before": {
            "type": "string",
            "title": "before\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the previous page."
          },
          "prev": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "prev",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the previous page."
          },
          "next": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "next",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the next page."
          },
          "last": {
            "type": "number",
            "title": "last",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the last page."
          },
          "first": {
            "type": "number",
            "title": "first",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the first page."
          }
        },
        "required": [
          "result",
          "nextPage"
        ]
      },
      "IGithub.RepositoryWithReadmeFile": {
        "type": "object",
        "properties": {
          "readme": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IGithub.RepositoryFile"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "file": "#/components/schemas/IGithub.RepositoryFile"
              }
            },
            "title": "readme"
          },
          "id": {
            "type": "number",
            "title": "id"
          },
          "name": {
            "type": "string",
            "title": "name"
          },
          "full_name": {
            "type": "string",
            "title": "full_name\n\nThis is in the form '{username}/{reponame}'."
          },
          "private": {
            "type": "boolean",
            "title": "private"
          },
          "html_url": {
            "type": "string",
            "format": "iri",
            "title": "html_url"
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "description"
          },
          "fork": {
            "type": "boolean",
            "title": "fork"
          },
          "forks_count": {
            "type": "integer",
            "title": "forks_count"
          },
          "stargazers_count": {
            "type": "integer",
            "title": "stargazers_count"
          },
          "watchers_count": {
            "type": "integer",
            "title": "watchers_count"
          },
          "size": {
            "type": "number",
            "title": "size"
          },
          "default_branch": {
            "type": "string",
            "title": "default_branch"
          },
          "open_issues_count": {
            "type": "integer",
            "title": "open_issues_count"
          },
          "is_template": {
            "type": "boolean",
            "title": "is_template"
          },
          "topics": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "topics"
          },
          "has_issues": {
            "type": "boolean",
            "title": "has_issues"
          },
          "has_projects": {
            "type": "boolean",
            "title": "has_projects"
          },
          "has_wiki": {
            "type": "boolean",
            "title": "has_wiki"
          },
          "has_pages": {
            "type": "boolean",
            "title": "has_pages"
          },
          "has_downloads": {
            "type": "boolean",
            "title": "has_downloads"
          },
          "archived": {
            "type": "boolean",
            "title": "archived"
          },
          "disabled": {
            "type": "boolean",
            "title": "disabled"
          },
          "visibility": {
            "oneOf": [
              {
                "const": "private"
              },
              {
                "const": "public"
              }
            ],
            "title": "visibility"
          },
          "pushed_at": {
            "type": "string",
            "format": "date-time",
            "title": "pushed_at"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "created_at"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "updated_at"
          },
          "permissions": {
            "type": "object",
            "properties": {
              "admin": {
                "type": "boolean",
                "title": "admin"
              },
              "push": {
                "type": "boolean",
                "title": "push"
              },
              "pull": {
                "type": "boolean",
                "title": "pull"
              }
            },
            "required": [
              "admin",
              "push",
              "pull"
            ],
            "title": "permissions"
          },
          "allow_rebase_merge": {
            "type": "boolean",
            "title": "allow_rebase_merge"
          },
          "allow_squash_merge": {
            "type": "boolean",
            "title": "allow_squash_merge"
          },
          "allow_auto_merge": {
            "type": "boolean",
            "title": "allow_auto_merge"
          },
          "delete_branch_on_merge": {
            "type": "boolean",
            "title": "delete_branch_on_merge"
          },
          "allow_merge_commit": {
            "type": "boolean",
            "title": "allow_merge_commit"
          },
          "subscribers_count": {
            "type": "integer",
            "title": "subscribers_count"
          },
          "network_count": {
            "type": "integer",
            "title": "network_count"
          },
          "license": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "x-wrtn-placeholder": "mit",
                    "title": "key"
                  },
                  "name": {
                    "type": "string",
                    "x-wrtn-placeholder": "MIT License",
                    "title": "name"
                  },
                  "url": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "string",
                        "x-wrtn-placeholder": "https://api.github.com/licenses/mit"
                      }
                    ],
                    "title": "url"
                  },
                  "spdx_id": {
                    "type": "string",
                    "x-wrtn-placeholder": "MIT",
                    "title": "spdx_id"
                  }
                },
                "required": [
                  "key",
                  "name",
                  "url",
                  "spdx_id"
                ]
              }
            ],
            "title": "license"
          },
          "forks": {
            "type": "integer",
            "title": "forks"
          },
          "open_issues": {
            "type": "integer",
            "title": "open_issues"
          },
          "watchers": {
            "type": "integer",
            "title": "watchers"
          }
        },
        "required": [
          "readme",
          "id",
          "name",
          "full_name",
          "private",
          "html_url",
          "description",
          "fork",
          "forks_count",
          "stargazers_count",
          "watchers_count",
          "size",
          "default_branch",
          "open_issues_count",
          "is_template",
          "topics",
          "has_issues",
          "has_projects",
          "has_wiki",
          "has_pages",
          "has_downloads",
          "archived",
          "disabled",
          "visibility",
          "pushed_at",
          "created_at",
          "updated_at",
          "license",
          "forks",
          "open_issues",
          "watchers"
        ]
      },
      "IGithub.RepositoryFile": {
        "type": "object",
        "properties": {
          "type": {
            "const": "file",
            "title": "type"
          },
          "encoding": {
            "type": "string",
            "x-wrtn-placeholder": "base64",
            "title": "encoding"
          },
          "size": {
            "type": "number",
            "title": "Indicates the file size in bytes"
          },
          "name": {
            "type": "string",
            "title": "name of this file"
          },
          "path": {
            "type": "string",
            "title": "path\n\nIt must be unique as a path for identifying that file in the root folder."
          },
          "content": {
            "type": "string",
            "title": "content"
          },
          "sha": {
            "type": "string",
            "title": "sha"
          },
          "url": {
            "type": "string",
            "title": "url\n\nA link that allows you to view the contents of the file as an Url value for viewing the details of the file."
          },
          "download_url": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "download_url\n\nThe url that allows you to download a file, which is useful if it is a media file containing an image."
          }
        },
        "required": [
          "type",
          "encoding",
          "size",
          "name",
          "path",
          "content",
          "sha",
          "url"
        ]
      },
      "IGithub.IGetUserRepositoryInput": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "x-wrtn-prerequisite": {
              "method": "post",
              "path": "/connector/github/get-users",
              "jmesPath": "items[].{value:login, label:login}"
            },
            "title": "username\n\nThis refers to the nickname of the user who will look up the repository."
          },
          "per_page": {
            "type": "integer",
            "default": 10,
            "maximum": 10,
            "title": "per_page",
            "description": "The number of results per page (max 10).\n\nThe response capacity may be very large because it even comes out with the reedy of the repository.\nTherefore, it is recommended to check by cutting up to 10 pieces."
          },
          "sort": {
            "oneOf": [
              {
                "const": "created",
                "default": "full_name"
              },
              {
                "const": "updated",
                "default": "full_name"
              },
              {
                "const": "pushed",
                "default": "full_name"
              },
              {
                "const": "full_name",
                "default": "full_name"
              }
            ],
            "title": "sorting condition",
            "description": "The property to sort the results by.\nIt must be one of: \"created\" | \"updated\" | \"pushed\" | \"full_name\""
          },
          "direction": {
            "oneOf": [
              {
                "const": "desc",
                "default": "desc"
              },
              {
                "const": "asc",
                "default": "desc"
              }
            ],
            "title": "direction",
            "description": "The order to sort by.\nDefault: asc when using full_name, otherwise desc."
          },
          "since": {
            "type": "string",
            "format": "date-time",
            "title": "since\nOnly show repositories updated after the given time. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ."
          },
          "before": {
            "type": "string",
            "format": "date-time",
            "title": "before\nOnly show repositories updated before the given time. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ."
          },
          "page": {
            "type": "integer",
            "default": 1,
            "title": "page",
            "description": "The page number of the results to fetch."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "x-wrtn-secret-scopes": [
              "repo"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "username",
          "secretKey"
        ]
      },
      "IGithub.IGetOrganizationEventInput": {
        "type": "object",
        "properties": {
          "organization": {
            "type": "string",
            "title": "organization's name\n\nYou can also change it to your nickname."
          },
          "page": {
            "type": "integer",
            "default": 1,
            "title": "page",
            "description": "The page number of the results to fetch."
          },
          "per_page": {
            "type": "integer",
            "default": 30,
            "maximum": 100,
            "title": "per_page",
            "description": "The number of results per page (max 100)."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "organization",
          "secretKey"
        ]
      },
      "IGithub.IGetOrganizationAuthenticationUserIssueOutput": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IGithub.Issue"
            },
            "title": "Issues"
          },
          "nextPage": {
            "type": "boolean",
            "title": "true if there is a next page",
            "description": "However, since true and false are judged by comparing the number of requested objects with the number of searched objects,\neven if true, the next page may be empty."
          },
          "after": {
            "type": "string",
            "title": "after\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the next page."
          },
          "before": {
            "type": "string",
            "title": "before\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the previous page."
          },
          "prev": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "prev",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the previous page."
          },
          "next": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "next",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the next page."
          },
          "last": {
            "type": "number",
            "title": "last",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the last page."
          },
          "first": {
            "type": "number",
            "title": "first",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the first page."
          }
        },
        "required": [
          "result",
          "nextPage"
        ]
      },
      "IGithub.IGetOrganizationAuthenticationUserIssueInput": {
        "type": "object",
        "properties": {
          "organization": {
            "type": "string",
            "title": "organization\nThe organization name. The name is not case sensitive."
          },
          "direction": {
            "oneOf": [
              {
                "const": "desc",
                "default": "desc"
              },
              {
                "const": "asc",
                "default": "desc"
              }
            ],
            "title": "direction",
            "description": "The order to sort by.\nDefault: asc when using full_name, otherwise desc."
          },
          "filter": {
            "oneOf": [
              {
                "const": "assigned",
                "title": "assigned",
                "description": "Indicates which sorts of issues to return.",
                "default": "assigned"
              },
              {
                "const": "created",
                "title": "created",
                "description": "assigned means issues assigned to you.",
                "default": "assigned"
              },
              {
                "const": "mentioned",
                "title": "mentioned",
                "description": "created means issues created by you.",
                "default": "assigned"
              },
              {
                "const": "subscribed",
                "title": "subscribed",
                "description": "mentioned means issues mentioning you.",
                "default": "assigned"
              },
              {
                "const": "repos",
                "title": "repos",
                "description": "subscribed means issues you're subscribed to updates for.",
                "default": "assigned"
              },
              {
                "const": "all",
                "title": "all",
                "description": "all or repos means all issues you can see, regardless of participation or creation.",
                "default": "assigned"
              }
            ],
            "title": "filter",
            "description": "It must be one of: \"assigned\", \"created\", \"mentioned\", \"subscribed\", \"repos\", \"all\"\n\nIndicates which sorts of issues to return.\nassigned means issues assigned to you.\ncreated means issues created by you.\nmentioned means issues mentioning you.\nsubscribed means issues you're subscribed to updates for.\nall or repos means all issues you can see, regardless of participation or creation."
          },
          "state": {
            "oneOf": [
              {
                "const": "open",
                "title": "open",
                "default": "open"
              },
              {
                "const": "closed",
                "title": "closed",
                "default": "open"
              },
              {
                "const": "all",
                "title": "all",
                "default": "open"
              }
            ],
            "title": "state",
            "description": "Indicates the state of the issues to return.\nIt must be one of: 'open', 'closed', 'all'"
          },
          "labels": {
            "type": "string",
            "title": "label\n\nA list of comma separated label names. Example: `bug,ui,@high`"
          },
          "sort": {
            "oneOf": [
              {
                "const": "created",
                "title": "created",
                "default": "created"
              },
              {
                "const": "updated",
                "title": "updated",
                "default": "created"
              },
              {
                "const": "comments",
                "title": "comments",
                "default": "created"
              }
            ],
            "title": "sort\nIt must be 'created', 'updated', 'comments'"
          },
          "owned": {
            "type": "boolean",
            "title": "owned"
          },
          "pulls": {
            "type": "boolean",
            "title": "pulls"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "x-wrtn-secret-scopes": [
              "user",
              "repo"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          },
          "page": {
            "type": "integer",
            "default": 1,
            "title": "page",
            "description": "The page number of the results to fetch."
          },
          "per_page": {
            "type": "integer",
            "default": 30,
            "maximum": 100,
            "title": "per_page",
            "description": "The number of results per page (max 100)."
          }
        },
        "required": [
          "organization",
          "secretKey"
        ]
      },
      "IGithub.IGetOrganizationRepositoryOutput": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IGithub.Repository"
            },
            "title": "repositories"
          },
          "nextPage": {
            "type": "boolean",
            "title": "true if there is a next page",
            "description": "However, since true and false are judged by comparing the number of requested objects with the number of searched objects,\neven if true, the next page may be empty."
          },
          "after": {
            "type": "string",
            "title": "after\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the next page."
          },
          "before": {
            "type": "string",
            "title": "before\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the previous page."
          },
          "prev": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "prev",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the previous page."
          },
          "next": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "next",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the next page."
          },
          "last": {
            "type": "number",
            "title": "last",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the last page."
          },
          "first": {
            "type": "number",
            "title": "first",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the first page."
          }
        },
        "required": [
          "result",
          "nextPage"
        ]
      },
      "IGithub.Repository": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "title": "id"
          },
          "name": {
            "type": "string",
            "title": "name"
          },
          "full_name": {
            "type": "string",
            "title": "full_name\n\nThis is in the form '{username}/{reponame}'."
          },
          "private": {
            "type": "boolean",
            "title": "private"
          },
          "html_url": {
            "type": "string",
            "format": "iri",
            "title": "html_url"
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "description"
          },
          "fork": {
            "type": "boolean",
            "title": "fork"
          },
          "forks_count": {
            "type": "integer",
            "title": "forks_count"
          },
          "stargazers_count": {
            "type": "integer",
            "title": "stargazers_count"
          },
          "watchers_count": {
            "type": "integer",
            "title": "watchers_count"
          },
          "size": {
            "type": "number",
            "title": "size"
          },
          "default_branch": {
            "type": "string",
            "title": "default_branch"
          },
          "open_issues_count": {
            "type": "integer",
            "title": "open_issues_count"
          },
          "is_template": {
            "type": "boolean",
            "title": "is_template"
          },
          "topics": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "topics"
          },
          "has_issues": {
            "type": "boolean",
            "title": "has_issues"
          },
          "has_projects": {
            "type": "boolean",
            "title": "has_projects"
          },
          "has_wiki": {
            "type": "boolean",
            "title": "has_wiki"
          },
          "has_pages": {
            "type": "boolean",
            "title": "has_pages"
          },
          "has_downloads": {
            "type": "boolean",
            "title": "has_downloads"
          },
          "archived": {
            "type": "boolean",
            "title": "archived"
          },
          "disabled": {
            "type": "boolean",
            "title": "disabled"
          },
          "visibility": {
            "oneOf": [
              {
                "const": "private"
              },
              {
                "const": "public"
              }
            ],
            "title": "visibility"
          },
          "pushed_at": {
            "type": "string",
            "format": "date-time",
            "title": "pushed_at"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "created_at"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "updated_at"
          },
          "permissions": {
            "type": "object",
            "properties": {
              "admin": {
                "type": "boolean",
                "title": "admin"
              },
              "push": {
                "type": "boolean",
                "title": "push"
              },
              "pull": {
                "type": "boolean",
                "title": "pull"
              }
            },
            "required": [
              "admin",
              "push",
              "pull"
            ],
            "title": "permissions"
          },
          "allow_rebase_merge": {
            "type": "boolean",
            "title": "allow_rebase_merge"
          },
          "allow_squash_merge": {
            "type": "boolean",
            "title": "allow_squash_merge"
          },
          "allow_auto_merge": {
            "type": "boolean",
            "title": "allow_auto_merge"
          },
          "delete_branch_on_merge": {
            "type": "boolean",
            "title": "delete_branch_on_merge"
          },
          "allow_merge_commit": {
            "type": "boolean",
            "title": "allow_merge_commit"
          },
          "subscribers_count": {
            "type": "integer",
            "title": "subscribers_count"
          },
          "network_count": {
            "type": "integer",
            "title": "network_count"
          },
          "license": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "x-wrtn-placeholder": "mit",
                    "title": "key"
                  },
                  "name": {
                    "type": "string",
                    "x-wrtn-placeholder": "MIT License",
                    "title": "name"
                  },
                  "url": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "string",
                        "x-wrtn-placeholder": "https://api.github.com/licenses/mit"
                      }
                    ],
                    "title": "url"
                  },
                  "spdx_id": {
                    "type": "string",
                    "x-wrtn-placeholder": "MIT",
                    "title": "spdx_id"
                  }
                },
                "required": [
                  "key",
                  "name",
                  "url",
                  "spdx_id"
                ]
              }
            ],
            "title": "license"
          },
          "forks": {
            "type": "integer",
            "title": "forks"
          },
          "open_issues": {
            "type": "integer",
            "title": "open_issues"
          },
          "watchers": {
            "type": "integer",
            "title": "watchers"
          }
        },
        "required": [
          "id",
          "name",
          "full_name",
          "private",
          "html_url",
          "description",
          "fork",
          "forks_count",
          "stargazers_count",
          "watchers_count",
          "size",
          "default_branch",
          "open_issues_count",
          "is_template",
          "topics",
          "has_issues",
          "has_projects",
          "has_wiki",
          "has_pages",
          "has_downloads",
          "archived",
          "disabled",
          "visibility",
          "pushed_at",
          "created_at",
          "updated_at",
          "license",
          "forks",
          "open_issues",
          "watchers"
        ]
      },
      "IGithub.IGetCollaboratorOutput": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IGithub.Collaborator"
            },
            "title": "result"
          },
          "nextPage": {
            "type": "boolean",
            "title": "true if there is a next page",
            "description": "However, since true and false are judged by comparing the number of requested objects with the number of searched objects,\neven if true, the next page may be empty."
          },
          "after": {
            "type": "string",
            "title": "after\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the next page."
          },
          "before": {
            "type": "string",
            "title": "before\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the previous page."
          },
          "prev": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "prev",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the previous page."
          },
          "next": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "next",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the next page."
          },
          "last": {
            "type": "number",
            "title": "last",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the last page."
          },
          "first": {
            "type": "number",
            "title": "first",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the first page."
          }
        },
        "required": [
          "result",
          "nextPage"
        ]
      },
      "IGithub.Collaborator": {
        "type": "object",
        "properties": {
          "type": {
            "oneOf": [
              {
                "const": "User"
              },
              {
                "const": "Bot"
              },
              {
                "const": "Organization"
              }
            ],
            "title": "type"
          },
          "id": {
            "type": "number",
            "title": "id\n\nThis means the user's ID."
          },
          "login": {
            "type": "string",
            "title": "login",
            "description": "This means the user's nickname.\nIn github, nicknames are unique at least until that user changes their own nickname.\nThis means that only one person can own the nickname at a time.\nTherefore, it may be important to know the exact nickname because the github API calls the appi using the user's nickname."
          },
          "html_url": {
            "type": "string",
            "format": "iri",
            "title": "html_url\n\nIf you want to look up your profile, you can access this website."
          },
          "avatar_url": {
            "type": "string",
            "format": "iri",
            "title": "avatar url\n\nThis means the user's profile image."
          }
        },
        "required": [
          "type",
          "id",
          "login",
          "html_url",
          "avatar_url"
        ]
      },
      "IGithub.IGetCollaboratorInput": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "title": "owner's name",
            "description": "The owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository.\nSo the owner here is the nickname of the repository owner, not the name of the person committing or the author."
          },
          "repo": {
            "type": "string",
            "title": "repository name\n\nThe owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository."
          },
          "affiliation": {
            "oneOf": [
              {
                "const": "outside",
                "title": "outside",
                "default": "all"
              },
              {
                "const": "direct",
                "title": "direct",
                "default": "all"
              },
              {
                "const": "all",
                "title": "all",
                "default": "all"
              }
            ],
            "title": "affiliation",
            "description": "Filter collaborators returned by their affiliation.\noutside means all outside collaborators of an organization-owned repository. direct means all collaborators with permissions to an organization-owned repository, regardless of organization membership status. all means all collaborators the authenticated user can see.\nIt must be one of: \"outside\", \"direct\", \"all\"."
          },
          "permission": {
            "oneOf": [
              {
                "const": "pull",
                "title": "pull"
              },
              {
                "const": "triage",
                "title": "triage"
              },
              {
                "const": "push",
                "title": "push"
              },
              {
                "const": "maintain",
                "title": "maintain"
              },
              {
                "const": "admin",
                "title": "admin"
              }
            ],
            "title": "permission",
            "description": "Filter collaborators by the permissions they have on the repository. If not specified, all collaborators will be returned.\nIt must be one of: \"pull\", \"triage\", \"push\", \"maintain\", \"admin\"."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "x-wrtn-secret-scopes": [
              "admin:org",
              "repo"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          },
          "page": {
            "type": "integer",
            "default": 1,
            "title": "page",
            "description": "The page number of the results to fetch."
          },
          "per_page": {
            "type": "integer",
            "default": 30,
            "maximum": 100,
            "title": "per_page",
            "description": "The number of results per page (max 100)."
          }
        },
        "required": [
          "owner",
          "repo",
          "secretKey"
        ]
      },
      "IGithub.IDeleteFileContentInput": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "title": "commit message\nMany repositories are working on commit conventions. Before committing, it's a good idea to look up the commit-list to see how you leave the commit message."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "x-wrtn-secret-scopes": [
              "repo"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          },
          "owner": {
            "type": "string",
            "title": "owner's name",
            "description": "The owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository.\nSo the owner here is the nickname of the repository owner, not the name of the person committing or the author."
          },
          "path": {
            "type": "string",
            "title": "path parameters",
            "description": "It refers to the path of the file, and is the path of the file including folders and extensions.\nIf you want to make index.ts in src, you need to add 'src/index.ts'."
          },
          "repo": {
            "type": "string",
            "title": "repository name\n\nThe owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository."
          },
          "sha": {
            "type": "string",
            "x-wrtn-prerequisite": {
              "method": "post",
              "path": "/connector/github/repos/get-contents",
              "jmesPath": "[].{value:sha, label:path} || {value:sha, label:path}"
            },
            "title": "sha of file content",
            "description": "As the sha value of the file to be modified, a conflict may occur if it is not the latest sha value among the sha values of the file.\nIt's safe when you look up a list of files through API to check sha and put in a value, or want to re-modify the sha value of a file you just created."
          },
          "author": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "title": "The name of the author or committer of the commit"
              },
              "email": {
                "type": "string",
                "title": "The email of the author or committer of the commit"
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "title": "date"
              }
            },
            "required": [
              "name",
              "email",
              "date"
            ],
            "title": "The author of the file",
            "description": "If you don't put anything in, your own information will be injected, so you can leave the value alone.\nSince the user's email cannot necessarily be guaranteed to be the same as Github's email, it is advantageous not to get confirmation from the user or put it in.\n\nDefault: The committer or the authenticated user if you omit committer."
          },
          "committer": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "title": "The name of the author or committer of the commit"
              },
              "email": {
                "type": "string",
                "title": "The email of the author or committer of the commit"
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "title": "date"
              }
            },
            "required": [
              "name",
              "email",
              "date"
            ],
            "title": "The person that committed the file",
            "description": "If you don't put anything in, your own information will be injected, so you can leave the value alone.\nSince the user's email cannot necessarily be guaranteed to be the same as Github's email, it is advantageous not to get confirmation from the user or put it in.\n\nDefault: the authenticated user."
          },
          "branch": {
            "type": "string",
            "title": "branch name\n\nThe branch name. Default: the repository’s default branch"
          }
        },
        "required": [
          "message",
          "secretKey",
          "owner",
          "path",
          "repo",
          "sha"
        ]
      },
      "IGithub.IUpsertFileContentOutput": {
        "type": "object",
        "properties": {
          "content": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "title": "file or folder name"
              },
              "path": {
                "type": "string",
                "title": "file or folder path"
              },
              "sha": {
                "type": "string",
                "title": "sha"
              },
              "size": {
                "type": "number",
                "title": "size"
              }
            },
            "required": [
              "name",
              "path",
              "sha",
              "size"
            ],
            "title": "content"
          },
          "commit": {
            "type": "object",
            "properties": {
              "sha": {
                "type": "string",
                "title": "sha"
              }
            },
            "required": [
              "sha"
            ],
            "title": "commit"
          }
        },
        "required": [
          "content",
          "commit"
        ]
      },
      "IGithub.IUpdateFileContentInput": {
        "type": "object",
        "properties": {
          "sha": {
            "type": "string",
            "x-wrtn-prerequisite": {
              "method": "post",
              "path": "/connector/github/repos/get-contents",
              "jmesPath": "[].{value:sha, label:path} || {value:sha, label:path}"
            },
            "title": "sha of file content",
            "description": "As the sha value of the file to be modified, a conflict may occur if it is not the latest sha value among the sha values of the file.\nIt's safe when you look up a list of files through API to check sha and put in a value, or want to re-modify the sha value of a file you just created."
          },
          "owner": {
            "type": "string",
            "title": "owner's name",
            "description": "The owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository.\nSo the owner here is the nickname of the repository owner, not the name of the person committing or the author."
          },
          "repo": {
            "type": "string",
            "title": "repository name\n\nThe owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository."
          },
          "path": {
            "type": "string",
            "title": "path parameters",
            "description": "It refers to the path of the file, and is the path of the file including folders and extensions.\nIf you want to make index.ts in src, you need to add 'src/index.ts'."
          },
          "message": {
            "type": "string",
            "title": "commit message\nMany repositories are working on commit conventions. Before committing, it's a good idea to look up the commit-list to see how you leave the commit message."
          },
          "content": {
            "type": "string",
            "title": "the new file content",
            "description": "Meaning of the file is text and text.\nIf you want to create code content, you should write code content.\nSince it encodes with base64 internally, we need to deliver text here before encoding."
          },
          "branch": {
            "type": "string",
            "title": "branch name\n\nThe branch name. Default: the repository’s default branch"
          },
          "committer": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "title": "The name of the author or committer of the commit"
              },
              "email": {
                "type": "string",
                "title": "The email of the author or committer of the commit"
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "title": "date"
              }
            },
            "required": [
              "name",
              "email",
              "date"
            ],
            "title": "The person that committed the file",
            "description": "If you don't put anything in, your own information will be injected, so you can leave the value alone.\nSince the user's email cannot necessarily be guaranteed to be the same as Github's email, it is advantageous not to get confirmation from the user or put it in.\n\nDefault: the authenticated user."
          },
          "author": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "title": "The name of the author or committer of the commit"
              },
              "email": {
                "type": "string",
                "title": "The email of the author or committer of the commit"
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "title": "date"
              }
            },
            "required": [
              "name",
              "email",
              "date"
            ],
            "title": "The author of the file",
            "description": "If you don't put anything in, your own information will be injected, so you can leave the value alone.\nSince the user's email cannot necessarily be guaranteed to be the same as Github's email, it is advantageous not to get confirmation from the user or put it in.\n\nDefault: The committer or the authenticated user if you omit committer."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "x-wrtn-secret-scopes": [
              "repo"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "sha",
          "owner",
          "repo",
          "path",
          "message",
          "content",
          "secretKey"
        ]
      },
      "IGithub.ICreateFileContentInput": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "title": "owner's name",
            "description": "The owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository.\nSo the owner here is the nickname of the repository owner, not the name of the person committing or the author."
          },
          "repo": {
            "type": "string",
            "title": "repository name\n\nThe owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository."
          },
          "path": {
            "type": "string",
            "title": "path parameters",
            "description": "It refers to the path of the file, and is the path of the file including folders and extensions.\nIf you want to make index.ts in src, you need to add 'src/index.ts'."
          },
          "message": {
            "type": "string",
            "title": "commit message\nMany repositories are working on commit conventions. Before committing, it's a good idea to look up the commit-list to see how you leave the commit message."
          },
          "content": {
            "type": "string",
            "title": "the new file content",
            "description": "Meaning of the file is text and text.\nIf you want to create code content, you should write code content.\nSince it encodes with base64 internally, we need to deliver text here before encoding."
          },
          "branch": {
            "type": "string",
            "title": "branch name\n\nThe branch name. Default: the repository’s default branch"
          },
          "committer": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "title": "The name of the author or committer of the commit"
              },
              "email": {
                "type": "string",
                "title": "The email of the author or committer of the commit"
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "title": "date"
              }
            },
            "required": [
              "name",
              "email",
              "date"
            ],
            "title": "The person that committed the file",
            "description": "If you don't put anything in, your own information will be injected, so you can leave the value alone.\nSince the user's email cannot necessarily be guaranteed to be the same as Github's email, it is advantageous not to get confirmation from the user or put it in.\n\nDefault: the authenticated user."
          },
          "author": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "title": "The name of the author or committer of the commit"
              },
              "email": {
                "type": "string",
                "title": "The email of the author or committer of the commit"
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "title": "date"
              }
            },
            "required": [
              "name",
              "email",
              "date"
            ],
            "title": "The author of the file",
            "description": "If you don't put anything in, your own information will be injected, so you can leave the value alone.\nSince the user's email cannot necessarily be guaranteed to be the same as Github's email, it is advantageous not to get confirmation from the user or put it in.\n\nDefault: The committer or the authenticated user if you omit committer."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "x-wrtn-secret-scopes": [
              "repo"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "owner",
          "repo",
          "path",
          "message",
          "content",
          "secretKey"
        ]
      },
      "RepositoryFolderchildrenany": {
        "type": "object",
        "properties": {
          "type": {
            "const": "dir",
            "title": "type"
          },
          "size": {
            "const": 0,
            "title": "Indicates the file size in bytes"
          },
          "name": {
            "type": "string",
            "title": "name of this folder"
          },
          "path": {
            "type": "string",
            "title": "path\n\nIt must be unique as a path for identifying that file in the root folder."
          },
          "sha": {
            "type": "string",
            "title": "sha"
          },
          "children": {
            "type": "array",
            "items": {},
            "title": "children",
            "description": "For folders, you may have other files or folders inside.\nThis should also be a folder or file type object,\nbut here, we specify it as any type to prevent it because it can be recursively infinitely large."
          }
        },
        "required": [
          "type",
          "size",
          "name",
          "path",
          "sha",
          "children"
        ]
      },
      "StrictOmitIGithub.RepositoryFilecontentencoding": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "title": "url\n\nA link that allows you to view the contents of the file as an Url value for viewing the details of the file."
          },
          "name": {
            "type": "string",
            "title": "name of this file"
          },
          "type": {
            "const": "file",
            "title": "type"
          },
          "path": {
            "type": "string",
            "title": "path\n\nIt must be unique as a path for identifying that file in the root folder."
          },
          "size": {
            "type": "number",
            "title": "Indicates the file size in bytes"
          },
          "sha": {
            "type": "string",
            "title": "sha"
          },
          "download_url": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "download_url\n\nThe url that allows you to download a file, which is useful if it is a media file containing an image."
          }
        },
        "required": [
          "url",
          "name",
          "type",
          "path",
          "size",
          "sha"
        ]
      },
      "IGithub.IGetRepositoryFolderStructureInput": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "default": "",
            "title": "folder name",
            "description": "The path delivered is treated like a Root folder and continues the navigation from this folder.\nBrowse by this folder, and it must be a folder, not a file.\nIf omitted, start the circuit based on the top Root folder."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "title": "Select authentication information",
            "description": "secret key."
          },
          "owner": {
            "type": "string",
            "title": "owner's name",
            "description": "The owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository.\nSo the owner here is the nickname of the repository owner, not the name of the person committing or the author.\n\nIf it is an organization's repository, it can also be the name of the organization."
          },
          "repo": {
            "type": "string",
            "title": "repository name\n\nThe owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository."
          }
        },
        "required": [
          "secretKey",
          "owner",
          "repo"
        ]
      },
      "IGithub.RepositoryFolder": {
        "type": "object",
        "properties": {
          "type": {
            "const": "dir",
            "title": "type"
          },
          "size": {
            "const": 0,
            "title": "Indicates the file size in bytes"
          },
          "name": {
            "type": "string",
            "title": "name of this folder"
          },
          "path": {
            "type": "string",
            "title": "path\n\nIt must be unique as a path for identifying that file in the root folder."
          },
          "sha": {
            "type": "string",
            "title": "sha"
          }
        },
        "required": [
          "type",
          "size",
          "name",
          "path",
          "sha"
        ]
      },
      "IGithub.IGetBulkFileContentInput": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "title": "owner's name",
            "description": "The owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository.\nSo the owner here is the nickname of the repository owner, not the name of the person committing or the author."
          },
          "repo": {
            "type": "string",
            "title": "repository name\n\nThe owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository."
          },
          "paths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "path parameters",
            "description": "It refers to the path of the file, and is the path of the file including folders and extensions.\nIf you want to make index.ts in src, you need to add 'src/index.ts'."
          },
          "branch": {
            "type": "string",
            "title": "branch name"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "owner",
          "repo",
          "secretKey"
        ]
      },
      "IGithub.IGetFileContentInput": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "title": "owner's name",
            "description": "The owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository.\nSo the owner here is the nickname of the repository owner, not the name of the person committing or the author.\n\nIf it is an organization's repository, it can also be the name of the organization."
          },
          "repo": {
            "type": "string",
            "title": "repository name\n\nThe owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository."
          },
          "path": {
            "type": "string",
            "title": "path parameters",
            "description": "It refers to the path of the file, and is the path of the file including folders and extensions.\nIf you want to make index.ts in src, you need to add 'src/index.ts'."
          },
          "branch": {
            "type": "string",
            "title": "branch name"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "owner",
          "repo",
          "secretKey"
        ]
      },
      "IGithub.IGetReadmeFileContentInput": {
        "type": "object",
        "properties": {
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "title": "Select authentication information",
            "description": "secret key."
          },
          "owner": {
            "type": "string",
            "title": "owner's name",
            "description": "The owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository.\nSo the owner here is the nickname of the repository owner, not the name of the person committing or the author.\n\nIf it is an organization's repository, it can also be the name of the organization."
          },
          "repo": {
            "type": "string",
            "title": "repository name\n\nThe owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository."
          }
        },
        "required": [
          "secretKey",
          "owner",
          "repo"
        ]
      },
      "IGithub.IGetRepoEventInput": {
        "type": "object",
        "properties": {
          "repo": {
            "type": "string",
            "title": "The name of the repository"
          },
          "username": {
            "type": "string",
            "title": "user's nickname"
          },
          "page": {
            "type": "integer",
            "default": 1,
            "title": "page",
            "description": "The page number of the results to fetch."
          },
          "per_page": {
            "type": "integer",
            "default": 30,
            "maximum": 100,
            "title": "per_page",
            "description": "The number of results per page (max 100)."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "repo",
          "username",
          "secretKey"
        ]
      },
      "IGithub.IGetUserEventInput": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "title": "user's nickname"
          },
          "page": {
            "type": "integer",
            "default": 1,
            "title": "page",
            "description": "The page number of the results to fetch."
          },
          "per_page": {
            "type": "integer",
            "default": 30,
            "maximum": 100,
            "title": "per_page",
            "description": "The number of results per page (max 100)."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "username",
          "secretKey"
        ]
      },
      "IGithub.IGetUserOrganizationOutput": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IGithub.Organization"
            },
            "title": "result"
          },
          "nextPage": {
            "type": "boolean",
            "title": "true if there is a next page",
            "description": "However, since true and false are judged by comparing the number of requested objects with the number of searched objects,\neven if true, the next page may be empty."
          },
          "after": {
            "type": "string",
            "title": "after\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the next page."
          },
          "before": {
            "type": "string",
            "title": "before\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the previous page."
          },
          "prev": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "prev",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the previous page."
          },
          "next": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "next",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the next page."
          },
          "last": {
            "type": "number",
            "title": "last",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the last page."
          },
          "first": {
            "type": "number",
            "title": "first",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the first page."
          }
        },
        "required": [
          "result",
          "nextPage"
        ]
      },
      "IGithub.Organization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "title": "id"
          },
          "login": {
            "type": "string",
            "title": "login"
          },
          "display_login": {
            "type": "string",
            "title": "display_login"
          },
          "description": {
            "type": "string",
            "title": "description"
          }
        },
        "required": [
          "id",
          "login"
        ]
      },
      "IGithub.IGetUserOrganizationInput": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "title": "user's nickname"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "x-wrtn-secret-scopes": [
              "user"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          },
          "page": {
            "type": "integer",
            "default": 1,
            "title": "page",
            "description": "The page number of the results to fetch."
          },
          "per_page": {
            "type": "integer",
            "default": 30,
            "maximum": 100,
            "title": "per_page",
            "description": "The number of results per page (max 100)."
          }
        },
        "required": [
          "username",
          "secretKey"
        ]
      },
      "IGithub.IGetEventInput": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "default": 1,
            "title": "page",
            "description": "The page number of the results to fetch."
          },
          "per_page": {
            "type": "integer",
            "default": 30,
            "maximum": 100,
            "title": "per_page",
            "description": "The number of results per page (max 100)."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "secretKey"
        ]
      },
      "IGithub.IGetRepositoryActivityOutput": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IGithub.Activity"
            },
            "title": "result of repository activities"
          },
          "nextPage": {
            "type": "boolean",
            "title": "true if there is a next page",
            "description": "However, since true and false are judged by comparing the number of requested objects with the number of searched objects,\neven if true, the next page may be empty."
          },
          "after": {
            "type": "string",
            "title": "after\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the next page."
          },
          "before": {
            "type": "string",
            "title": "before\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the previous page."
          },
          "prev": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "prev",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the previous page."
          },
          "next": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "next",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the next page."
          },
          "last": {
            "type": "number",
            "title": "last",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the last page."
          },
          "first": {
            "type": "number",
            "title": "first",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the first page."
          }
        },
        "required": [
          "result",
          "nextPage"
        ]
      },
      "IGithub.Activity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "title": "id"
          },
          "ref": {
            "type": "string",
            "x-wrtn-placeholder": "refs/heads/main",
            "title": "ref"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "timestamp"
          },
          "activity_type": {
            "oneOf": [
              {
                "const": "push",
                "title": "push"
              },
              {
                "const": "force_push",
                "title": "force_push"
              },
              {
                "const": "branch_creation",
                "title": "branch_creation"
              },
              {
                "const": "branch_deletion",
                "title": "branch_deletion"
              },
              {
                "const": "pr_merge",
                "title": "pr_merge"
              },
              {
                "const": "merge_queue_merge",
                "title": "merge_queue_merge"
              }
            ],
            "title": "activity type"
          },
          "actor": {
            "$ref": "#/components/schemas/MyPickIGithub.Usertypeidloginavatar_url",
            "title": "actor"
          }
        },
        "required": [
          "id",
          "ref",
          "timestamp",
          "activity_type",
          "actor"
        ]
      },
      "MyPickIGithub.Usertypeidloginavatar_url": {
        "type": "object",
        "properties": {
          "type": {
            "oneOf": [
              {
                "const": "User"
              },
              {
                "const": "Bot"
              },
              {
                "const": "Organization"
              }
            ],
            "title": "type"
          },
          "id": {
            "type": "number",
            "title": "id\n\nThis means the user's ID."
          },
          "login": {
            "type": "string",
            "title": "login",
            "description": "This means the user's nickname.\nIn github, nicknames are unique at least until that user changes their own nickname.\nThis means that only one person can own the nickname at a time.\nTherefore, it may be important to know the exact nickname because the github API calls the appi using the user's nickname."
          },
          "avatar_url": {
            "type": "string",
            "format": "iri",
            "title": "avatar url\n\nThis means the user's profile image."
          }
        },
        "required": [
          "type",
          "id",
          "login",
          "avatar_url"
        ]
      },
      "IGithub.IGetRepositoryActivityInput": {
        "type": "object",
        "properties": {
          "direction": {
            "oneOf": [
              {
                "const": "desc",
                "default": "desc"
              },
              {
                "const": "asc",
                "default": "desc"
              }
            ],
            "title": "direction",
            "description": "The order to sort by.\nDefault: asc when using full_name, otherwise desc."
          },
          "before": {
            "type": "string",
            "title": "before",
            "description": "A cursor, as given in the Link header.\nIf specified, the query only searches for results before this cursor."
          },
          "after": {
            "type": "string",
            "title": "after",
            "description": "A cursor, as given in the Link header.\nIf specified, the query only searches for results after this cursor."
          },
          "owner": {
            "type": "string",
            "title": "user's nickname"
          },
          "repo": {
            "type": "string",
            "title": "The name of the repository"
          },
          "ref": {
            "type": "string",
            "x-wrtn-prerequisite": {
              "method": "post",
              "path": "/connector/github/get-branches",
              "jmesPath": "result[].{value:name, label:name}"
            },
            "title": "ref\n\nThe name of one of the branches of this repository."
          },
          "actor": {
            "type": "string",
            "title": "username"
          },
          "time_period": {
            "oneOf": [
              {
                "const": "day"
              },
              {
                "const": "week"
              },
              {
                "const": "month"
              },
              {
                "const": "quarter"
              },
              {
                "const": "year"
              }
            ],
            "title": "time_period"
          },
          "activity_type": {
            "oneOf": [
              {
                "const": "push",
                "title": "push"
              },
              {
                "const": "force_push",
                "title": "force_push"
              },
              {
                "const": "branch_creation",
                "title": "branch_creation"
              },
              {
                "const": "branch_deletion",
                "title": "branch_deletion"
              },
              {
                "const": "pr_merge",
                "title": "pr_merge"
              },
              {
                "const": "merge_queue_merge",
                "title": "merge_queue_merge"
              }
            ],
            "title": "activity_type"
          },
          "per_page": {
            "type": "integer",
            "default": 30,
            "maximum": 100,
            "title": "per_page",
            "description": "The number of results per page (max 100)."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "x-wrtn-secret-scopes": [
              "repo"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "owner",
          "repo",
          "secretKey"
        ]
      },
      "IGithub.IUpdatePullRequestOutput": {
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "title": "number of this pull request"
          },
          "title": {
            "type": "string",
            "title": "title",
            "description": "title of the issue"
          },
          "id": {
            "type": "integer",
            "title": "issue id"
          }
        },
        "required": [
          "number",
          "title",
          "id"
        ]
      },
      "IGithub.IUpdatePullRequestInput": {
        "type": "object",
        "properties": {
          "pull_number": {
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1,
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/repositories/get-pull-requests",
                  "jmesPath": "pullRequests[].{value:number, label:title}"
                }
              },
              {
                "type": "integer",
                "minimum": 1,
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/repositories/pull-requests",
                  "jmesPath": "pullRequests[].{value:number, label:number}"
                }
              }
            ],
            "title": "pull request number to update"
          },
          "state": {
            "oneOf": [
              {
                "const": "open",
                "title": "open"
              },
              {
                "const": "closed",
                "title": "closed"
              }
            ],
            "title": "state",
            "description": "State of this Pull Request. Either open or closed.\nCan be one of: open, closed"
          },
          "base": {
            "type": "string",
            "title": "base\n\nThe name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository."
          },
          "head": {
            "type": "string",
            "title": "head\n\nThe name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace head with a user like this: username:branch."
          },
          "title": {
            "type": "string",
            "title": "title\n\nThe title of the new pull request. Required unless issue is specified."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "x-wrtn-secret-scopes": [
              "repo"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          },
          "owner": {
            "type": "string",
            "title": "owner's name",
            "description": "The owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository.\nSo the owner here is the nickname of the repository owner, not the name of the person committing or the author."
          },
          "repo": {
            "type": "string",
            "title": "repository name\n\nThe owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository."
          },
          "body": {
            "type": "string",
            "title": "body\n\nThe contents of the pull request."
          },
          "head_repo": {
            "type": "string",
            "title": "head_repo\n\nThe name of the repository where the changes in the pull request were made. This field is required for cross-repository pull requests if both repositories are owned by the same organization."
          },
          "maintainer_can_modify": {
            "type": "boolean",
            "title": "maintainer_can_modify\n\nIndicates whether maintainers can modify the pull request."
          },
          "draft": {
            "type": "boolean",
            "title": "draft\n\nIndicates whether the pull request is a draft. See \"Draft Pull Requests\" in the GitHub Help documentation to learn more."
          },
          "issue": {
            "type": "number",
            "title": "issue\n\nAn issue in the repository to convert to a pull request. The issue title, body, and comments will become the title, body, and comments on the new pull request. Required unless title is specified."
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "labels"
          }
        },
        "required": [
          "pull_number",
          "secretKey",
          "owner",
          "repo"
        ]
      },
      "IGithub.ICreatePullRequestOutput": {
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "title": "number of this pull request"
          },
          "title": {
            "type": "string",
            "title": "title",
            "description": "title of the issue"
          },
          "id": {
            "type": "integer",
            "title": "issue id"
          }
        },
        "required": [
          "number",
          "title",
          "id"
        ]
      },
      "IGithub.ICreatePullRequestInput": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "title": "owner's name",
            "description": "The owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository.\nSo the owner here is the nickname of the repository owner, not the name of the person committing or the author."
          },
          "repo": {
            "type": "string",
            "title": "repository name\n\nThe owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository."
          },
          "title": {
            "type": "string",
            "title": "title\n\nThe title of the new pull request. Required unless issue is specified."
          },
          "head": {
            "type": "string",
            "title": "head\n\nThe name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace head with a user like this: username:branch."
          },
          "head_repo": {
            "type": "string",
            "title": "head_repo\n\nThe name of the repository where the changes in the pull request were made. This field is required for cross-repository pull requests if both repositories are owned by the same organization."
          },
          "base": {
            "type": "string",
            "title": "base\n\nThe name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository."
          },
          "body": {
            "type": "string",
            "title": "body\n\nThe contents of the pull request."
          },
          "maintainer_can_modify": {
            "type": "boolean",
            "title": "maintainer_can_modify\n\nIndicates whether maintainers can modify the pull request."
          },
          "draft": {
            "type": "boolean",
            "title": "draft\n\nIndicates whether the pull request is a draft. See \"Draft Pull Requests\" in the GitHub Help documentation to learn more."
          },
          "issue": {
            "type": "number",
            "title": "issue\n\nAn issue in the repository to convert to a pull request. The issue title, body, and comments will become the title, body, and comments on the new pull request. Required unless title is specified."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "x-wrtn-secret-scopes": [
              "repo"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "owner",
          "repo",
          "head",
          "base",
          "secretKey"
        ]
      },
      "IGithub.IGetIssueCommentsOutput": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IGithub.IssueComment"
            },
            "title": "issue comments"
          },
          "nextPage": {
            "type": "boolean",
            "title": "true if there is a next page",
            "description": "However, since true and false are judged by comparing the number of requested objects with the number of searched objects,\neven if true, the next page may be empty."
          },
          "after": {
            "type": "string",
            "title": "after\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the next page."
          },
          "before": {
            "type": "string",
            "title": "before\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the previous page."
          },
          "prev": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "prev",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the previous page."
          },
          "next": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "next",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the next page."
          },
          "last": {
            "type": "number",
            "title": "last",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the last page."
          },
          "first": {
            "type": "number",
            "title": "first",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the first page."
          }
        },
        "required": [
          "result",
          "nextPage"
        ]
      },
      "IGithub.IssueComment": {
        "type": "object",
        "properties": {
          "issue_url": {
            "type": "string",
            "format": "iri",
            "title": "issue_url"
          },
          "author_association": {
            "oneOf": [
              {
                "const": "COLLABORATOR"
              },
              {
                "const": "CONTRIBUTOR"
              },
              {
                "const": "FIRST_TIMER"
              },
              {
                "const": "FIRST_TIME_CONTRIBUTOR"
              },
              {
                "const": "MANNEQUIN"
              },
              {
                "const": "MEMBER"
              },
              {
                "const": "NONE"
              },
              {
                "const": "OWNER"
              }
            ],
            "title": "author_association"
          },
          "user": {
            "$ref": "#/components/schemas/MyPickIGithub.Usertypeidloginhtml_urlavatar_url",
            "title": "user"
          },
          "id": {
            "type": "integer",
            "title": "id"
          },
          "body": {
            "type": "string",
            "title": "body"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "created_at"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "updated_at"
          }
        },
        "required": [
          "issue_url",
          "author_association",
          "user",
          "id",
          "created_at",
          "updated_at"
        ]
      },
      "IGithub.IGetPullRequestCommentsInput": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "title": "owner's name",
            "description": "The owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository.\nSo the owner here is the nickname of the repository owner, not the name of the person committing or the author."
          },
          "repo": {
            "type": "string",
            "title": "repository name\n\nThe owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository."
          },
          "pull_number": {
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1,
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/repositories/get-pull-requests",
                  "jmesPath": "pullRequests[].{value:number, label:title}"
                }
              },
              {
                "type": "integer",
                "minimum": 1,
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/repositories/pull-requests",
                  "jmesPath": "pullRequests[].{value:number, label:number}"
                }
              }
            ],
            "title": "pull request number to update"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "x-wrtn-secret-scopes": [
              "repo"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          },
          "page": {
            "type": "integer",
            "default": 1,
            "title": "page",
            "description": "The page number of the results to fetch."
          },
          "per_page": {
            "type": "integer",
            "default": 30,
            "maximum": 100,
            "title": "per_page",
            "description": "The number of results per page (max 100)."
          }
        },
        "required": [
          "owner",
          "repo",
          "pull_number",
          "secretKey"
        ]
      },
      "IGithub.ICreateIssueCommentInput": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "title": "The contents of the comment"
          },
          "issue_number": {
            "type": "integer",
            "x-wrtn-prerequisite": {
              "method": "post",
              "path": "/connector/github/repositories/get-issues",
              "jmesPath": "fetchedIssues[].{value:number, label:title}"
            },
            "title": "issue number to get detailed info"
          },
          "owner": {
            "type": "string",
            "title": "owner's name",
            "description": "The owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository.\nSo the owner here is the nickname of the repository owner, not the name of the person committing or the author."
          },
          "repo": {
            "type": "string",
            "title": "repository name\n\nThe owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "body",
          "issue_number",
          "owner",
          "repo",
          "secretKey"
        ]
      },
      "IGithub.IReadPullRequestRequestedReviewerOutput": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IGithub.Collaborator"
            },
            "title": "requested reviewers"
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MyPickIGithub.Teamdescriptionnameidslugnotification_settingpermissionprivacy"
            },
            "title": "team"
          }
        },
        "required": [
          "users",
          "teams"
        ]
      },
      "MyPickIGithub.Teamdescriptionnameidslugnotification_settingpermissionprivacy": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "title": "description"
          },
          "name": {
            "type": "string",
            "title": "name"
          },
          "id": {
            "type": "number",
            "title": "id"
          },
          "slug": {
            "type": "string",
            "title": "slug"
          },
          "notification_setting": {
            "type": "string",
            "title": "notification_setting"
          },
          "permission": {
            "type": "string",
            "title": "permission"
          },
          "privacy": {
            "oneOf": [
              {
                "const": "closed"
              },
              {
                "const": "open"
              }
            ],
            "title": "privacy"
          }
        },
        "required": [
          "description",
          "name",
          "id",
          "slug",
          "notification_setting",
          "permission",
          "privacy"
        ]
      },
      "IGithub.IReadPullRequestDetailInput": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "title": "owner's name",
            "description": "The owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository.\nSo the owner here is the nickname of the repository owner, not the name of the person committing or the author."
          },
          "repo": {
            "type": "string",
            "title": "repository name\n\nThe owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository."
          },
          "pull_number": {
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1,
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/repositories/get-pull-requests",
                  "jmesPath": "pullRequests[].{value:number, label:title}"
                }
              },
              {
                "type": "integer",
                "minimum": 1,
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/repositories/pull-requests",
                  "jmesPath": "pullRequests[].{value:number, label:number}"
                }
              }
            ],
            "title": "pull request number to update"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "x-wrtn-secret-scopes": [
              "repo"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "owner",
          "repo",
          "pull_number",
          "secretKey"
        ]
      },
      "IGithub.IRequestReviewerInput": {
        "type": "object",
        "properties": {
          "reviewers": {
            "type": "array",
            "items": {
              "type": "string",
              "x-wrtn-prerequisite": {
                "method": "post",
                "path": "/connector/github/repos/get-collaborators",
                "jmesPath": "result[].{value:login, label:login}"
              }
            },
            "title": "reviewers",
            "description": "An array of user logins that will be requested."
          },
          "team_reviewers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "team_reviewers",
            "description": "An array of team slugs that will be requested."
          },
          "owner": {
            "type": "string",
            "title": "owner's name",
            "description": "The owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository.\nSo the owner here is the nickname of the repository owner, not the name of the person committing or the author."
          },
          "repo": {
            "type": "string",
            "title": "repository name\n\nThe owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository."
          },
          "pull_number": {
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1,
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/repositories/get-pull-requests",
                  "jmesPath": "pullRequests[].{value:number, label:title}"
                }
              },
              {
                "type": "integer",
                "minimum": 1,
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/repositories/pull-requests",
                  "jmesPath": "pullRequests[].{value:number, label:number}"
                }
              }
            ],
            "title": "pull request number to update"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "x-wrtn-secret-scopes": [
              "repo"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "owner",
          "repo",
          "pull_number",
          "secretKey"
        ]
      },
      "IGithub.IGetReviewCommentOutput": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IGithub.ReviewComment"
            },
            "title": "result"
          },
          "nextPage": {
            "type": "boolean",
            "title": "true if there is a next page",
            "description": "However, since true and false are judged by comparing the number of requested objects with the number of searched objects,\neven if true, the next page may be empty."
          },
          "after": {
            "type": "string",
            "title": "after\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the next page."
          },
          "before": {
            "type": "string",
            "title": "before\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the previous page."
          },
          "prev": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "prev",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the previous page."
          },
          "next": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "next",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the next page."
          },
          "last": {
            "type": "number",
            "title": "last",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the last page."
          },
          "first": {
            "type": "number",
            "title": "first",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the first page."
          }
        },
        "required": [
          "result",
          "nextPage"
        ]
      },
      "IGithub.ReviewComment": {
        "type": "object",
        "properties": {
          "pull_request_review_id": {
            "type": "integer",
            "title": "pull_request_review_id"
          },
          "diff_hunk": {
            "type": "string",
            "title": "diff_hunk",
            "description": "diff_hunk is a form for representing a change in code in github.\nIt consists of strings, and the first line, based on the new line character,\nhas meta information about the change point between the symbols"
          },
          "path": {
            "type": "string",
            "title": "path"
          },
          "position": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ],
            "title": "position",
            "description": "The position in the diff where you want to add a review comment.\nNote this value is not the same as the line number in the file.\nThe position value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment.\nThe line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.\n\nPosition value, which is the number of rows based on diff_hunk."
          },
          "original_position": {
            "type": "integer",
            "title": "original_position\n\nOriginal position value, which is the number of rows based on diff_hunk."
          },
          "commit_id": {
            "type": "string",
            "title": "commit_id"
          },
          "original_commit_id": {
            "type": "string",
            "title": "original_commit_id"
          },
          "in_reply_to_id": {
            "type": "integer",
            "title": "in_reply_to_id\n\nIn_reply_to_id is a field used by GitHub's review or comment API that is used to write a reply to a particular review or comment."
          },
          "user": {
            "$ref": "#/components/schemas/IGithub.Collaborator",
            "title": "user"
          },
          "html_url": {
            "type": "string",
            "format": "iri",
            "title": "html_url"
          },
          "author_association": {
            "oneOf": [
              {
                "const": "COLLABORATOR"
              },
              {
                "const": "CONTRIBUTOR"
              },
              {
                "const": "FIRST_TIMER"
              },
              {
                "const": "FIRST_TIME_CONTRIBUTOR"
              },
              {
                "const": "MANNEQUIN"
              },
              {
                "const": "MEMBER"
              },
              {
                "const": "NONE"
              },
              {
                "const": "OWNER"
              }
            ],
            "title": "author_association"
          },
          "id": {
            "type": "integer",
            "title": "id"
          },
          "body": {
            "type": "string",
            "title": "body"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "created_at"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "updated_at"
          }
        },
        "required": [
          "pull_request_review_id",
          "diff_hunk",
          "path",
          "position",
          "original_position",
          "commit_id",
          "original_commit_id",
          "user",
          "html_url",
          "author_association",
          "id",
          "created_at",
          "updated_at"
        ]
      },
      "IGithub.IGetReviewCommentInput": {
        "type": "object",
        "properties": {
          "review_id": {
            "type": "integer",
            "x-wrtn-prerequisite": {
              "method": "post",
              "path": "/connector/repositories/pull-requests/get-reviews",
              "jmesPath": "result[].{value:id, label: join('', [user.login, ''s review'])}"
            },
            "title": "review_id"
          },
          "owner": {
            "type": "string",
            "title": "owner's name",
            "description": "The owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository.\nSo the owner here is the nickname of the repository owner, not the name of the person committing or the author."
          },
          "repo": {
            "type": "string",
            "title": "repository name\n\nThe owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository."
          },
          "pull_number": {
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1,
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/repositories/get-pull-requests",
                  "jmesPath": "pullRequests[].{value:number, label:title}"
                }
              },
              {
                "type": "integer",
                "minimum": 1,
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/repositories/pull-requests",
                  "jmesPath": "pullRequests[].{value:number, label:number}"
                }
              }
            ],
            "title": "pull request number to update"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "x-wrtn-secret-scopes": [
              "repo"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          },
          "page": {
            "type": "integer",
            "default": 1,
            "title": "page",
            "description": "The page number of the results to fetch."
          },
          "per_page": {
            "type": "integer",
            "default": 30,
            "maximum": 100,
            "title": "per_page",
            "description": "The number of results per page (max 100)."
          }
        },
        "required": [
          "review_id",
          "owner",
          "repo",
          "pull_number",
          "secretKey"
        ]
      },
      "IGithub.IReadPullRequestReviewOutput": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IGithub.Review"
            },
            "title": "commit list of this pull request"
          },
          "nextPage": {
            "type": "boolean",
            "title": "true if there is a next page",
            "description": "However, since true and false are judged by comparing the number of requested objects with the number of searched objects,\neven if true, the next page may be empty."
          },
          "after": {
            "type": "string",
            "title": "after\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the next page."
          },
          "before": {
            "type": "string",
            "title": "before\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the previous page."
          },
          "prev": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "prev",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the previous page."
          },
          "next": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "next",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the next page."
          },
          "last": {
            "type": "number",
            "title": "last",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the last page."
          },
          "first": {
            "type": "number",
            "title": "first",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the first page."
          }
        },
        "required": [
          "result",
          "nextPage"
        ]
      },
      "IGithub.Review": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "title": "id"
          },
          "user": {
            "$ref": "#/components/schemas/IGithub.Collaborator",
            "title": "reviewer"
          },
          "body": {
            "type": "string",
            "title": "body"
          },
          "state": {
            "type": "string",
            "x-wrtn-placeholder": "APPROVED",
            "title": "state"
          },
          "html_url": {
            "type": "string",
            "format": "iri",
            "title": "html_url"
          },
          "pull_request_url": {
            "type": "string",
            "format": "iri",
            "title": "pull_request_url"
          },
          "submitted_at": {
            "type": "string",
            "format": "date-time",
            "title": "submitted_at"
          },
          "commit_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "commit_id",
            "description": "A commit SHA for the review.\nIf the commit object was garbage collected or forcibly deleted, then it no longer exists in Git and this value will be `null`."
          },
          "author_association": {
            "oneOf": [
              {
                "const": "COLLABORATOR"
              },
              {
                "const": "CONTRIBUTOR"
              },
              {
                "const": "FIRST_TIMER"
              },
              {
                "const": "FIRST_TIME_CONTRIBUTOR"
              },
              {
                "const": "MANNEQUIN"
              },
              {
                "const": "MEMBER"
              },
              {
                "const": "NONE"
              },
              {
                "const": "OWNER"
              }
            ],
            "title": "author_association"
          }
        },
        "required": [
          "id",
          "user",
          "body",
          "state",
          "html_url",
          "pull_request_url",
          "commit_id",
          "author_association"
        ]
      },
      "IGithub.IReadPullRequestReviewInput": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "title": "owner's name",
            "description": "The owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository.\nSo the owner here is the nickname of the repository owner, not the name of the person committing or the author."
          },
          "repo": {
            "type": "string",
            "title": "repository name\n\nThe owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository."
          },
          "pull_number": {
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1,
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/repositories/get-pull-requests",
                  "jmesPath": "pullRequests[].{value:number, label:title}"
                }
              },
              {
                "type": "integer",
                "minimum": 1,
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/repositories/pull-requests",
                  "jmesPath": "pullRequests[].{value:number, label:number}"
                }
              }
            ],
            "title": "pull request number to update"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "x-wrtn-secret-scopes": [
              "repo"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          },
          "page": {
            "type": "integer",
            "default": 1,
            "title": "page",
            "description": "The page number of the results to fetch."
          },
          "per_page": {
            "type": "integer",
            "default": 30,
            "maximum": 100,
            "title": "per_page",
            "description": "The number of results per page (max 100)."
          }
        },
        "required": [
          "owner",
          "repo",
          "pull_number",
          "secretKey"
        ]
      },
      "IGithub.IReviewPullRequestOutput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "title": "id"
          }
        },
        "required": [
          "id"
        ]
      },
      "IGithub.IReviewPullRequestInput": {
        "type": "object",
        "properties": {
          "commit_id": {
            "type": "string",
            "title": "commit_id",
            "description": "The SHA of the commit that needs a review.\nNot using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the position.\nDefaults to the most recent commit in the pull request when you do not specify a value."
          },
          "body": {
            "type": "string",
            "title": "body",
            "description": "Required when using REQUEST_CHANGES or COMMENT for the event parameter.\nThe body text of the pull request review."
          },
          "event": {
            "oneOf": [
              {
                "const": "APPROVE",
                "title": "APPROVE"
              },
              {
                "const": "REQUEST_CHANGES",
                "title": "REQUEST_CHANGES"
              },
              {
                "const": "COMMENT",
                "title": "COMMENT"
              }
            ],
            "title": "event",
            "description": "The review action you want to perform.\nThe review actions include: APPROVE, REQUEST_CHANGES, or COMMENT.\nBy leaving this blank, you set the review action state to PENDING, which means you will need to submit the pull request review when you are ready."
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IGithub.IPullRequestComment"
            },
            "title": "comments\n\nUse the following table to specify the location, destination, and contents of the draft review comment."
          },
          "owner": {
            "type": "string",
            "title": "owner's name",
            "description": "The owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository.\nSo the owner here is the nickname of the repository owner, not the name of the person committing or the author."
          },
          "repo": {
            "type": "string",
            "title": "repository name\n\nThe owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository."
          },
          "pull_number": {
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1,
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/repositories/get-pull-requests",
                  "jmesPath": "pullRequests[].{value:number, label:title}"
                }
              },
              {
                "type": "integer",
                "minimum": 1,
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/repositories/pull-requests",
                  "jmesPath": "pullRequests[].{value:number, label:number}"
                }
              }
            ],
            "title": "pull request number to update"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "x-wrtn-secret-scopes": [
              "repo"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "owner",
          "repo",
          "pull_number",
          "secretKey"
        ]
      },
      "IGithub.IPullRequestComment": {
        "type": "object",
        "properties": {
          "line": {
            "type": "integer",
            "title": "line"
          },
          "side": {
            "type": "string",
            "title": "side"
          },
          "start_line": {
            "type": "integer",
            "title": "start_line"
          },
          "start_side": {
            "type": "string",
            "title": "start_side"
          },
          "path": {
            "type": "string",
            "title": "path"
          },
          "body": {
            "type": "string",
            "title": "body"
          },
          "position": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ],
            "title": "position",
            "description": "The position in the diff where you want to add a review comment.\nNote this value is not the same as the line number in the file.\nThe position value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment.\nThe line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.\n\nPosition value, which is the number of rows based on diff_hunk."
          }
        },
        "required": [
          "line",
          "side",
          "start_line",
          "start_side",
          "path",
          "position"
        ]
      },
      "IGithub.IReadPullRequestFileOutput": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IGithub.File"
            },
            "title": "result"
          },
          "nextPage": {
            "type": "boolean",
            "title": "true if there is a next page",
            "description": "However, since true and false are judged by comparing the number of requested objects with the number of searched objects,\neven if true, the next page may be empty."
          },
          "after": {
            "type": "string",
            "title": "after\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the next page."
          },
          "before": {
            "type": "string",
            "title": "before\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the previous page."
          },
          "prev": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "prev",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the previous page."
          },
          "next": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "next",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the next page."
          },
          "last": {
            "type": "number",
            "title": "last",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the last page."
          },
          "first": {
            "type": "number",
            "title": "first",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the first page."
          }
        },
        "required": [
          "result",
          "nextPage"
        ]
      },
      "IGithub.File": {
        "type": "object",
        "properties": {
          "sha": {
            "type": "string",
            "title": "hash of this file"
          },
          "filename": {
            "type": "string",
            "title": "filename"
          },
          "status": {
            "oneOf": [
              {
                "const": "added"
              },
              {
                "const": "removed"
              },
              {
                "const": "modified"
              },
              {
                "const": "renamed"
              },
              {
                "const": "copied"
              },
              {
                "const": "changed"
              },
              {
                "const": "unchanged"
              }
            ],
            "title": "status of file in this commit"
          },
          "additions": {
            "type": "integer",
            "title": "additions"
          },
          "deletions": {
            "type": "integer",
            "title": "deletions"
          },
          "changes": {
            "type": "integer",
            "title": "changes"
          },
          "blob_url": {
            "type": "string",
            "format": "iri",
            "title": "blob_url\n\nThis is the path through which you can view the file through the github website."
          },
          "raw_url": {
            "type": "string",
            "format": "iri",
            "title": "raw_url\n\nThe API path through which the contents of the file can be viewed."
          },
          "patch": {
            "type": "string",
            "title": "patch",
            "description": "It means how much it has changed compared to previous commitments.\nIt gives you a text form to see what code has actually changed."
          }
        },
        "required": [
          "sha",
          "filename",
          "status",
          "additions",
          "deletions",
          "changes",
          "blob_url",
          "raw_url"
        ]
      },
      "IGithub.IReadPullRequestFileInput": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "title": "owner's name",
            "description": "The owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository.\nSo the owner here is the nickname of the repository owner, not the name of the person committing or the author."
          },
          "repo": {
            "type": "string",
            "title": "repository name\n\nThe owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository."
          },
          "pull_number": {
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1,
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/repositories/get-pull-requests",
                  "jmesPath": "pullRequests[].{value:number, label:title}"
                }
              },
              {
                "type": "integer",
                "minimum": 1,
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/repositories/pull-requests",
                  "jmesPath": "pullRequests[].{value:number, label:number}"
                }
              }
            ],
            "title": "pull request number to update"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "x-wrtn-secret-scopes": [
              "repo"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          },
          "page": {
            "type": "integer",
            "default": 1,
            "title": "page",
            "description": "The page number of the results to fetch."
          },
          "per_page": {
            "type": "integer",
            "default": 30,
            "maximum": 100,
            "title": "per_page",
            "description": "The number of results per page (max 100)."
          }
        },
        "required": [
          "owner",
          "repo",
          "pull_number",
          "secretKey"
        ]
      },
      "IGithub.IReadPullRequestCommitOutput": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StrictOmitIGithub.Commitsha"
            },
            "title": "commit list of this pull request"
          },
          "nextPage": {
            "type": "boolean",
            "title": "true if there is a next page",
            "description": "However, since true and false are judged by comparing the number of requested objects with the number of searched objects,\neven if true, the next page may be empty."
          },
          "after": {
            "type": "string",
            "title": "after\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the next page."
          },
          "before": {
            "type": "string",
            "title": "before\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the previous page."
          },
          "prev": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "prev",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the previous page."
          },
          "next": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "next",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the next page."
          },
          "last": {
            "type": "number",
            "title": "last",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the last page."
          },
          "first": {
            "type": "number",
            "title": "first",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the first page."
          }
        },
        "required": [
          "result",
          "nextPage"
        ]
      },
      "StrictOmitIGithub.Commitsha": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "title": "commit message"
          },
          "url": {
            "type": "string",
            "format": "iri",
            "title": "uri\n\nuri to look up details of commitment"
          },
          "author": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "title": "name"
              },
              "email": {
                "type": "string",
                "title": "email"
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "title": "date"
              }
            },
            "required": [
              "name",
              "email",
              "date"
            ],
            "title": "author"
          },
          "committer": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "title": "name"
              },
              "email": {
                "type": "string",
                "title": "email"
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "title": "date"
              }
            },
            "required": [
              "name",
              "email",
              "date"
            ],
            "title": "committer"
          },
          "tree": {
            "type": "object",
            "properties": {
              "sha": {
                "type": "string",
                "title": "sha"
              },
              "url": {
                "type": "string",
                "format": "iri",
                "title": "url"
              }
            },
            "required": [
              "sha",
              "url"
            ],
            "title": "tree"
          },
          "comment_count": {
            "type": "integer",
            "title": "comment_count"
          }
        },
        "required": [
          "message",
          "url",
          "author",
          "committer",
          "tree",
          "comment_count"
        ]
      },
      "IGithub.IReadPullRequestCommitInput": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "title": "owner's name",
            "description": "The owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository.\nSo the owner here is the nickname of the repository owner, not the name of the person committing or the author."
          },
          "repo": {
            "type": "string",
            "title": "repository name\n\nThe owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository."
          },
          "pull_number": {
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1,
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/repositories/get-pull-requests",
                  "jmesPath": "pullRequests[].{value:number, label:title}"
                }
              },
              {
                "type": "integer",
                "minimum": 1,
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/repositories/pull-requests",
                  "jmesPath": "pullRequests[].{value:number, label:number}"
                }
              }
            ],
            "title": "pull request number to update"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "x-wrtn-secret-scopes": [
              "repo"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          },
          "page": {
            "type": "integer",
            "default": 1,
            "title": "page",
            "description": "The page number of the results to fetch."
          },
          "per_page": {
            "type": "integer",
            "default": 30,
            "maximum": 100,
            "title": "per_page",
            "description": "The number of results per page (max 100)."
          }
        },
        "required": [
          "owner",
          "repo",
          "pull_number",
          "secretKey"
        ]
      },
      "IGithub.PullRequest": {
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "title": "number of this pull request"
          },
          "milestone": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IGithub.MileStone"
              }
            ],
            "title": "milestone"
          },
          "head": {
            "type": "object",
            "properties": {
              "label": {
                "type": "string",
                "title": "label"
              },
              "ref": {
                "type": "string",
                "title": "ref"
              },
              "sha": {
                "type": "string",
                "title": "sha"
              },
              "user": {
                "$ref": "#/components/schemas/MyPickIGithub.Usertypeidlogin",
                "title": "user"
              },
              "repo": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/components/schemas/MyPickIGithub.Repositoryfull_name"
                  }
                ],
                "title": "repo"
              }
            },
            "required": [
              "label",
              "ref",
              "sha",
              "user",
              "repo"
            ],
            "title": "head branch info"
          },
          "base": {
            "type": "object",
            "properties": {
              "label": {
                "type": "string",
                "title": "label"
              },
              "ref": {
                "type": "string",
                "title": "ref"
              },
              "sha": {
                "type": "string",
                "title": "sha"
              },
              "user": {
                "$ref": "#/components/schemas/MyPickIGithub.Usertypeidlogin",
                "title": "user"
              },
              "repo": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/components/schemas/MyPickIGithub.Repositoryfull_name"
                  }
                ],
                "title": "repo"
              }
            },
            "required": [
              "label",
              "ref",
              "sha",
              "user",
              "repo"
            ],
            "title": "base branch info"
          },
          "author_association": {
            "oneOf": [
              {
                "const": "COLLABORATOR"
              },
              {
                "const": "CONTRIBUTOR"
              },
              {
                "const": "FIRST_TIMER"
              },
              {
                "const": "FIRST_TIME_CONTRIBUTOR"
              },
              {
                "const": "MANNEQUIN"
              },
              {
                "const": "MEMBER"
              },
              {
                "const": "NONE"
              },
              {
                "const": "OWNER"
              }
            ],
            "title": "author_association"
          },
          "draft": {
            "type": "boolean",
            "title": "draft\n\nIndicates whether or not the pull request is a draft."
          },
          "requested_reviewers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MyPickIGithub.Usertypeidlogin"
            },
            "title": "requested_reviewers"
          },
          "requested_teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartialIGithub.Team"
            },
            "title": "requested_teams"
          },
          "auto_merge": {
            "title": "auto_merge"
          },
          "merged": {
            "type": "boolean",
            "title": "merged"
          },
          "mergeable": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "boolean"
              }
            ],
            "title": "mergeable"
          },
          "rebaseable": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "boolean"
              }
            ],
            "title": "rebaseable"
          },
          "mergeable_state": {
            "type": "string",
            "title": "mergeable_state"
          },
          "merged_by": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MyPickIGithub.Usertypeidlogin"
              }
            ],
            "title": "merged_by"
          },
          "maintainer_can_modify": {
            "type": "boolean",
            "title": "maintainer_can_modify"
          },
          "comments": {
            "type": "integer",
            "minimum": 0,
            "title": "comments"
          },
          "review_comments": {
            "type": "integer",
            "minimum": 0,
            "title": "review_comments"
          },
          "commits": {
            "type": "integer",
            "minimum": 0,
            "title": "commits"
          },
          "additions": {
            "type": "integer",
            "minimum": 0,
            "title": "additions"
          },
          "deletions": {
            "type": "integer",
            "minimum": 0,
            "title": "deletions"
          },
          "changed_files": {
            "type": "integer",
            "minimum": 0,
            "title": "changed_files"
          },
          "locked": {
            "type": "boolean",
            "title": "locked"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "created_at"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "updated_at"
          },
          "closed_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "closed_at"
          },
          "merged_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "merged_at"
          },
          "id": {
            "type": "integer",
            "title": "issue id"
          },
          "html_url": {
            "type": "string",
            "format": "iri",
            "title": "html_url",
            "description": "If you want to see the issue or pull_request on the web, you can go to this link.\nIf pull is included on this link path, it is pull_request, and if issue is included, it is issue.\nIn essence, pull_request and issue are numbered together from the beginning, so while this connector does not distinguish the two, it can be distinguished by the url path."
          },
          "state": {
            "type": "string",
            "title": "state\n\nState of the issue; either 'open' or 'closed'"
          },
          "state_reason": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "const": "completed"
              },
              {
                "const": "reopened"
              },
              {
                "const": "not_planned"
              }
            ],
            "title": "state_reason",
            "description": "The reason for the current state"
          },
          "title": {
            "type": "string",
            "title": "title",
            "description": "title of the issue"
          },
          "user": {
            "$ref": "#/components/schemas/MyPickIGithub.Usertypeidlogin",
            "title": "user"
          },
          "body": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "body",
            "description": "Contents of the issue\n\nYou can also render this content because it is in a markdown format."
          },
          "labels": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "title": "id"
                    },
                    "url": {
                      "type": "string",
                      "format": "iri",
                      "title": "url"
                    },
                    "name": {
                      "type": "string",
                      "title": "name"
                    },
                    "description": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "title": "description"
                    },
                    "color": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "title": "color"
                    },
                    "default": {
                      "type": "boolean",
                      "title": "default"
                    }
                  }
                }
              ]
            },
            "title": "labels\n\nLabels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository"
          },
          "assignee": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MyPickIGithub.Userlogin"
              }
            ],
            "title": "assignee"
          },
          "assignees": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MyPickIGithub.Userlogin"
                }
              }
            ],
            "title": "assignees\n\nIf there are many people in charge, you can be included in the array."
          }
        },
        "required": [
          "number",
          "milestone",
          "head",
          "base",
          "author_association",
          "requested_reviewers",
          "requested_teams",
          "auto_merge",
          "mergeable",
          "rebaseable",
          "mergeable_state",
          "merged_by",
          "maintainer_can_modify",
          "comments",
          "review_comments",
          "commits",
          "additions",
          "deletions",
          "changed_files",
          "locked",
          "created_at",
          "updated_at",
          "closed_at",
          "merged_at",
          "id",
          "html_url",
          "state",
          "title",
          "user",
          "labels",
          "assignee"
        ]
      },
      "IGithub.MileStone": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "title": "id"
          },
          "number": {
            "type": "number",
            "title": "number"
          },
          "state": {
            "oneOf": [
              {
                "const": "closed"
              },
              {
                "const": "open"
              }
            ],
            "title": "state"
          },
          "title": {
            "type": "string",
            "title": "title"
          },
          "description": {
            "type": "string",
            "title": "description"
          },
          "creator": {
            "$ref": "#/components/schemas/MyPickIGithub.Usertypeidlogin",
            "title": "creator"
          },
          "open_issues": {
            "type": "integer",
            "minimum": 0,
            "title": "open_issues"
          },
          "closed_issues": {
            "type": "integer",
            "minimum": 0,
            "title": "closed_issues"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "created_at"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "updated_at"
          },
          "closed_at": {
            "type": "string",
            "format": "date-time",
            "title": "closed_at"
          },
          "due_on": {
            "type": "string",
            "format": "date-time",
            "title": "due_on"
          }
        },
        "required": [
          "id",
          "number",
          "state",
          "title",
          "description",
          "creator",
          "open_issues",
          "closed_issues",
          "created_at",
          "updated_at",
          "closed_at",
          "due_on"
        ]
      },
      "MyPickIGithub.Repositoryfull_name": {
        "type": "object",
        "properties": {
          "full_name": {
            "type": "string",
            "title": "full_name\n\nThis is in the form '{username}/{reponame}'."
          }
        },
        "required": [
          "full_name"
        ]
      },
      "PartialIGithub.Team": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "title": "id"
          },
          "name": {
            "type": "string",
            "title": "name"
          },
          "slug": {
            "type": "string",
            "title": "slug"
          },
          "description": {
            "type": "string",
            "title": "description"
          },
          "privacy": {
            "oneOf": [
              {
                "const": "closed"
              },
              {
                "const": "open"
              }
            ],
            "title": "privacy"
          },
          "notification_setting": {
            "type": "string",
            "title": "notification_setting"
          },
          "permission": {
            "type": "string",
            "title": "permission"
          }
        },
        "description": "Make all properties in T optional"
      },
      "IGithub.IFetchRepositoryPullRequestOutput": {
        "type": "object",
        "properties": {
          "pullRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IGithub.FetchedPullRequest"
            },
            "title": "Pull Requests"
          },
          "pageInfo": {
            "type": "object",
            "properties": {
              "endCursor": {
                "type": "string",
                "title": "Cursor to be used to look up the next page"
              },
              "hasNextPage": {
                "type": "boolean",
                "title": "hasNextPage\n\ntrue if there is a next page"
              }
            },
            "required": [
              "hasNextPage"
            ],
            "title": "page info"
          }
        },
        "required": [
          "pullRequests",
          "pageInfo"
        ]
      },
      "IGithub.FetchedPullRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "issue id"
          },
          "state": {
            "oneOf": [
              {
                "const": "OPEN",
                "title": "OPEN"
              },
              {
                "const": "CLOSED",
                "title": "CLOSED"
              },
              {
                "const": "MERGED",
                "title": "MERGED"
              }
            ],
            "title": "issue state"
          },
          "number": {
            "type": "integer",
            "title": "number of pull request"
          },
          "title": {
            "type": "string",
            "title": "Pull request title"
          },
          "comments": {
            "type": "object",
            "properties": {
              "totalCount": {
                "type": "number",
                "minimum": 0,
                "title": "total count of comments"
              }
            },
            "required": [
              "totalCount"
            ],
            "title": "comments"
          },
          "reviews": {
            "type": "object",
            "properties": {
              "totalCount": {
                "type": "number",
                "minimum": 0,
                "title": "total counr of reviews"
              }
            },
            "required": [
              "totalCount"
            ],
            "title": "reviews"
          },
          "reactions": {
            "type": "object",
            "properties": {
              "totalCount": {
                "type": "number",
                "minimum": 0,
                "title": "total count of reactions"
              }
            },
            "required": [
              "totalCount"
            ],
            "title": "reactions"
          },
          "labels": {
            "type": "object",
            "properties": {
              "nodes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MyPickIGithub.Labeldescriptionname"
                }
              }
            },
            "required": [
              "nodes"
            ],
            "title": "labels"
          },
          "assignees": {
            "type": "object",
            "properties": {
              "nodes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MyPickIGithub.Userlogin"
                },
                "title": "nodes"
              }
            },
            "required": [
              "nodes"
            ],
            "title": "assignees"
          },
          "author": {
            "$ref": "#/components/schemas/MyPickIGithub.Userlogin",
            "title": "author"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "title": "createdAt"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "title": "updatedAt"
          }
        },
        "required": [
          "id",
          "number",
          "title",
          "comments",
          "reviews",
          "reactions",
          "labels",
          "assignees",
          "author",
          "createdAt",
          "updatedAt"
        ]
      },
      "MyPickIGithub.Labeldescriptionname": {
        "type": "object",
        "properties": {
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "description"
          },
          "name": {
            "type": "string",
            "title": "label name"
          }
        },
        "required": [
          "description",
          "name"
        ]
      },
      "IGithub.IFetchRepositoryPullRequestInput": {
        "type": "object",
        "properties": {
          "sort": {
            "oneOf": [
              {
                "const": "CREATED_AT",
                "title": "CREATED_AT"
              },
              {
                "const": "UPDATED_AT",
                "title": "UPDATED_AT"
              }
            ],
            "title": "sort\nIt must be one of: \"CREATED_AT\", \"UPDATED_AT\"."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "title": "Select authentication information",
            "description": "secret key."
          },
          "owner": {
            "type": "string",
            "title": "owner's name",
            "description": "The owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository.\nSo the owner here is the nickname of the repository owner, not the name of the person committing or the author."
          },
          "per_page": {
            "type": "integer",
            "default": 30,
            "maximum": 100,
            "title": "per_page",
            "description": "The number of results per page (max 100)."
          },
          "after": {
            "type": "string",
            "title": "after\ncursor of next page"
          },
          "repo": {
            "type": "string",
            "title": "repository name\n\nThe owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository."
          },
          "state": {
            "oneOf": [
              {
                "const": "OPEN",
                "title": "OPEN"
              },
              {
                "const": "CLOSED",
                "title": "CLOSED"
              },
              {
                "const": "MERGED",
                "title": "MERGED"
              }
            ],
            "title": "state",
            "description": "If you don't want to filter, you don't put anything in.\nIt must be one of: \"OPEN\", \"CLOSED\", \"MERGED\"."
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "labels",
            "description": "If you want to filter the issue by label, pass the string.\nIf it is an empty array, it is ignored."
          },
          "direction": {
            "oneOf": [
              {
                "const": "ASC",
                "title": "ASC"
              },
              {
                "const": "DESC",
                "title": "DESC"
              }
            ],
            "title": "direction\nIt must be one of: \"ASC\", \"DESC\"."
          }
        },
        "required": [
          "sort",
          "secretKey",
          "owner",
          "repo",
          "direction"
        ]
      },
      "IGithub.DetailedIssue": {
        "type": "object",
        "properties": {
          "milestone": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IGithub.MileStone"
              }
            ],
            "title": "milestone"
          },
          "reactions": {
            "type": "object",
            "properties": {
              "total_count": {
                "type": "integer",
                "title": "total_count"
              },
              "+1": {
                "type": "integer",
                "title": "\"+1\""
              },
              "-1": {
                "type": "integer",
                "title": "\"-1\""
              },
              "laugh": {
                "type": "integer",
                "title": "laugh"
              },
              "hooray": {
                "type": "integer",
                "title": "hooray"
              },
              "confused": {
                "type": "integer",
                "title": "confused"
              },
              "heart": {
                "type": "integer",
                "title": "heart"
              },
              "rocket": {
                "type": "integer",
                "title": "rocket"
              },
              "eyes": {
                "type": "integer",
                "title": "eyes"
              }
            },
            "required": [
              "total_count",
              "+1",
              "-1",
              "laugh",
              "hooray",
              "confused",
              "heart",
              "rocket",
              "eyes"
            ],
            "title": "reactions"
          },
          "closed_by": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MyPickIGithub.Usertypeidlogin"
              }
            ],
            "title": "closed_by"
          },
          "id": {
            "type": "integer",
            "title": "issue id"
          },
          "html_url": {
            "type": "string",
            "format": "iri",
            "title": "html_url",
            "description": "If you want to see the issue or pull_request on the web, you can go to this link.\nIf pull is included on this link path, it is pull_request, and if issue is included, it is issue.\nIn essence, pull_request and issue are numbered together from the beginning, so while this connector does not distinguish the two, it can be distinguished by the url path."
          },
          "number": {
            "type": "integer",
            "title": "issue number\n\nNumber uniquely identifying the issue within its repository"
          },
          "state": {
            "type": "string",
            "title": "state\n\nState of the issue; either 'open' or 'closed'"
          },
          "state_reason": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "const": "completed"
              },
              {
                "const": "reopened"
              },
              {
                "const": "not_planned"
              }
            ],
            "title": "state_reason",
            "description": "The reason for the current state"
          },
          "title": {
            "type": "string",
            "title": "title",
            "description": "title of the issue"
          },
          "user": {
            "$ref": "#/components/schemas/MyPickIGithub.Usertypeidlogin",
            "title": "user"
          },
          "body": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "body",
            "description": "Contents of the issue\n\nYou can also render this content because it is in a markdown format."
          },
          "labels": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "title": "id"
                    },
                    "url": {
                      "type": "string",
                      "format": "iri",
                      "title": "url"
                    },
                    "name": {
                      "type": "string",
                      "title": "name"
                    },
                    "description": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "title": "description"
                    },
                    "color": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "title": "color"
                    },
                    "default": {
                      "type": "boolean",
                      "title": "default"
                    }
                  }
                }
              ]
            },
            "title": "labels\n\nLabels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository"
          },
          "assignee": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MyPickIGithub.Userlogin"
              }
            ],
            "title": "assignee"
          },
          "assignees": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MyPickIGithub.Userlogin"
                }
              }
            ],
            "title": "assignees\n\nIf there are many people in charge, you can be included in the array."
          }
        },
        "required": [
          "milestone",
          "reactions",
          "id",
          "html_url",
          "number",
          "state",
          "title",
          "user",
          "labels",
          "assignee"
        ]
      },
      "IGithub.IGetIssueDetailInput": {
        "type": "object",
        "properties": {
          "issue_number": {
            "type": "integer",
            "x-wrtn-prerequisite": {
              "method": "post",
              "path": "/connector/github/repositories/get-issues",
              "jmesPath": "fetchedIssues[].{value:number, label:title}"
            },
            "title": "issue number to get detailed info"
          },
          "owner": {
            "type": "string",
            "title": "owner's name",
            "description": "The owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository.\nSo the owner here is the nickname of the repository owner, not the name of the person committing or the author."
          },
          "repo": {
            "type": "string",
            "title": "repository name\n\nThe owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "issue_number",
          "owner",
          "repo",
          "secretKey"
        ]
      },
      "IGithub.IGetIssueCommentsInput": {
        "type": "object",
        "properties": {
          "issue_number": {
            "type": "integer",
            "x-wrtn-prerequisite": {
              "method": "post",
              "path": "/connector/github/repositories/get-issues",
              "jmesPath": "fetchedIssues[].{value:number, label:title}"
            },
            "title": "issue number to get detailed info"
          },
          "owner": {
            "type": "string",
            "title": "owner's name",
            "description": "The owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository.\nSo the owner here is the nickname of the repository owner, not the name of the person committing or the author."
          },
          "repo": {
            "type": "string",
            "title": "repository name\n\nThe owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "title": "Select authentication information",
            "description": "secret key."
          },
          "page": {
            "type": "integer",
            "default": 1,
            "title": "page",
            "description": "The page number of the results to fetch."
          },
          "per_page": {
            "type": "integer",
            "default": 30,
            "maximum": 100,
            "title": "per_page",
            "description": "The number of results per page (max 100)."
          }
        },
        "required": [
          "issue_number",
          "owner",
          "repo",
          "secretKey"
        ]
      },
      "IGithub.IFetchRepositoryOutput": {
        "type": "object",
        "properties": {
          "fetchedIssues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StrictOmitIGithub.FetchedIssuebody"
            },
            "title": "issues"
          },
          "pageInfo": {
            "type": "object",
            "properties": {
              "endCursor": {
                "type": "string",
                "title": "Cursor to be used to look up the next page"
              },
              "hasNextPage": {
                "type": "boolean",
                "title": "hasNextPage\n\ntrue if there is a next page"
              }
            },
            "required": [
              "hasNextPage"
            ],
            "title": "page info"
          }
        },
        "required": [
          "fetchedIssues",
          "pageInfo"
        ]
      },
      "StrictOmitIGithub.FetchedIssuebody": {
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "title": "issue number\n\nNumber uniquely identifying the issue within its repository"
          },
          "title": {
            "type": "string",
            "title": "issue title"
          },
          "id": {
            "type": "string",
            "title": "issue id"
          },
          "comments": {
            "type": "object",
            "properties": {
              "totalCount": {
                "type": "number",
                "minimum": 0,
                "title": "total count of comments"
              }
            },
            "required": [
              "totalCount"
            ],
            "title": "comments"
          },
          "author": {
            "$ref": "#/components/schemas/MyPickIGithub.Userlogin",
            "title": "author"
          },
          "state": {
            "oneOf": [
              {
                "const": "OPEN",
                "title": "OPEN"
              },
              {
                "const": "CLOSED",
                "title": "CLOSED"
              },
              {
                "const": "MERGED",
                "title": "MERGED"
              }
            ],
            "title": "issue state"
          },
          "labels": {
            "type": "object",
            "properties": {
              "nodes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MyPickIGithub.Labeldescriptionname"
                },
                "title": "nodes"
              }
            },
            "required": [
              "nodes"
            ],
            "title": "labels"
          },
          "stateReason": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "reason of state"
          },
          "reactions": {
            "type": "object",
            "properties": {
              "totalCount": {
                "type": "number",
                "minimum": 0,
                "title": "total count of reactions"
              }
            },
            "required": [
              "totalCount"
            ],
            "title": "reactions"
          },
          "assignees": {
            "type": "object",
            "properties": {
              "nodes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MyPickIGithub.Userlogin"
                },
                "title": "nodes"
              }
            },
            "required": [
              "nodes"
            ],
            "title": "assignees"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "title": "createdAt"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "title": "updatedAt"
          }
        },
        "required": [
          "number",
          "title",
          "id",
          "comments",
          "author",
          "labels",
          "reactions",
          "assignees",
          "createdAt",
          "updatedAt"
        ]
      },
      "IGithub.IFetchRepositoryInput": {
        "type": "object",
        "properties": {
          "after": {
            "type": "string",
            "title": "after\ncursor of next page"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "labels",
            "description": "If you want to filter the issue by label, pass the string.\nIf it is an empty array, it is ignored."
          },
          "per_page": {
            "type": "integer",
            "default": 30,
            "maximum": 100,
            "title": "per_page",
            "description": "The number of results per page (max 100)."
          },
          "state": {
            "oneOf": [
              {
                "const": "OPEN",
                "title": "OPEN"
              },
              {
                "const": "CLOSED",
                "title": "CLOSED"
              },
              {
                "const": "MERGED",
                "title": "MERGED"
              }
            ],
            "title": "state",
            "description": "If you don't want to filter, you don't put anything in.\nIt must be one of: \"OPEN\", \"CLOSED\", \"MERGED\"."
          },
          "direction": {
            "oneOf": [
              {
                "const": "ASC",
                "title": "ASC"
              },
              {
                "const": "DESC",
                "title": "DESC"
              }
            ],
            "title": "direction\nIt must be one of: \"ASC\", \"DESC\"."
          },
          "sort": {
            "oneOf": [
              {
                "const": "CREATED_AT",
                "title": "CREATED_AT"
              },
              {
                "const": "UPDATED_AT",
                "title": "UPDATED_AT"
              },
              {
                "const": "COMMENTS",
                "title": "COMMENTS"
              }
            ],
            "title": "condition of direction\nIt must be one of: \"CREATED_AT\", \"UPDATED_AT\", \"COMMENTS\"."
          },
          "owner": {
            "type": "string",
            "title": "owner's name",
            "description": "The owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository.\nSo the owner here is the nickname of the repository owner, not the name of the person committing or the author."
          },
          "repo": {
            "type": "string",
            "title": "repository name\n\nThe owner's name and the repository's name can be combined to form '${owner}/${repo}' and can be a unique path name for a single repository."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "direction",
          "sort",
          "owner",
          "repo",
          "secretKey"
        ]
      },
      "IGithub.ISearchUserOutput": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IGithub.User"
            },
            "title": "User Search Result Item\n\nUser Search Result Item"
          },
          "nextPage": {
            "type": "boolean",
            "title": "true if there is a next page",
            "description": "However, since true and false are judged by comparing the number of requested objects with the number of searched objects,\neven if true, the next page may be empty."
          },
          "after": {
            "type": "string",
            "title": "after\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the next page."
          },
          "before": {
            "type": "string",
            "title": "before\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the previous page."
          },
          "prev": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "prev",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the previous page."
          },
          "next": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "next",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the next page."
          },
          "last": {
            "type": "number",
            "title": "last",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the last page."
          },
          "first": {
            "type": "number",
            "title": "first",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the first page."
          }
        },
        "required": [
          "result",
          "nextPage"
        ]
      },
      "IGithub.User": {
        "type": "object",
        "properties": {
          "login": {
            "type": "string",
            "title": "login",
            "description": "This means the user's nickname.\nIn github, nicknames are unique at least until that user changes their own nickname.\nThis means that only one person can own the nickname at a time.\nTherefore, it may be important to know the exact nickname because the github API calls the appi using the user's nickname."
          },
          "id": {
            "type": "number",
            "title": "id\n\nThis means the user's ID."
          },
          "avatar_url": {
            "type": "string",
            "format": "iri",
            "title": "avatar url\n\nThis means the user's profile image."
          },
          "html_url": {
            "type": "string",
            "format": "iri",
            "title": "html_url\n\nIf you want to look up your profile, you can access this website."
          },
          "type": {
            "oneOf": [
              {
                "const": "User"
              },
              {
                "const": "Bot"
              },
              {
                "const": "Organization"
              }
            ],
            "title": "type"
          },
          "score": {
            "type": "number",
            "title": "score"
          }
        },
        "required": [
          "login",
          "id",
          "avatar_url",
          "html_url",
          "type",
          "score"
        ]
      },
      "IGithub.ISearchUserInput": {
        "type": "object",
        "properties": {
          "q": {
            "type": "string",
            "title": "keyword",
            "description": "The query contains one or more search keywords and qualifiers.\nQualifiers allow you to limit your search to specific areas of GitHub.\nThe REST API supports the same qualifiers as the web interface for GitHub."
          },
          "sort": {
            "oneOf": [
              {
                "const": "followers"
              },
              {
                "const": "repositories"
              },
              {
                "const": "joined"
              }
            ],
            "title": "sorting condition",
            "description": "Sorts the results of your query by number of followers or repositories, or when the person joined GitHub. Default: best match\nIt must be one of this: \"followers\" | \"repositories\" | \"joined\""
          },
          "per_page": {
            "type": "integer",
            "default": 30,
            "maximum": 100,
            "title": "per_page",
            "description": "The number of results per page (max 100)."
          },
          "page": {
            "type": "integer",
            "default": 1,
            "title": "page",
            "description": "The page number of the results to fetch."
          },
          "order": {
            "oneOf": [
              {
                "const": "desc",
                "default": "desc"
              },
              {
                "const": "asc",
                "default": "desc"
              }
            ],
            "title": "order",
            "description": "Determines whether the first search result returned is the highest number of matches (desc) or lowest number of matches (asc).\nThis parameter is ignored unless you provide sort."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "q",
          "secretKey"
        ]
      },
      "IGithub.IGetUserProfileOutput": {
        "type": "object",
        "properties": {
          "name": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "name\nIt means the actual name that the user has written, not the user's nickname."
          },
          "company": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "comany name",
            "description": "As the name of the company,\nit cannot be said to be the exact name listed as the business operator because it was written by the user himself.\nAlso, we cannot guarantee that the user wrote the company name.\nSometimes the user jokingly writes down strange names."
          },
          "blog": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "blog\n\nIndicates the blog address."
          },
          "location": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "location",
            "description": "It means the location of the user.\nUsually, I write the country down, but the user can jokingly record the strange location."
          },
          "email": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "email address"
          },
          "bio": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "bio\n\nWrite down what the user wants to say or a history."
          },
          "twitter_username": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "twitter_username"
          },
          "public_repos": {
            "type": "integer",
            "title": "count of public repos"
          },
          "public_gists": {
            "type": "integer",
            "title": "count of public gists"
          },
          "followers": {
            "type": "integer",
            "title": "count of followers"
          },
          "following": {
            "type": "integer",
            "title": "count of follwing"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "created_at"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "updated_at"
          },
          "profile_repository": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/RepositoryreadmeIGetReadmeFileContentOutput"
              }
            ],
            "title": "profile_repo"
          },
          "pinned_repositories": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "pinned_repositories\nIt is a repository where the user puts a pin on his profile, which is usually used to display his or her proud history."
          },
          "type": {
            "oneOf": [
              {
                "const": "User"
              },
              {
                "const": "Bot"
              },
              {
                "const": "Organization"
              }
            ],
            "title": "type"
          },
          "id": {
            "type": "number",
            "title": "id\n\nThis means the user's ID."
          },
          "login": {
            "type": "string",
            "title": "login",
            "description": "This means the user's nickname.\nIn github, nicknames are unique at least until that user changes their own nickname.\nThis means that only one person can own the nickname at a time.\nTherefore, it may be important to know the exact nickname because the github API calls the appi using the user's nickname."
          },
          "avatar_url": {
            "type": "string",
            "format": "iri",
            "title": "avatar url\n\nThis means the user's profile image."
          }
        },
        "required": [
          "public_repos",
          "public_gists",
          "followers",
          "following",
          "created_at",
          "updated_at",
          "profile_repository",
          "pinned_repositories",
          "type",
          "id",
          "login",
          "avatar_url"
        ]
      },
      "RepositoryreadmeIGetReadmeFileContentOutput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "title": "id"
          },
          "name": {
            "type": "string",
            "title": "name"
          },
          "full_name": {
            "type": "string",
            "title": "full_name\n\nThis is in the form '{username}/{reponame}'."
          },
          "private": {
            "type": "boolean",
            "title": "private"
          },
          "html_url": {
            "type": "string",
            "format": "iri",
            "title": "html_url"
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "description"
          },
          "fork": {
            "type": "boolean",
            "title": "fork"
          },
          "forks_count": {
            "type": "integer",
            "title": "forks_count"
          },
          "stargazers_count": {
            "type": "integer",
            "title": "stargazers_count"
          },
          "watchers_count": {
            "type": "integer",
            "title": "watchers_count"
          },
          "size": {
            "type": "number",
            "title": "size"
          },
          "default_branch": {
            "type": "string",
            "title": "default_branch"
          },
          "open_issues_count": {
            "type": "integer",
            "title": "open_issues_count"
          },
          "is_template": {
            "type": "boolean",
            "title": "is_template"
          },
          "topics": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "topics"
          },
          "has_issues": {
            "type": "boolean",
            "title": "has_issues"
          },
          "has_projects": {
            "type": "boolean",
            "title": "has_projects"
          },
          "has_wiki": {
            "type": "boolean",
            "title": "has_wiki"
          },
          "has_pages": {
            "type": "boolean",
            "title": "has_pages"
          },
          "has_downloads": {
            "type": "boolean",
            "title": "has_downloads"
          },
          "archived": {
            "type": "boolean",
            "title": "archived"
          },
          "disabled": {
            "type": "boolean",
            "title": "disabled"
          },
          "visibility": {
            "oneOf": [
              {
                "const": "private"
              },
              {
                "const": "public"
              }
            ],
            "title": "visibility"
          },
          "pushed_at": {
            "type": "string",
            "format": "date-time",
            "title": "pushed_at"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "created_at"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "updated_at"
          },
          "permissions": {
            "type": "object",
            "properties": {
              "admin": {
                "type": "boolean",
                "title": "admin"
              },
              "push": {
                "type": "boolean",
                "title": "push"
              },
              "pull": {
                "type": "boolean",
                "title": "pull"
              }
            },
            "required": [
              "admin",
              "push",
              "pull"
            ],
            "title": "permissions"
          },
          "allow_rebase_merge": {
            "type": "boolean",
            "title": "allow_rebase_merge"
          },
          "allow_squash_merge": {
            "type": "boolean",
            "title": "allow_squash_merge"
          },
          "allow_auto_merge": {
            "type": "boolean",
            "title": "allow_auto_merge"
          },
          "delete_branch_on_merge": {
            "type": "boolean",
            "title": "delete_branch_on_merge"
          },
          "allow_merge_commit": {
            "type": "boolean",
            "title": "allow_merge_commit"
          },
          "subscribers_count": {
            "type": "integer",
            "title": "subscribers_count"
          },
          "network_count": {
            "type": "integer",
            "title": "network_count"
          },
          "license": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "x-wrtn-placeholder": "mit",
                    "title": "key"
                  },
                  "name": {
                    "type": "string",
                    "x-wrtn-placeholder": "MIT License",
                    "title": "name"
                  },
                  "url": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "string",
                        "x-wrtn-placeholder": "https://api.github.com/licenses/mit"
                      }
                    ],
                    "title": "url"
                  },
                  "spdx_id": {
                    "type": "string",
                    "x-wrtn-placeholder": "MIT",
                    "title": "spdx_id"
                  }
                },
                "required": [
                  "key",
                  "name",
                  "url",
                  "spdx_id"
                ]
              }
            ],
            "title": "license"
          },
          "forks": {
            "type": "integer",
            "title": "forks"
          },
          "open_issues": {
            "type": "integer",
            "title": "open_issues"
          },
          "watchers": {
            "type": "integer",
            "title": "watchers"
          },
          "readme": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IGithub.RepositoryFile"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "file": "#/components/schemas/IGithub.RepositoryFile"
              }
            }
          }
        },
        "required": [
          "id",
          "name",
          "full_name",
          "private",
          "html_url",
          "description",
          "fork",
          "forks_count",
          "stargazers_count",
          "watchers_count",
          "size",
          "default_branch",
          "open_issues_count",
          "is_template",
          "topics",
          "has_issues",
          "has_projects",
          "has_wiki",
          "has_pages",
          "has_downloads",
          "archived",
          "disabled",
          "visibility",
          "pushed_at",
          "created_at",
          "updated_at",
          "license",
          "forks",
          "open_issues",
          "watchers",
          "readme"
        ]
      },
      "IGithub.IGetUserProfileInput": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "title": "username"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "username",
          "secretKey"
        ]
      },
      "IGithub.IGetAuthenticatedUserOrganizationOutput": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IGithub.Organization"
            },
            "title": "result"
          },
          "nextPage": {
            "type": "boolean",
            "title": "true if there is a next page",
            "description": "However, since true and false are judged by comparing the number of requested objects with the number of searched objects,\neven if true, the next page may be empty."
          },
          "after": {
            "type": "string",
            "title": "after\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the next page."
          },
          "before": {
            "type": "string",
            "title": "before\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the previous page."
          },
          "prev": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "prev",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the previous page."
          },
          "next": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "next",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the next page."
          },
          "last": {
            "type": "number",
            "title": "last",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the last page."
          },
          "first": {
            "type": "number",
            "title": "first",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the first page."
          }
        },
        "required": [
          "result",
          "nextPage"
        ]
      },
      "IGithub.IGetAuthenticatedUserOrganizationInput": {
        "type": "object",
        "properties": {
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "x-wrtn-secret-scopes": [
              "user"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          },
          "page": {
            "type": "integer",
            "default": 1,
            "title": "page",
            "description": "The page number of the results to fetch."
          },
          "per_page": {
            "type": "integer",
            "default": 30,
            "maximum": 100,
            "title": "per_page",
            "description": "The number of results per page (max 100)."
          }
        },
        "required": [
          "secretKey"
        ]
      },
      "IGithub.IGetBranchOutput": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IGithub.Branch"
            },
            "title": "branches"
          },
          "nextPage": {
            "type": "boolean",
            "title": "true if there is a next page",
            "description": "However, since true and false are judged by comparing the number of requested objects with the number of searched objects,\neven if true, the next page may be empty."
          },
          "after": {
            "type": "string",
            "title": "after\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the next page."
          },
          "before": {
            "type": "string",
            "title": "before\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the previous page."
          },
          "prev": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "prev",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the previous page."
          },
          "next": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "next",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the next page."
          },
          "last": {
            "type": "number",
            "title": "last",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the last page."
          },
          "first": {
            "type": "number",
            "title": "first",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the first page."
          }
        },
        "required": [
          "result",
          "nextPage"
        ]
      },
      "IGithub.Branch": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "name of Branch"
          },
          "commit": {
            "$ref": "#/components/schemas/StrictOmitIGithub.Commitsha",
            "title": "commit",
            "description": "In github, branch is just another name for the last node of a commit,\nso this property called commit is logically the same as what it means for that branch."
          }
        },
        "required": [
          "name",
          "commit"
        ]
      },
      "IGithub.IGetBranchInput": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "title": "user's nickname"
          },
          "repo": {
            "type": "string",
            "title": "The name of the repository"
          },
          "page": {
            "type": "integer",
            "default": 1,
            "title": "page",
            "description": "The page number of the results to fetch."
          },
          "per_page": {
            "type": "integer",
            "default": 30,
            "maximum": 100,
            "title": "per_page",
            "description": "The number of results per page (max 100)."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "x-wrtn-secret-scopes": [
              "repo"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "owner",
          "repo",
          "secretKey"
        ]
      },
      "IGithub.ICreateBranchOutput": {
        "type": "object",
        "properties": {
          "ref": {
            "type": "string",
            "x-wrtn-placeholder": "refs/heads/featureA",
            "title": "ref"
          },
          "object": {
            "type": "object",
            "properties": {
              "type": {
                "const": "commit",
                "title": "type"
              },
              "sha": {
                "type": "string",
                "title": "sha"
              }
            },
            "required": [
              "type",
              "sha"
            ],
            "title": "object"
          }
        },
        "required": [
          "ref",
          "object"
        ]
      },
      "IGithub.ICreateBranchInput": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "title": "user's nickname"
          },
          "repo": {
            "type": "string",
            "title": "The name of the repository"
          },
          "ref": {
            "type": "string",
            "title": "ref\nThe name of the fully qualified reference (ie: refs/heads/master). If it doesn't start with 'refs' and have at least two slashes, it will be rejected."
          },
          "sha": {
            "type": "string",
            "x-wrtn-prerequisite": {
              "method": "post",
              "path": "/connector/github/get-commit-list",
              "jmesPath": "result[].{value:sha, label: commit.message}"
            },
            "title": "sha\nThe SHA1 value for this reference."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "x-wrtn-secret-scopes": [
              "repo"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "owner",
          "repo",
          "ref",
          "sha",
          "secretKey"
        ]
      },
      "StrictOmitIGithub.PullRequestcommentsmaintainer_can_modifymergeablerebaseablemergeable_statemerged_byreview_commentscommitsadditionsdeletionschanged_files": {
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "title": "number of this pull request"
          },
          "title": {
            "type": "string",
            "title": "title",
            "description": "title of the issue"
          },
          "base": {
            "type": "object",
            "properties": {
              "label": {
                "type": "string",
                "title": "label"
              },
              "ref": {
                "type": "string",
                "title": "ref"
              },
              "sha": {
                "type": "string",
                "title": "sha"
              },
              "user": {
                "$ref": "#/components/schemas/MyPickIGithub.Usertypeidlogin",
                "title": "user"
              },
              "repo": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/components/schemas/MyPickIGithub.Repositoryfull_name"
                  }
                ],
                "title": "repo"
              }
            },
            "required": [
              "label",
              "ref",
              "sha",
              "user",
              "repo"
            ],
            "title": "base branch info"
          },
          "head": {
            "type": "object",
            "properties": {
              "label": {
                "type": "string",
                "title": "label"
              },
              "ref": {
                "type": "string",
                "title": "ref"
              },
              "sha": {
                "type": "string",
                "title": "sha"
              },
              "user": {
                "$ref": "#/components/schemas/MyPickIGithub.Usertypeidlogin",
                "title": "user"
              },
              "repo": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "$ref": "#/components/schemas/MyPickIGithub.Repositoryfull_name"
                  }
                ],
                "title": "repo"
              }
            },
            "required": [
              "label",
              "ref",
              "sha",
              "user",
              "repo"
            ],
            "title": "head branch info"
          },
          "user": {
            "$ref": "#/components/schemas/MyPickIGithub.Usertypeidlogin",
            "title": "user"
          },
          "id": {
            "type": "integer",
            "title": "issue id"
          },
          "body": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "body",
            "description": "Contents of the issue\n\nYou can also render this content because it is in a markdown format."
          },
          "state": {
            "type": "string",
            "title": "state\n\nState of the issue; either 'open' or 'closed'"
          },
          "labels": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "title": "id"
                    },
                    "url": {
                      "type": "string",
                      "format": "iri",
                      "title": "url"
                    },
                    "name": {
                      "type": "string",
                      "title": "name"
                    },
                    "description": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "title": "description"
                    },
                    "color": {
                      "oneOf": [
                        {
                          "type": "null"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "title": "color"
                    },
                    "default": {
                      "type": "boolean",
                      "title": "default"
                    }
                  }
                }
              ]
            },
            "title": "labels\n\nLabels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository"
          },
          "assignees": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MyPickIGithub.Userlogin"
                }
              }
            ],
            "title": "assignees\n\nIf there are many people in charge, you can be included in the array."
          },
          "html_url": {
            "type": "string",
            "format": "iri",
            "title": "html_url",
            "description": "If you want to see the issue or pull_request on the web, you can go to this link.\nIf pull is included on this link path, it is pull_request, and if issue is included, it is issue.\nIn essence, pull_request and issue are numbered together from the beginning, so while this connector does not distinguish the two, it can be distinguished by the url path."
          },
          "draft": {
            "type": "boolean",
            "title": "draft\n\nIndicates whether or not the pull request is a draft."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "created_at"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "updated_at"
          },
          "milestone": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/IGithub.MileStone"
              }
            ],
            "title": "milestone"
          },
          "author_association": {
            "oneOf": [
              {
                "const": "COLLABORATOR"
              },
              {
                "const": "CONTRIBUTOR"
              },
              {
                "const": "FIRST_TIMER"
              },
              {
                "const": "FIRST_TIME_CONTRIBUTOR"
              },
              {
                "const": "MANNEQUIN"
              },
              {
                "const": "MEMBER"
              },
              {
                "const": "NONE"
              },
              {
                "const": "OWNER"
              }
            ],
            "title": "author_association"
          },
          "requested_reviewers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MyPickIGithub.Usertypeidlogin"
            },
            "title": "requested_reviewers"
          },
          "requested_teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartialIGithub.Team"
            },
            "title": "requested_teams"
          },
          "auto_merge": {
            "title": "auto_merge"
          },
          "merged": {
            "type": "boolean",
            "title": "merged"
          },
          "locked": {
            "type": "boolean",
            "title": "locked"
          },
          "closed_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "closed_at"
          },
          "merged_at": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "title": "merged_at"
          },
          "state_reason": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "const": "completed"
              },
              {
                "const": "reopened"
              },
              {
                "const": "not_planned"
              }
            ],
            "title": "state_reason",
            "description": "The reason for the current state"
          },
          "assignee": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MyPickIGithub.Userlogin"
              }
            ],
            "title": "assignee"
          }
        },
        "required": [
          "number",
          "title",
          "base",
          "head",
          "user",
          "id",
          "state",
          "labels",
          "html_url",
          "created_at",
          "updated_at",
          "milestone",
          "author_association",
          "requested_reviewers",
          "requested_teams",
          "auto_merge",
          "locked",
          "closed_at",
          "merged_at",
          "assignee"
        ]
      },
      "IGithub.IGetPullRequestInput": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "title": "user's nickname"
          },
          "repo": {
            "type": "string",
            "title": "The name of the repository"
          },
          "commit_sha": {
            "type": "string",
            "title": "commit_sha\n\nThe SHA of the commit."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "owner",
          "repo",
          "commit_sha",
          "secretKey"
        ]
      },
      "IGithub.IGetCommitHeadOutput": {
        "type": "object",
        "properties": {
          "sha": {
            "type": "string",
            "title": "sha"
          },
          "commit": {
            "$ref": "#/components/schemas/MyPickIGithub.Commitmessageurlauthorcommittertreecomment_count",
            "title": "commit"
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IGithub.File"
            },
            "title": "files"
          }
        },
        "required": [
          "sha",
          "commit",
          "files"
        ]
      },
      "MyPickIGithub.Commitmessageurlauthorcommittertreecomment_count": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "title": "commit message"
          },
          "url": {
            "type": "string",
            "format": "iri",
            "title": "uri\n\nuri to look up details of commitment"
          },
          "author": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "title": "name"
              },
              "email": {
                "type": "string",
                "title": "email"
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "title": "date"
              }
            },
            "required": [
              "name",
              "email",
              "date"
            ],
            "title": "author"
          },
          "committer": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "title": "name"
              },
              "email": {
                "type": "string",
                "title": "email"
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "title": "date"
              }
            },
            "required": [
              "name",
              "email",
              "date"
            ],
            "title": "committer"
          },
          "tree": {
            "type": "object",
            "properties": {
              "sha": {
                "type": "string",
                "title": "sha"
              },
              "url": {
                "type": "string",
                "format": "iri",
                "title": "url"
              }
            },
            "required": [
              "sha",
              "url"
            ],
            "title": "tree"
          },
          "comment_count": {
            "type": "integer",
            "title": "comment_count"
          }
        },
        "required": [
          "message",
          "url",
          "author",
          "committer",
          "tree",
          "comment_count"
        ]
      },
      "IGithub.IGetCommitHeadInput": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "title": "user's nickname"
          },
          "repo": {
            "type": "string",
            "title": "The name of the repository"
          },
          "commit_sha": {
            "type": "string",
            "x-wrtn-prerequisite": {
              "method": "post",
              "path": "/connector/github/get-commit-list",
              "jmesPath": "result[].{value:sha, label:comment.message}"
            },
            "title": "commit_sha\n\nThe SHA of the commit."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "owner",
          "repo",
          "commit_sha",
          "secretKey"
        ]
      },
      "IGithub.IGetCommitOutput": {
        "type": "object",
        "properties": {
          "sha": {
            "type": "string",
            "title": "hash of this commit"
          },
          "commit": {
            "$ref": "#/components/schemas/StrictOmitIGithub.Commitsha",
            "title": "commit"
          },
          "html_url": {
            "type": "string",
            "format": "iri",
            "title": "html_url"
          },
          "parents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MyPickIGithub.Commitsha"
            },
            "title": "Parents of this commit"
          },
          "stats": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer",
                "title": "sum of additions and deletions"
              },
              "additions": {
                "type": "integer",
                "title": "lines of additions"
              },
              "deletions": {
                "type": "integer",
                "title": "lines of deletions"
              }
            },
            "required": [
              "total",
              "additions",
              "deletions"
            ],
            "title": "stats"
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IGithub.File"
            },
            "title": "files\n\nYou can see the changes for each file."
          }
        },
        "required": [
          "sha",
          "commit",
          "html_url",
          "parents",
          "stats",
          "files"
        ]
      },
      "MyPickIGithub.Commitsha": {
        "type": "object",
        "properties": {
          "sha": {
            "type": "string",
            "title": "hash of this commit"
          }
        },
        "required": [
          "sha"
        ]
      },
      "IGithub.IGetCommitInput": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "title": "user's nickname"
          },
          "repo": {
            "type": "string",
            "title": "The name of the repository"
          },
          "ref": {
            "type": "string",
            "x-wrtn-prerequisite": {
              "method": "post",
              "path": "/connector/github/get-branches",
              "jmesPath": "result[].{value:name, label:name}"
            },
            "title": "commit hash or branch name"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "x-wrtn-secret-scopes": [
              "repo"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "owner",
          "repo",
          "secretKey"
        ]
      },
      "IGithub.IGetCommitListOutput": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "sha": {
                  "type": "string",
                  "title": "sha"
                },
                "commit": {
                  "$ref": "#/components/schemas/MyPickIGithub.Commitmessageurlauthorcommitter",
                  "title": "commit"
                }
              },
              "required": [
                "sha",
                "commit"
              ]
            },
            "title": "commit list"
          },
          "nextPage": {
            "type": "boolean",
            "title": "true if there is a next page",
            "description": "However, since true and false are judged by comparing the number of requested objects with the number of searched objects,\neven if true, the next page may be empty."
          },
          "after": {
            "type": "string",
            "title": "after\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the next page."
          },
          "before": {
            "type": "string",
            "title": "before\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the previous page."
          },
          "prev": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "prev",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the previous page."
          },
          "next": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "next",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the next page."
          },
          "last": {
            "type": "number",
            "title": "last",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the last page."
          },
          "first": {
            "type": "number",
            "title": "first",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the first page."
          }
        },
        "required": [
          "result",
          "nextPage"
        ]
      },
      "MyPickIGithub.Commitmessageurlauthorcommitter": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "title": "commit message"
          },
          "url": {
            "type": "string",
            "format": "iri",
            "title": "uri\n\nuri to look up details of commitment"
          },
          "author": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "title": "name"
              },
              "email": {
                "type": "string",
                "title": "email"
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "title": "date"
              }
            },
            "required": [
              "name",
              "email",
              "date"
            ],
            "title": "author"
          },
          "committer": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "title": "name"
              },
              "email": {
                "type": "string",
                "title": "email"
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "title": "date"
              }
            },
            "required": [
              "name",
              "email",
              "date"
            ],
            "title": "committer"
          }
        },
        "required": [
          "message",
          "url",
          "author",
          "committer"
        ]
      },
      "IGithub.IGetCommitListInput": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "title": "user's nickname"
          },
          "repo": {
            "type": "string",
            "title": "The name of the repository"
          },
          "sha": {
            "type": "string",
            "title": "sha\n\nSHA or branch to start listing commits from. Default: the repository’s default branch (usually main)."
          },
          "path": {
            "type": "string",
            "title": "path\n\nOnly commits containing this file path will be returned."
          },
          "author": {
            "type": "string",
            "title": "author\n\nGitHub username or email address to use to filter by commit author."
          },
          "committer": {
            "type": "string",
            "title": "committer\n\nGitHub username or email address to use to filter by commit committer."
          },
          "since": {
            "type": "string",
            "format": "date-time",
            "title": "since\n\nOnly show results that were last updated after the given time. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Due to limitations of Git, timestamps must be between 1970-01-01 and 2099-12-31 (inclusive) or unexpected results may be returned."
          },
          "until": {
            "type": "string",
            "format": "date-time",
            "title": "until\n\nOnly commits before this date will be returned. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Due to limitations of Git, timestamps must be between 1970-01-01 and 2099-12-31 (inclusive) or unexpected results may be returned."
          },
          "per_page": {
            "type": "integer",
            "default": 30,
            "maximum": 100,
            "title": "per_page",
            "description": "The number of results per page (max 100)."
          },
          "page": {
            "type": "integer",
            "default": 1,
            "title": "page",
            "description": "The page number of the results to fetch."
          },
          "order": {
            "oneOf": [
              {
                "const": "desc",
                "default": "desc"
              },
              {
                "const": "asc",
                "default": "desc"
              }
            ],
            "title": "order",
            "description": "Determines whether the first search result returned is the highest number of matches (desc) or lowest number of matches (asc).\nThis parameter is ignored unless you provide sort."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "x-wrtn-secret-scopes": [
              "repo"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "owner",
          "repo",
          "secretKey"
        ]
      },
      "IGithub.IGetFollowerOutput": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MyPickIGithub.Useridloginhtml_urlavatar_url"
            },
            "title": "followers"
          },
          "nextPage": {
            "type": "boolean",
            "title": "true if there is a next page",
            "description": "However, since true and false are judged by comparing the number of requested objects with the number of searched objects,\neven if true, the next page may be empty."
          },
          "after": {
            "type": "string",
            "title": "after\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the next page."
          },
          "before": {
            "type": "string",
            "title": "before\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the previous page."
          },
          "prev": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "prev",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the previous page."
          },
          "next": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "next",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the next page."
          },
          "last": {
            "type": "number",
            "title": "last",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the last page."
          },
          "first": {
            "type": "number",
            "title": "first",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the first page."
          }
        },
        "required": [
          "result",
          "nextPage"
        ]
      },
      "MyPickIGithub.Useridloginhtml_urlavatar_url": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "title": "id\n\nThis means the user's ID."
          },
          "login": {
            "type": "string",
            "title": "login",
            "description": "This means the user's nickname.\nIn github, nicknames are unique at least until that user changes their own nickname.\nThis means that only one person can own the nickname at a time.\nTherefore, it may be important to know the exact nickname because the github API calls the appi using the user's nickname."
          },
          "html_url": {
            "type": "string",
            "format": "iri",
            "title": "html_url\n\nIf you want to look up your profile, you can access this website."
          },
          "avatar_url": {
            "type": "string",
            "format": "iri",
            "title": "avatar url\n\nThis means the user's profile image."
          }
        },
        "required": [
          "id",
          "login",
          "html_url",
          "avatar_url"
        ]
      },
      "IGithub.IGetFollowerInput": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "title": "user's nickname"
          },
          "per_page": {
            "type": "integer",
            "default": 30,
            "maximum": 100,
            "title": "per_page",
            "description": "The number of results per page (max 100)."
          },
          "page": {
            "type": "integer",
            "default": 1,
            "title": "page",
            "description": "The page number of the results to fetch."
          },
          "order": {
            "oneOf": [
              {
                "const": "desc",
                "default": "desc"
              },
              {
                "const": "asc",
                "default": "desc"
              }
            ],
            "title": "order",
            "description": "Determines whether the first search result returned is the highest number of matches (desc) or lowest number of matches (asc).\nThis parameter is ignored unless you provide sort."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "x-wrtn-secret-scopes": [
              "user"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "username",
          "secretKey"
        ]
      },
      "IGithub.IGetFolloweeOutput": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MyPickIGithub.Useridloginhtml_urlavatar_url"
            },
            "title": "followees"
          },
          "nextPage": {
            "type": "boolean",
            "title": "true if there is a next page",
            "description": "However, since true and false are judged by comparing the number of requested objects with the number of searched objects,\neven if true, the next page may be empty."
          },
          "after": {
            "type": "string",
            "title": "after\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the next page."
          },
          "before": {
            "type": "string",
            "title": "before\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the previous page."
          },
          "prev": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "prev",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the previous page."
          },
          "next": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "next",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the next page."
          },
          "last": {
            "type": "number",
            "title": "last",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the last page."
          },
          "first": {
            "type": "number",
            "title": "first",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the first page."
          }
        },
        "required": [
          "result",
          "nextPage"
        ]
      },
      "IGithub.IGetFolloweeInput": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "title": "user's nickname"
          },
          "per_page": {
            "type": "integer",
            "default": 30,
            "maximum": 100,
            "title": "per_page",
            "description": "The number of results per page (max 100)."
          },
          "page": {
            "type": "integer",
            "default": 1,
            "title": "page",
            "description": "The page number of the results to fetch."
          },
          "order": {
            "oneOf": [
              {
                "const": "desc",
                "default": "desc"
              },
              {
                "const": "asc",
                "default": "desc"
              }
            ],
            "title": "order",
            "description": "Determines whether the first search result returned is the highest number of matches (desc) or lowest number of matches (asc).\nThis parameter is ignored unless you provide sort."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "x-wrtn-secret-scopes": [
              "user"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "username",
          "secretKey"
        ]
      },
      "IGithub.IGetLabelOutput": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IGithub.Label"
            },
            "title": "result"
          },
          "nextPage": {
            "type": "boolean",
            "title": "true if there is a next page",
            "description": "However, since true and false are judged by comparing the number of requested objects with the number of searched objects,\neven if true, the next page may be empty."
          },
          "after": {
            "type": "string",
            "title": "after\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the next page."
          },
          "before": {
            "type": "string",
            "title": "before\n\nIf this is the response value for cursor-based pagenation, it provides a hash code for the previous page."
          },
          "prev": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "prev",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the previous page."
          },
          "next": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "number"
              }
            ],
            "title": "next",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the next page."
          },
          "last": {
            "type": "number",
            "title": "last",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the last page."
          },
          "first": {
            "type": "number",
            "title": "first",
            "description": "If this is a response by offset-based pagenation, provide metadata for the next page.\nThis means the first page."
          }
        },
        "required": [
          "result",
          "nextPage"
        ]
      },
      "IGithub.Label": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "label name"
          },
          "color": {
            "type": "string",
            "title": "color"
          },
          "default": {
            "type": "boolean",
            "title": "default\n\nTrue if it is not created by the user but automatically created from the beginning."
          },
          "description": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "description"
          }
        },
        "required": [
          "name",
          "color",
          "default",
          "description"
        ]
      },
      "IGithub.IGetLabelInput": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "title": "user's nickname"
          },
          "repo": {
            "type": "string",
            "title": "The name of the repository"
          },
          "page": {
            "type": "integer",
            "default": 1,
            "title": "page",
            "description": "The page number of the results to fetch."
          },
          "per_page": {
            "type": "integer",
            "default": 30,
            "maximum": 100,
            "title": "per_page",
            "description": "The number of results per page (max 100)."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "x-wrtn-secret-scopes": [
              "repo"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "owner",
          "repo",
          "secretKey"
        ]
      },
      "IGithub.IUpdateIssueInput": {
        "type": "object",
        "properties": {
          "issue_number": {
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1,
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/github/issues",
                  "jmesPath": "{label:number, value:title}"
                }
              },
              {
                "type": "integer",
                "minimum": 1,
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/github/issues",
                  "jmesPath": "result[].{label:number, value:title}"
                }
              }
            ],
            "title": "issue number to update"
          },
          "title": {
            "type": "string",
            "title": "tite of this issue"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "x-wrtn-secret-scopes": [
              "repo"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          },
          "owner": {
            "type": "string",
            "title": "user's nickname"
          },
          "repo": {
            "type": "string",
            "title": "The name of the repository"
          },
          "body": {
            "type": "string",
            "title": "body of this issue",
            "description": "It can be markdown format\nIf you provide text in utf-8 format, which can be recognized by a person, in markdown format, it will be written as it is."
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "labels"
          },
          "assignees": {
            "type": "array",
            "items": {
              "type": "string",
              "x-wrtn-prerequisite": {
                "method": "post",
                "path": "/connector/github/repos/get-collaborators",
                "jmesPath": "result[].{value:login, label:login}"
              }
            },
            "title": "assignees\n\nDeliver the user nickname to be designated as the person in charge in the array."
          }
        },
        "required": [
          "issue_number",
          "secretKey",
          "owner",
          "repo"
        ]
      },
      "IGithub.ICreateIssueInput": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "title": "user's nickname"
          },
          "repo": {
            "type": "string",
            "title": "The name of the repository"
          },
          "title": {
            "type": "string",
            "title": "tite of this issue"
          },
          "body": {
            "type": "string",
            "title": "body of this issue",
            "description": "It can be markdown format\nIf you provide text in utf-8 format, which can be recognized by a person, in markdown format, it will be written as it is."
          },
          "assignees": {
            "type": "array",
            "items": {
              "type": "string",
              "x-wrtn-prerequisite": {
                "method": "post",
                "path": "/connector/github/repos/get-collaborators",
                "jmesPath": "result[].{value:login, label:login}"
              }
            },
            "title": "assignees\n\nDeliver the user nickname to be designated as the person in charge in the array."
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "labels"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "github",
            "x-wrtn-secret-scopes": [
              "repo"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "owner",
          "repo",
          "title",
          "secretKey"
        ]
      },
      "IRag.IAnalysisOutput": {
        "type": "object",
        "properties": {
          "chatId": {
            "type": "string",
            "title": "chat id",
            "description": "Chat id required for RAG generation results.\nReturns the chat id for the analyzed file to generate chat results for the file analyzed by RAG.\nThe same chat id is required to analyze multiple files and generate results for multiple files in the same chat."
          }
        },
        "required": [
          "chatId"
        ],
        "title": "RAG analysis results"
      },
      "IRag.IAnalyzeInput": {
        "type": "object",
        "properties": {
          "url": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri",
              "contentMediaType": "application/pdf, application/vnd.openxmlformats-officedocument.wordprocessingml.document, application/vnd.hancom.hwp, text/plain, text/html"
            },
            "title": "Knowledge that the chatbot will use to answer",
            "description": "Knowledge that the chatbot will use to answer"
          }
        },
        "required": [
          "url"
        ],
        "title": "Knowledge that the chatbot will use to answer"
      },
      "IRag.IGenerateOutput": {
        "type": "object",
        "properties": {
          "answer": {
            "type": "string",
            "title": "Response to utterance",
            "description": "Response to RAG-based creation request."
          }
        },
        "required": [
          "answer"
        ],
        "title": "Chat results via RAG"
      },
      "IRag.IGenerateInput": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "title": "User utterance",
            "description": "This is a user utterance."
          }
        },
        "required": [
          "query"
        ],
        "title": "Information required for chatting via RAG"
      }
    }
  },
  "tags": [
    {
      "name": "Github"
    },
    {
      "name": "RAG"
    }
  ],
  "x-samchon-emended": true
}