{
  "openapi": "3.1.0",
  "servers": [
    {
      "url": "https://studio-connector-api.wrtn.ai",
      "description": "Production Server"
    },
    {
      "url": "https://studio-connector-poc.dev.wrtn.club",
      "description": "Develop Server"
    },
    {
      "url": "http://localhost:3003",
      "description": "Local Server"
    }
  ],
  "info": {
    "title": "Slack",
    "summary": "슬랙에서 대화 내용을 가져오거나 메시지를 보낼 수 있어요.",
    "description": "슬랙에서 우리 멤버들이 어떤 주제를 가지고 논의를 하는지 확인해요. 우리 워크스페이스에 있는 유저 그룹이나 동료의 프로필을 확인할 수도 있고, 동료에게 말을 걸 수도 있고, 채널에 메세지를 보내고, 또 답글을 달 수도 있어요.",
    "version": "0.1.443",
    "license": {
      "name": "AGPL-3.0-only"
    }
  },
  "paths": {
    "/connector/slack/vote": {
      "post": {
        "summary": "Send Slack Custom Template Messages for Voting",
        "description": "Send Slack Custom Template Messages for Voting",
        "tags": [
          "Slack"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISlack.IHoldVoteInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISlack.IHoldVoteOutput"
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "slack",
          "vote"
        ],
        "x-samchon-controller": "SlackController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/fulls/Slack_full.svg"
      }
    },
    "/connector/slack/conversation/mark": {
      "post": {
        "summary": "Marks a specific message in a Slack channel as read",
        "description": "Marks a specific message in a Slack channel as read\n\nYou need to know both the channel ID and the ts value of the message.",
        "tags": [
          "Slack"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISlack.IMarkInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "slack",
          "conversation",
          "mark"
        ],
        "x-samchon-controller": "SlackController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/fulls/Slack_full.svg"
      }
    },
    "/connector/slack/scheduleMessage/text": {
      "post": {
        "description": "Create a schduled message\n\nBy default,\nit is not much different from sending a message except for specifying a schduled time,\nand requires a channel ID and message content.\nIf the message you want to schedule is within a specific thread, you must pass the ts value of the parent message.\n\nMessages booked through this feature are not visible in the Slack desktop app and can only be canceled through the API.\nTherefore, be careful in writing messages.\nIf you want to cancel, please refer to the message created through another connector and call the delete connector again.\n\nUsers may be embarrassed if the message you booked is not viewed in the Slack desktop app,\nso although it cannot be viewed before and after transmission,\nit would be a good idea to let them know that it will actually be transmitted in our service.",
        "tags": [
          "Slack"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISlack.ISCheduleMessageInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "scheduled message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyPickISlack.ScheduledMessagepost_at"
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "slack",
          "scheduleMessage",
          "text",
          "sendScheduleMessage"
        ],
        "x-samchon-controller": "SlackController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/fulls/Slack_full.svg"
      }
    },
    "/connector/slack/scheduleMessage": {
      "delete": {
        "summary": "Delete the scheduled message",
        "description": "Delete the scheduled message\n\nTo clear a scheduled message,\nyou must get the exact id of that message, so you must first use the scheduled message lookup connector.\nWhen using this connector,\nthe ID of the channel is also required, which can be retrieved from the message object by querying the channel or by querying the scheduled message.",
        "tags": [
          "Slack"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISlack.IDeleteSCheduleMessageInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "slack",
          "scheduleMessage",
          "deleteScheduleMessage"
        ],
        "x-samchon-controller": "SlackController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/fulls/Slack_full.svg"
      }
    },
    "/connector/slack/postMessage/text/myself": {
      "post": {
        "summary": "post text message to myself",
        "description": "send message to myself\n\nHere, you can send a message as long as you have the message.\nThis feature identifies who the token's users are inside and sends a message to themselves.\nTherefore, even if you don't specify a channel,\nyou send a message to the `im` channel that corresponds to your own user id.",
        "tags": [
          "Slack"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISlack.IPostMessageToMyselfInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "created message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyPickISlack.Messagets"
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "slack",
          "postMessage",
          "text",
          "myself",
          "sendTextToMyself"
        ],
        "x-samchon-controller": "SlackController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/fulls/Slack_full.svg"
      }
    },
    "/connector/slack/postMessage/reply": {
      "post": {
        "summary": "post reply message to thread",
        "description": "send reply message to thread\n\nCreates a reply.\nTo reply, you must first look up the thread.\nYou can look up the thread and pass on the 'ts' value of that thread.\nYou still need the channel's ID here.\nThe channel's ID will start with a C or D and be an unknown string,\nnot a natural language name recognized by the user.\nTherefore, if you don't know the channel ID, you should also look up the channel.",
        "tags": [
          "Slack"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISlack.IPostMessageReplyInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "created message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyPickISlack.Messagets"
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "slack",
          "postMessage",
          "reply",
          "sendReply"
        ],
        "x-samchon-controller": "SlackController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/fulls/Slack_full.svg"
      }
    },
    "/connector/slack/postMessage/text": {
      "post": {
        "summary": "post text message",
        "description": "send message to channel\n\nHere, you can send a message as long as you have the message and channel information you want to send.\nSlack is a very close service to work, so it's dangerous to send messages that haven't been confirmed.\nYou must send the contents after receiving confirmation from the user.\n\nIf you want to send a message to a DM channel, you need to search for an IM channel.\nMost IM channel IDs will start with 'D', but if the value provided by the user is a value that starts with 'U',\nthis is most likely the user ID of the IM channel, not the channel.\nYou need to search for a user starting with that ID and then send a message.",
        "tags": [
          "Slack"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISlack.IPostMessageInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "created message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyPickISlack.Messagets"
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "slack",
          "postMessage",
          "text",
          "sendText"
        ],
        "x-samchon-controller": "SlackController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/fulls/Slack_full.svg"
      }
    },
    "/connector/slack/message": {
      "put": {
        "summary": "Update message body in thread",
        "description": "Update message body\n\nUse to modify messages sent by users.\nIf the message is not sent by the user, user cannot modify it.",
        "tags": [
          "Slack"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISlack.IUpdateMessageInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISlack.IUpdateMessageOutput"
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "slack",
          "message",
          "updateMessage"
        ],
        "x-samchon-controller": "SlackController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/fulls/Slack_full.svg"
      }
    },
    "/connector/slack/get-scheduled-messages": {
      "patch": {
        "summary": "Get a list of scheduled messages",
        "description": "Get a list of scheduled messages\n\nLook up the messages you booked.\nYou can use `post_at` and `post_at_date` to find out when the message will be sent.\nIf you want to clear the message, use the `id` value in the scheduled message.\n\nIf a user wants to send a reservation message to himself,\nhe or she should look up both the user and the 'im' channel, then find the 'im' channel with his or her user ID and send it to that channel.\nWhat is on the 'im' channel includes not only the user's own channel, but also all the channels that can send and receive direct messages for each user.",
        "tags": [
          "Slack"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISlack.IGetScheduledMessageListInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISlack.IGetScheduledMessageListOutput"
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "slack",
          "get_scheduled_messages",
          "getScheduledMessages"
        ],
        "x-samchon-controller": "SlackController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/fulls/Slack_full.svg"
      }
    },
    "/connector/slack/get-user-details": {
      "patch": {
        "summary": "Inquire user details",
        "description": "Inquire user details\n\nInquire the user's detailed profile to acquire information such as phone number, email, and position.\nIt cannot be verified if the user has not filled in.\nThis function receives the user's ID in an array and inquires at once.",
        "tags": [
          "Slack"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISlack.IGetUserDetailInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ISlack.IGetUserDetailOutput"
                  }
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "slack",
          "get_user_details",
          "getUserDetails"
        ],
        "x-samchon-controller": "SlackController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/fulls/Slack_full.svg"
      }
    },
    "/connector/slack/get-users": {
      "patch": {
        "summary": "Look up the list of users",
        "description": "Look up the list of users.\n\nUsers include bots and refer to all users in the team who are looking up.\nHere, you can look up the user's ID and name, the name the user wanted to display, the profile image, and whether the user has been deleted.\nIf you look up the user here, you can send a message to your colleagues on a specific direct channel, such as an `im` ( = channel type. )\n\nThis connector is essential because the `im` channel query only shows the user's ID and does not know who the direct channel is talking to.\n\nThe user has a separate display name.\nA display name is a name that the user has chosen to show.\nTherefore, it would be best to use this name as a courtesy.\n\nIt can look up Slack users, but it can look up the entire user through pagenation.\nThere could be hundreds of people in the company, so you'll have to look at multiple pages.",
        "tags": [
          "Slack"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISlack.IGetUserListInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISlack.IGetUserListOutput"
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "slack",
          "get_users",
          "getUsers"
        ],
        "x-samchon-controller": "SlackController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/fulls/Slack_full.svg"
      }
    },
    "/connector/slack/get-replies": {
      "patch": {
        "description": "Inquire the inside of the thread in History\n\nIf you have inquired the history of a channel,\nyou can use the 'ts' values of its history elements to query the internal thread for each history again.\nEach channel history has a number of replies, so if this number is more than 1, it is worth looking up.\n'Reply' is basically no different from the 'Message'(=Channel History).",
        "tags": [
          "Slack"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISlack.IGetReplyInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Replies",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISlack.IGetReplyOutput"
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "slack",
          "get_replies",
          "getReplies"
        ],
        "x-samchon-controller": "SlackController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/fulls/Slack_full.svg"
      }
    },
    "/connector/slack/get-channel-link-histories": {
      "patch": {
        "summary": "get links from channel histories",
        "description": "Get Channel Links from Channel Histories\n\nRetrieves conversations in and out of channels.\nA channel ID starts with 'C' or 'D' (uppercase). If no ID is provided, search by channel name or keywords.\nUsers often don’t know channel IDs, so prioritize finding the channel unless the input starts with 'C' or 'D'.\nSearch conversations within specific timeframes using datetime formats.\nFilters out messages without links, retaining only those with links in the links property.\nThis ensures efficient link extraction from conversation histories.",
        "tags": [
          "Slack"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISlack.IGetChannelHistoryInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISlack.IGetChannelLinkHistoryOutput"
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "slack",
          "get_channel_link_histories",
          "getChannelLinkHistories"
        ],
        "x-samchon-controller": "SlackController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/fulls/Slack_full.svg"
      }
    },
    "/connector/slack/get-channel-histories": {
      "patch": {
        "summary": "get channel histories",
        "description": "Get Channel Histories\n\nRetrieves conversations in and out of channels.\nChannel IDs start with 'C' or 'D' (uppercase). If no ID is provided, search by channel name or keywords.\nUsers typically don’t know channel IDs, so prioritize finding the channel unless the input starts with 'C' or 'D'.\nSearch conversations within specific timeframes using datetime formats.\nIn history, links and code boxes are shown as <LINK/> and <CODE/>. Mentions appear as <@USERNAME>, but this indicates a mention, not the conversation starter.\nFilters by date should prioritize the datetime format for accuracy.",
        "tags": [
          "Slack"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISlack.IGetChannelHistoryInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "channel histories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISlack.IGetChannelHistoryOutput"
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "slack",
          "get_channel_histories",
          "getChannelHistories"
        ],
        "x-samchon-controller": "SlackController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/fulls/Slack_full.svg"
      }
    },
    "/connector/slack/get-private-channels": {
      "patch": {
        "summary": "get private channels",
        "description": "get private channels\n\nView channels.\nThis connector will only look up its own `private` channel.\nThe channel ID is required to look up the conversation history within the channel later.\n`private` channel is a locked channel that can only be viewed by those invited to the channel.\n\nIf you can't find the channel ID by name, it might be because it's on the next page, not because you don't have a channel.",
        "tags": [
          "Slack"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISlack.IGetChannelInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "private channels",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ISlack.PrivateChannel"
                  }
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "slack",
          "get_private_channels",
          "getPrivateChannels"
        ],
        "x-samchon-controller": "SlackController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/fulls/Slack_full.svg"
      }
    },
    "/connector/slack/get-public-channels": {
      "patch": {
        "summary": "get public channels",
        "description": "get public channels\n\nView channels.\nThis connector will only look up its own `public` channel.\nThe channel ID is required to look up the conversation history within the channel later.\nThe `public` channel is anyone's accessible.\nThis does not require an invitation process, and users can join the channel themselves if necessary.",
        "tags": [
          "Slack"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISlack.IGetChannelInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "public channels",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ISlack.PublicChannel"
                  }
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "slack",
          "get_public_channels",
          "getPublicChannels"
        ],
        "x-samchon-controller": "SlackController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/fulls/Slack_full.svg"
      }
    },
    "/connector/slack/get-im-channels": {
      "patch": {
        "summary": "get im channels",
        "description": "get im channels\n\nView channels.\nThis connector will only look up its own `im` channel.\nThe channel ID is required to look up the conversation history within the channel later.\n`im` channel is a conversation that takes place in one's profile and refers to a personal channel that can only be viewed by oneself.\nUsers also use chat as storage or notepad, such as storing files and images here.\n\nTo send a 1:1 message to other users, you must first look up the `im` channel.",
        "tags": [
          "Slack"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISlack.IGetChannelInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "im channels",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ISlack.ImChannel"
                  }
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "slack",
          "get_im_channels",
          "getImChannels"
        ],
        "x-samchon-controller": "SlackController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/fulls/Slack_full.svg"
      }
    },
    "/connector/slack/get-files": {
      "patch": {
        "summary": "get files in workspace",
        "description": "get files in workspace\n\nYou can look up Slack workspace and channels, or all files sent from users.\nIt is pagenation and can filter by file type, and also provides thumbnail links, download links, and original message links.",
        "tags": [
          "Slack"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISlack.IGetFileInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISlack.IGetFileOutput"
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "slack",
          "get_files",
          "getFiles"
        ],
        "x-samchon-controller": "SlackController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/fulls/Slack_full.svg"
      }
    },
    "/connector/slack/get-user-groups": {
      "patch": {
        "summary": "Get usergroups in workspace",
        "description": "get user groups in workspace\n\nLook up user groups. This can be used to call all specific groups by tagging.\nHowever, it is difficult to know if it is an appropriate user group other than 'handle' because all internal users come out with IDs.\nIf you want to see a list of users, use the User Inquiry connector together.\nIf you want to see the user's nickname or name that corresponds to the user's ID, refer to the User Inquiry connector.",
        "tags": [
          "Slack"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISlack.ISecret"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISlack.IGetUserGroupOutput"
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "slack",
          "get_user_groups",
          "getUserGroups"
        ],
        "x-samchon-controller": "SlackController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/fulls/Slack_full.svg"
      }
    },
    "/connector/slack/me": {
      "patch": {
        "summary": "Get Requester's Information",
        "description": "Get Requester's Information\n\nYou can use that function to get requester's information.\nIf you want to get information about requester, call this function.\nThen you can use that information wherever you need requester's information.",
        "tags": [
          "Slack"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISlack.ISecret"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ISlack.IGetMyInfoOutput"
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "slack",
          "me",
          "getMyInfo"
        ],
        "x-samchon-controller": "SlackController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/fulls/Slack_full.svg"
      }
    },
    "/connector/slack/messages": {
      "delete": {
        "summary": "Delete Messages",
        "description": "Delete Messages\n\nYou must strictly distinguish between the requester's information and other's information. Always verify whether the information being requested pertains to the requester or someone else.\nBefore you call this function, you must call the function that gets requester's information.\nYou must only use requester's information to delete messages.\nYou must strictly filter the messages you delete to only those that match the requester's `User ID`\nYou must look through all the messages and only delete the ones that match the requester's user id.\nDon't read one message and stop working on it because it has a different user id of requester.\nTo delete messages,\nYou need the timestamps of the messages you wrote that you want to delete and channel id.",
        "tags": [
          "Slack"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ISlack.IDeleteMessageInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "slack",
          "messages",
          "deleteMessage"
        ],
        "x-samchon-controller": "SlackController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/fulls/Slack_full.svg"
      }
    }
  },
  "components": {
    "schemas": {
      "ISlack.IHoldVoteOutput": {
        "type": "object",
        "properties": {
          "blocks": {
            "type": "array",
            "items": {},
            "title": "title blocks"
          },
          "ts": {
            "type": "string",
            "x-wrtn-placeholder": "1234567890.123456",
            "title": "timestamp",
            "description": "for example, `1721804246.083609`.\nThis is the time value expression method used by Slack."
          }
        },
        "required": [
          "ts"
        ]
      },
      "ISlack.IHoldVoteInput": {
        "type": "object",
        "properties": {
          "channel": {
            "oneOf": [
              {
                "type": "string",
                "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/slack/get-public-channels",
                  "jmesPath": "[].{value:id, label:name}"
                }
              },
              {
                "type": "string",
                "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/slack/get-private-channels",
                  "jmesPath": "[].{value:id, label:name}"
                }
              },
              {
                "type": "string",
                "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/slack/get-im-channels",
                  "jmesPath": "[].{value:id, label:name || '개인 채널'}"
                }
              }
            ],
            "title": "channel id"
          },
          "title": {
            "type": "string",
            "title": "Title of vote to be held\n\nIt should be written as a simple one-line markdown and can include Slack emojis."
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "text": {
                  "type": "string",
                  "title": "option title"
                },
                "link": {
                  "type": "string",
                  "title": "option's link"
                }
              },
              "required": [
                "text"
              ]
            },
            "title": "options available for voting\n\nIt refers to the options available for voting."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "slack",
            "x-wrtn-secret-scopes": [
              "channels:read",
              "channels:history",
              "users.profile:read",
              "im:read",
              "im:history",
              "groups:history",
              "groups:read",
              "chat:write",
              "users:read",
              "files:read",
              "usergroups:read",
              "team:read"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "channel",
          "title",
          "items",
          "secretKey"
        ]
      },
      "ISlack.IMarkInput": {
        "type": "object",
        "properties": {
          "channel": {
            "oneOf": [
              {
                "type": "string",
                "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/slack/get-public-channels",
                  "jmesPath": "[].{value:id, label:name}"
                }
              },
              {
                "type": "string",
                "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/slack/get-private-channels",
                  "jmesPath": "[].{value:id, label:name}"
                }
              },
              {
                "type": "string",
                "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/slack/get-im-channels",
                  "jmesPath": "[].{value:id, label:name || '개인 채널'}"
                }
              }
            ],
            "title": "channel id",
            "description": "It refers to the channel on which you want to mark the conversation history.\nIf you don't know the channel's ID, You need to view the channel first."
          },
          "ts": {
            "type": "string",
            "x-wrtn-placeholder": "1234567890.123456",
            "x-wrtn-prerequisite": {
              "method": "post",
              "path": "/connector/slack/get-channel-histories",
              "jmesPath": "messages[].{value: ts, label: text}"
            },
            "title": "ts",
            "description": "It means the 'ts' value of the chat you want to mark"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "slack",
            "x-wrtn-secret-scopes": [
              "channels:read",
              "channels:history",
              "users.profile:read",
              "im:read",
              "im:history",
              "groups:history",
              "groups:read",
              "chat:write",
              "users:read",
              "files:read",
              "usergroups:read",
              "team:read"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "channel",
          "ts",
          "secretKey"
        ]
      },
      "MyPickISlack.ScheduledMessagepost_at": {
        "type": "object",
        "properties": {
          "post_at": {
            "type": "string",
            "x-wrtn-placeholder": "1234567890.123456",
            "title": "timestamp",
            "description": "for example, `1721804246.083609`.\nThis is the time value expression method used by Slack."
          }
        },
        "required": [
          "post_at"
        ]
      },
      "ISlack.ISCheduleMessageInput": {
        "type": "object",
        "properties": {
          "post_at": {
            "type": "string",
            "x-wrtn-placeholder": "1234567890.123456",
            "title": "Transfer Schedule Time",
            "description": "You can schedule the time you want to send the message in advance.\nThe scheduled time must be in the same form as the ts property in the Message."
          },
          "thread_ts": {
            "type": "string",
            "x-wrtn-placeholder": "1234567890.123456",
            "title": "thread ts\n\nIf the message you want to schedule is within a specific thread, you must pass the ts value of the parent message."
          },
          "channel": {
            "oneOf": [
              {
                "type": "string",
                "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/slack/get-public-channels",
                  "jmesPath": "[].{value:id, label:name}"
                }
              },
              {
                "type": "string",
                "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/slack/get-private-channels",
                  "jmesPath": "[].{value:id, label:name}"
                }
              },
              {
                "type": "string",
                "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/slack/get-im-channels",
                  "jmesPath": "[].{value:id, label:name || '개인 채널'}"
                }
              },
              {
                "type": "string",
                "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/slack/get-users",
                  "jmesPath": "users[].{ value: im_channel_id, label: display_name }"
                }
              }
            ],
            "title": "channel id",
            "description": "It refers to the channel on which you want to view the conversation history.\nIf you don't know the channel's ID, You need to view the channel first.\nWhen sending a message to a DM channel, you need the channel's ID, not the user's ID.\nThe user's ID starts with 'U', but if it's a DM channel, it's more likely to start with 'D'."
          },
          "text": {
            "type": "string",
            "title": "message to send",
            "description": "When a user enters a markdown format string, the internal function modifies it to the format of the slack.\nUsers can put text in accordance with the usual markdown grammar.\nFor user readability, it is recommended that the string be sent with appropriate new-line characters."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "slack",
            "x-wrtn-secret-scopes": [
              "channels:read",
              "channels:history",
              "users.profile:read",
              "im:read",
              "im:history",
              "groups:history",
              "groups:read",
              "chat:write",
              "users:read",
              "files:read",
              "usergroups:read",
              "team:read"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "post_at",
          "channel",
          "text",
          "secretKey"
        ]
      },
      "ISlack.IDeleteSCheduleMessageInput": {
        "type": "object",
        "properties": {
          "channel": {
            "oneOf": [
              {
                "type": "string",
                "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/slack/get-public-channels",
                  "jmesPath": "[].{value:id, label:name}"
                }
              },
              {
                "type": "string",
                "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/slack/get-private-channels",
                  "jmesPath": "[].{value:id, label:name}"
                }
              },
              {
                "type": "string",
                "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/slack/get-im-channels",
                  "jmesPath": "[].{value:id, label:name || '개인 채널'}"
                }
              }
            ],
            "title": "channel id",
            "description": "It refers to the channel on which you want to delete the scheduled message.\nIf you don't know the channel's ID, You need to view the channel first."
          },
          "scheduled_message_id": {
            "type": "string",
            "x-wrtn-prerequisite": {
              "method": "post",
              "path": "/connector/slack/get-scheduled-messages",
              "jmesPath": "scheduled_messages[].{value:id, label:text}"
            },
            "title": "scheduled message id to delete"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "slack",
            "x-wrtn-secret-scopes": [
              "channels:read",
              "channels:history",
              "users.profile:read",
              "im:read",
              "im:history",
              "groups:history",
              "groups:read",
              "chat:write",
              "users:read",
              "files:read",
              "usergroups:read",
              "team:read"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "channel",
          "scheduled_message_id",
          "secretKey"
        ]
      },
      "MyPickISlack.Messagets": {
        "type": "object",
        "properties": {
          "ts": {
            "type": "string",
            "x-wrtn-placeholder": "1234567890.123456",
            "title": "timestamp",
            "description": "for example, `1721804246.083609`.\nThis is the time value expression method used by Slack."
          }
        },
        "required": [
          "ts"
        ]
      },
      "ISlack.IPostMessageToMyselfInput": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "title": "message to send"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "slack",
            "x-wrtn-secret-scopes": [
              "channels:read",
              "channels:history",
              "users.profile:read",
              "im:read",
              "im:history",
              "groups:history",
              "groups:read",
              "chat:write",
              "users:read",
              "files:read",
              "usergroups:read",
              "team:read"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "text",
          "secretKey"
        ]
      },
      "ISlack.IPostMessageReplyInput": {
        "type": "object",
        "properties": {
          "ts": {
            "type": "string",
            "x-wrtn-placeholder": "1234567890.123456",
            "x-wrtn-prerequisite": {
              "method": "post",
              "path": "/connector/slack/get-channel-histories",
              "jmesPath": "messages[].{value: ts, label: text}"
            },
            "title": "ts",
            "description": "It means the 'ts' value of the chat you want to reply"
          },
          "channel": {
            "oneOf": [
              {
                "type": "string",
                "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/slack/get-public-channels",
                  "jmesPath": "[].{value:id, label:name}"
                }
              },
              {
                "type": "string",
                "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/slack/get-private-channels",
                  "jmesPath": "[].{value:id, label:name}"
                }
              },
              {
                "type": "string",
                "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/slack/get-im-channels",
                  "jmesPath": "[].{value:id, label:name || '개인 채널'}"
                }
              },
              {
                "type": "string",
                "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/slack/get-users",
                  "jmesPath": "users[].{ value: im_channel_id, label: display_name }"
                }
              }
            ],
            "title": "channel id",
            "description": "It refers to the channel on which you want to view the conversation history.\nIf you don't know the channel's ID, You need to view the channel first.\nWhen sending a message to a DM channel, you need the channel's ID, not the user's ID.\nThe user's ID starts with 'U', but if it's a DM channel, it's more likely to start with 'D'."
          },
          "text": {
            "type": "string",
            "title": "message to send",
            "description": "When a user enters a markdown format string, the internal function modifies it to the format of the slack.\nUsers can put text in accordance with the usual markdown grammar.\nFor user readability, it is recommended that the string be sent with appropriate new-line characters."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "slack",
            "x-wrtn-secret-scopes": [
              "channels:read",
              "channels:history",
              "users.profile:read",
              "im:read",
              "im:history",
              "groups:history",
              "groups:read",
              "chat:write",
              "users:read",
              "files:read",
              "usergroups:read",
              "team:read"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "ts",
          "channel",
          "text",
          "secretKey"
        ]
      },
      "ISlack.IPostMessageInput": {
        "type": "object",
        "properties": {
          "channel": {
            "oneOf": [
              {
                "type": "string",
                "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/slack/get-public-channels",
                  "jmesPath": "[].{value:id, label:name}"
                }
              },
              {
                "type": "string",
                "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/slack/get-private-channels",
                  "jmesPath": "[].{value:id, label:name}"
                }
              },
              {
                "type": "string",
                "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/slack/get-im-channels",
                  "jmesPath": "[].{value:id, label:name || '개인 채널'}"
                }
              },
              {
                "type": "string",
                "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/slack/get-users",
                  "jmesPath": "users[].{ value: im_channel_id, label: display_name }"
                }
              }
            ],
            "title": "channel id",
            "description": "It refers to the channel on which you want to view the conversation history.\nIf you don't know the channel's ID, You need to view the channel first.\nWhen sending a message to a DM channel, you need the channel's ID, not the user's ID.\nThe user's ID starts with 'U', but if it's a DM channel, it's more likely to start with 'D'."
          },
          "text": {
            "type": "string",
            "title": "message to send",
            "description": "When a user enters a markdown format string, the internal function modifies it to the format of the slack.\nUsers can put text in accordance with the usual markdown grammar.\nFor user readability, it is recommended that the string be sent with appropriate new-line characters."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "slack",
            "x-wrtn-secret-scopes": [
              "channels:read",
              "channels:history",
              "users.profile:read",
              "im:read",
              "im:history",
              "groups:history",
              "groups:read",
              "chat:write",
              "users:read",
              "files:read",
              "usergroups:read",
              "team:read"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "channel",
          "text",
          "secretKey"
        ]
      },
      "ISlack.IUpdateMessageOutput": {
        "type": "object",
        "properties": {
          "ts": {
            "type": "string",
            "x-wrtn-placeholder": "1234567890.123456",
            "title": "timestamp",
            "description": "for example, `1721804246.083609`.\nThis is the time value expression method used by Slack."
          }
        },
        "required": [
          "ts"
        ]
      },
      "ISlack.IUpdateMessageInput": {
        "type": "object",
        "properties": {
          "thread_ts": {
            "type": "string",
            "x-wrtn-placeholder": "1234567890.123456",
            "title": "thread ts to update"
          },
          "channel": {
            "oneOf": [
              {
                "type": "string",
                "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/slack/get-public-channels",
                  "jmesPath": "[].{value:id, label:name}"
                }
              },
              {
                "type": "string",
                "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/slack/get-private-channels",
                  "jmesPath": "[].{value:id, label:name}"
                }
              },
              {
                "type": "string",
                "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/slack/get-im-channels",
                  "jmesPath": "[].{value:id, label:name || '개인 채널'}"
                }
              },
              {
                "type": "string",
                "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/slack/get-users",
                  "jmesPath": "users[].{ value: im_channel_id, label: display_name }"
                }
              }
            ],
            "title": "channel id",
            "description": "It refers to the channel on which you want to view the conversation history.\nIf you don't know the channel's ID, You need to view the channel first.\nWhen sending a message to a DM channel, you need the channel's ID, not the user's ID.\nThe user's ID starts with 'U', but if it's a DM channel, it's more likely to start with 'D'."
          },
          "text": {
            "type": "string",
            "title": "message to send",
            "description": "When a user enters a markdown format string, the internal function modifies it to the format of the slack.\nUsers can put text in accordance with the usual markdown grammar.\nFor user readability, it is recommended that the string be sent with appropriate new-line characters."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "slack",
            "x-wrtn-secret-scopes": [
              "channels:read",
              "channels:history",
              "users.profile:read",
              "im:read",
              "im:history",
              "groups:history",
              "groups:read",
              "chat:write",
              "users:read",
              "files:read",
              "usergroups:read",
              "team:read"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "thread_ts",
          "channel",
          "text",
          "secretKey"
        ]
      },
      "ISlack.IGetScheduledMessageListOutput": {
        "type": "object",
        "properties": {
          "scheduled_messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduledMessageidstringpost_at_datestring"
            },
            "title": "scheduled messages"
          },
          "next_cursor": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "next_cursor",
            "description": "Cursor for pagination\n\nIf the following data exist, the cursor value exists.\nIf you want to see the next data from these data,\nyou can pass this value to the next request condition, `cursor`.\nIf this property is not null, It was not over to find data."
          }
        },
        "required": [
          "scheduled_messages",
          "next_cursor"
        ]
      },
      "ScheduledMessageidstringpost_at_datestring": {
        "type": "object",
        "properties": {
          "post_at": {
            "type": "string",
            "x-wrtn-placeholder": "1234567890.123456",
            "title": "timestamp",
            "description": "for example, `1721804246.083609`.\nThis is the time value expression method used by Slack."
          },
          "date_created": {
            "type": "string",
            "x-wrtn-placeholder": "1234567890.123456",
            "title": "when the user scheduled the message"
          },
          "text": {
            "type": "string",
            "title": "message contents",
            "description": "When users occasionally call others, they can be called in the form of '@USERNAME', which is called a tag.\nIn the conversation history, the link and code box are abbreviated to <LINK/> and <CODE/>, respectively.\nFor users, it is replaced by a user name, Like <@USERNAME>.\n<@USERNAME> is about calling someone else, and it's not the name of the person who started the conversation, so be careful.\nif you want to find who started this conversation, check 'user' property."
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MyPickISlack.Attachmenttitleid"
            },
            "title": "Attachments",
            "description": "Attachement contains all types of files and can sometimes be an external link.\nIt is not the type that can be confirmed because the internal properties can vary depending on the type of block it is making up."
          },
          "channel": {
            "type": "string",
            "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
            "title": "channel id"
          },
          "id": {
            "type": "string",
            "title": "id of scheduled message"
          },
          "post_at_date": {
            "type": "string",
            "title": "date-time format of post_at"
          }
        },
        "required": [
          "post_at",
          "date_created",
          "text",
          "channel",
          "id",
          "post_at_date"
        ]
      },
      "MyPickISlack.Attachmenttitleid": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "title": "title\n\nLarge title text near the top of the attachment."
          },
          "id": {
            "type": "number",
            "title": "id"
          }
        },
        "required": []
      },
      "ISlack.IGetScheduledMessageListInput": {
        "type": "object",
        "properties": {
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "slack",
            "x-wrtn-secret-scopes": [
              "channels:read",
              "channels:history",
              "users.profile:read",
              "im:read",
              "im:history",
              "groups:history",
              "groups:read",
              "chat:write",
              "users:read",
              "files:read",
              "usergroups:read",
              "team:read"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 1000,
            "x-wrtn-placeholder": "200",
            "title": "limit",
            "description": "Indicates the number of data to look up at at once.\nIf not entered, use 100 as the default.\nThis should never be null. If you don't have a value, don't forward properties.\n\nIn reality, the value can be from 1 to 1000, so the recommendation is a number over 200.\nIf there is a user's request and there is a section that is cumbersome to page, you can enter 200.\n\nSince it is burdensome for users to inquire too many conversation details,\nit is recommended to page 100 to 200 conversation details at a time if more data is needed.\nAlternatively, it is also helpful to get a date to inquire from the user."
          },
          "cursor": {
            "type": "string",
            "title": "cursor",
            "description": "If you pass the next_cursor or cursor value received from the previous inquiry, you can get additional data from the data.\nIf the next_cursor is not null, you can retrieve additional data.\nIf you don't put a value, it will be recognized as the first page.\nThis should never be null. If you don't have a value, don't forward properties."
          }
        },
        "required": [
          "secretKey"
        ]
      },
      "ISlack.IGetUserDetailOutput": {
        "type": "object",
        "properties": {
          "fields": {
            "$ref": "#/components/schemas/Recordstringstring",
            "title": "custom fields"
          },
          "id": {
            "type": "string",
            "title": "User ID",
            "description": "Indicates the ID of the user.\nThis is different from the ID of the DM channel, or IM Channel.\nDM is a communication channel with people in that channel,\nand even if it is 1:1 the user has multiple DM channels,\nso it is not possible to say that the user's ID is a DM channel."
          },
          "im_channel_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "im_channel_id",
            "description": "If a user wants to send a DM message to another user,\nthey need to find a channel in im channels that matches their username.\nAnd call the message sending connector.\nHowever, since the purpose of looking up a user is usually to get information about the user or to send a message to the user,\nthis specification is extended to provide the DM channel (= IM channel) ID of the two users in this property when looking up a user.\nIf this value is 'null', then the user's im_channel_id was not found."
          },
          "display_name": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "display name",
            "description": "The user has a separate display name.\nA display name is a name that the user has chosen to show.\nTherefore, it would be best to use this name as a courtesy."
          },
          "real_name": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "real_name",
            "description": "The user's first and last name.\nUpdating this field will update first_name and last_name.\nIf only one name is provided, the value of last_name will be cleared."
          },
          "status_text": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "status"
          }
        },
        "required": [
          "fields",
          "id",
          "im_channel_id",
          "display_name",
          "real_name"
        ],
        "title": "profile",
        "description": "User information will usually include user's directories, start date, email, phone number, and status information.\nThe start date usually records when this member joined Slack or when he joined the team, but all the information here is written by the individual user and not by the HR person."
      },
      "Recordstringstring": {
        "type": "object",
        "properties": {},
        "required": [],
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "type": "string"
        }
      },
      "ISlack.IGetUserDetailInput": {
        "type": "object",
        "properties": {
          "userIds": {
            "type": "array",
            "items": {
              "type": "string",
              "x-wrtn-prerequisite": {
                "method": "post",
                "path": "/connector/slack/get-users",
                "jmesPath": "users[].{value: id, label: display_name}"
              }
            },
            "minItems": 1,
            "title": "userIds\n\nYou can enter the ID value of the user who wants to look up the details."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "slack",
            "x-wrtn-secret-scopes": [
              "channels:read",
              "channels:history",
              "users.profile:read",
              "im:read",
              "im:history",
              "groups:history",
              "groups:read",
              "chat:write",
              "users:read",
              "files:read",
              "usergroups:read",
              "team:read"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "userIds",
          "secretKey"
        ]
      },
      "ISlack.IGetUserListOutput": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StrictOmitISlack.IGetUserOutputfields"
            },
            "title": "user list"
          },
          "next_cursor": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "next_cursor",
            "description": "Cursor for pagination\n\nIf the following data exist, the cursor value exists.\nIf you want to see the next data from these data,\nyou can pass this value to the next request condition, `cursor`.\nIf this property is not null, It was not over to find data."
          }
        },
        "required": [
          "users",
          "next_cursor"
        ]
      },
      "StrictOmitISlack.IGetUserOutputfields": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "name",
            "description": "This is the name of the user,\nbut in some countries,\nit may not be possible to call the user's name carelessly,\nand the company should refrain from using it because the position exists."
          },
          "id": {
            "type": "string",
            "title": "User ID",
            "description": "Indicates the ID of the user.\nThis is different from the ID of the DM channel, or IM Channel.\nDM is a communication channel with people in that channel,\nand even if it is 1:1 the user has multiple DM channels,\nso it is not possible to say that the user's ID is a DM channel."
          },
          "profile_image": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "iri",
                "contentMediaType": "image/*"
              }
            ],
            "title": "profile image",
            "description": "There are several profile images for each image quality,\nbut here we provide them based on the first image uploaded by the user."
          },
          "slack_team_id": {
            "type": "string",
            "title": "slack_team_id"
          },
          "im_channel_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "im_channel_id",
            "description": "If a user wants to send a DM message to another user,\nthey need to find a channel in im channels that matches their username.\nAnd call the message sending connector.\nHowever, since the purpose of looking up a user is usually to get information about the user or to send a message to the user,\nthis specification is extended to provide the DM channel (= IM channel) ID of the two users in this property when looking up a user.\nIf this value is 'null', then the user's im_channel_id was not found."
          },
          "display_name": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "display name",
            "description": "The user has a separate display name.\nA display name is a name that the user has chosen to show.\nTherefore, it would be best to use this name as a courtesy."
          },
          "real_name": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "real_name",
            "description": "The user's first and last name.\nUpdating this field will update first_name and last_name.\nIf only one name is provided, the value of last_name will be cleared."
          },
          "deleted": {
            "type": "boolean",
            "title": "deleted",
            "description": "This value is used to distinguish between deleted users."
          },
          "status_text": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "status"
          }
        },
        "required": [
          "name",
          "id",
          "profile_image",
          "slack_team_id",
          "im_channel_id",
          "display_name",
          "real_name",
          "deleted"
        ]
      },
      "ISlack.IGetUserListInput": {
        "type": "object",
        "properties": {
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "slack",
            "x-wrtn-secret-scopes": [
              "channels:read",
              "channels:history",
              "users.profile:read",
              "im:read",
              "im:history",
              "groups:history",
              "groups:read",
              "chat:write",
              "users:read",
              "files:read",
              "usergroups:read",
              "team:read"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 1000,
            "x-wrtn-placeholder": "200",
            "title": "limit",
            "description": "Indicates the number of data to look up at at once.\nIf not entered, use 100 as the default.\nThis should never be null. If you don't have a value, don't forward properties.\n\nIn reality, the value can be from 1 to 1000, so the recommendation is a number over 200.\nIf there is a user's request and there is a section that is cumbersome to page, you can enter 200.\n\nSince it is burdensome for users to inquire too many conversation details,\nit is recommended to page 100 to 200 conversation details at a time if more data is needed.\nAlternatively, it is also helpful to get a date to inquire from the user."
          },
          "cursor": {
            "type": "string",
            "title": "cursor",
            "description": "If you pass the next_cursor or cursor value received from the previous inquiry, you can get additional data from the data.\nIf the next_cursor is not null, you can retrieve additional data.\nIf you don't put a value, it will be recognized as the first page.\nThis should never be null. If you don't have a value, don't forward properties."
          }
        },
        "required": [
          "secretKey"
        ]
      },
      "ISlack.IGetReplyOutput": {
        "type": "object",
        "properties": {
          "replies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ISlack.ChannelHistory"
            },
            "title": "replies",
            "description": "This value refers to replies that depend on the currently viewed thread."
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MyPickISlack.IGetUserOutputidim_channel_iddisplay_name"
            },
            "title": "members",
            "description": "This is a list of people who participated in the conversation in this conversation list."
          },
          "usergroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ISlack.UserGroup"
            },
            "title": "usergroups"
          },
          "channel": {
            "type": "object",
            "properties": {
              "name": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ],
                "title": "Channel Name",
                "description": "The channel name is the name of the channel for 'public' and 'private',\nand the name of the user for 'im'.\nIf the channel's name is not found, it is marked null."
              }
            },
            "required": [],
            "title": "Channel information"
          },
          "next_cursor": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "next_cursor",
            "description": "Cursor for pagination\n\nIf the following data exist, the cursor value exists.\nIf you want to see the next data from these data,\nyou can pass this value to the next request condition, `cursor`.\nIf this property is not null, It was not over to find data."
          }
        },
        "required": [
          "replies",
          "members",
          "usergroups",
          "channel",
          "next_cursor"
        ]
      },
      "ISlack.ChannelHistory": {
        "type": "object",
        "properties": {
          "username": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "username of the person who made this message"
          },
          "user_profile": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "iri"
              }
            ],
            "title": "user profile image"
          },
          "link": {
            "type": "string",
            "format": "iri",
            "title": "shortcut link",
            "description": "Link to view the conversation history immediately.\nWe can provide you with a shortcut link if user want, but you don't have to expose it to them in normal times."
          },
          "text": {
            "type": "string",
            "title": "message contents",
            "description": "When users occasionally call others, they can be called in the form of '@USERNAME', which is called a tag.\nIn the conversation history, the link and code box are abbreviated to <LINK/> and <CODE/>, respectively.\nFor users, it is replaced by a user name, Like <@USERNAME>.\n<@USERNAME> is about calling someone else, and it's not the name of the person who started the conversation, so be careful.\nif you want to find who started this conversation, check 'user' property."
          },
          "user": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "ID of the person who made this message\n\nIf not a user, message does not have an ID."
          },
          "channel": {
            "type": "string",
            "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
            "title": "channel id"
          },
          "ts": {
            "type": "string",
            "x-wrtn-placeholder": "1234567890.123456",
            "title": "timestamp",
            "description": "for example, `1721804246.083609`.\nThis is the time value expression method used by Slack."
          },
          "reply_count": {
            "type": "number",
            "title": "reply_count",
            "description": "Indicates the number of replies on this thread.\nIf there are many replies, active discussions are underway."
          },
          "reply_users_count": {
            "type": "number",
            "title": "reply_users_count",
            "description": "This means the person who has one or more Replys in this thread.\nThe number of unique people discussing in the thread."
          },
          "ts_date": {
            "type": "string",
            "title": "date format of `ts`\n\nThis is the value changed to ISO String to make it easier to recognize the current time value by separating 'ts'."
          },
          "links": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "iri"
            },
            "title": "links\n\nLinks from the chat"
          }
        },
        "required": [
          "username",
          "user_profile",
          "link",
          "text",
          "user",
          "channel",
          "ts",
          "reply_count",
          "reply_users_count",
          "ts_date",
          "links"
        ]
      },
      "MyPickISlack.IGetUserOutputidim_channel_iddisplay_name": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "User ID",
            "description": "Indicates the ID of the user.\nThis is different from the ID of the DM channel, or IM Channel.\nDM is a communication channel with people in that channel,\nand even if it is 1:1 the user has multiple DM channels,\nso it is not possible to say that the user's ID is a DM channel."
          },
          "im_channel_id": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "im_channel_id",
            "description": "If a user wants to send a DM message to another user,\nthey need to find a channel in im channels that matches their username.\nAnd call the message sending connector.\nHowever, since the purpose of looking up a user is usually to get information about the user or to send a message to the user,\nthis specification is extended to provide the DM channel (= IM channel) ID of the two users in this property when looking up a user.\nIf this value is 'null', then the user's im_channel_id was not found."
          },
          "display_name": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "display name",
            "description": "The user has a separate display name.\nA display name is a name that the user has chosen to show.\nTherefore, it would be best to use this name as a courtesy."
          }
        },
        "required": [
          "id",
          "im_channel_id",
          "display_name"
        ]
      },
      "ISlack.UserGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "ID",
            "description": "The ID of the user group."
          },
          "team_id": {
            "type": "string",
            "title": "Team ID",
            "description": "The ID of the team."
          },
          "is_usergroup": {
            "type": "boolean",
            "title": "Is User Group",
            "description": "Indicates if the object is a user group."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Friendly name of the group."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Purpose of the group (optional)."
          },
          "handle": {
            "type": "string",
            "title": "Handle",
            "description": "Value used to notify group members via a mention without a leading @ sign."
          },
          "is_external": {
            "type": "boolean",
            "title": "Is External",
            "description": "Indicates if the user group is external."
          },
          "date_create": {
            "type": "number",
            "title": "Date Created",
            "description": "Unix timestamp of when the group was created."
          },
          "date_update": {
            "type": "number",
            "title": "Date Updated",
            "description": "Unix timestamp of when the group was last updated."
          },
          "date_delete": {
            "type": "number",
            "title": "Date Deleted",
            "description": "Non-zero value for disabled groups."
          },
          "auto_type": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "const": "admins"
              },
              {
                "const": "owners"
              }
            ],
            "title": "Auto Type",
            "description": "Can be 'admins', 'owners', or null for custom groups."
          },
          "created_by": {
            "type": "string",
            "title": "Created By",
            "description": "User ID of the member who created the group."
          },
          "updated_by": {
            "type": "string",
            "title": "Updated By",
            "description": "User ID of the member who updated the group."
          },
          "deleted_by": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Deleted By",
            "description": "User ID of the member who deleted the group."
          },
          "prefs": {
            "type": "object",
            "properties": {
              "channels": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "title": "Channels",
                "description": "Default channels members will be invited to upon joining."
              },
              "groups": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "title": "Groups",
                "description": "Default private channels members will be invited to upon joining."
              }
            },
            "required": [
              "channels",
              "groups"
            ],
            "title": "Preferences",
            "description": "Contains default channels and groups (private channels) that members of this group will be invited to upon joining."
          },
          "users": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Users",
            "description": "List of user object IDs belonging to the group (optional).\n\nIf you want to look up a particular user, you can find out if this property has that user ID.\nIf you want to see the user's nickname or name that corresponds to the user's ID, refer to the User Inquiry connector."
          },
          "user_count": {
            "type": "number",
            "title": "User Count",
            "description": "Total number of users in the group."
          }
        },
        "required": [
          "id",
          "team_id",
          "is_usergroup",
          "name",
          "handle",
          "is_external",
          "date_create",
          "date_update",
          "date_delete",
          "auto_type",
          "created_by",
          "updated_by",
          "deleted_by",
          "prefs",
          "user_count"
        ],
        "title": "UserGroup",
        "description": "Represents a user group with various properties like ID, name, and user details."
      },
      "ISlack.IGetReplyInput": {
        "type": "object",
        "properties": {
          "ts": {
            "type": "string",
            "x-wrtn-placeholder": "1234567890.123456",
            "x-wrtn-prerequisite": {
              "method": "post",
              "path": "/connector/slack/get-channel-histories",
              "jmesPath": "messages[].{value: ts, label: text}"
            },
            "title": "ts",
            "description": "It means the 'ts' value of the chat you want to look up."
          },
          "channel_type": {
            "oneOf": [
              {
                "const": "private"
              },
              {
                "const": "public"
              },
              {
                "const": "im"
              }
            ],
            "title": "Channel Type",
            "description": "If you know that the channel\nyou want to read the message is public, private, or im,\nmake sure to include it."
          },
          "channel": {
            "oneOf": [
              {
                "type": "string",
                "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/slack/get-public-channels",
                  "jmesPath": "[].{value:id, label:name}"
                }
              },
              {
                "type": "string",
                "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/slack/get-private-channels",
                  "jmesPath": "[].{value:id, label:name}"
                }
              },
              {
                "type": "string",
                "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/slack/get-im-channels",
                  "jmesPath": "[].{value:id, label:name || '개인 채널'}"
                }
              }
            ],
            "title": "channel id",
            "description": "It refers to the channel on which you want to view the conversation history.\nYou need to view the channel first.\nThis is a string that always begins with a capital letter 'C' or 'D'."
          },
          "latestDateTime": {
            "type": "string",
            "format": "date-time",
            "title": "latestDateTime",
            "description": "Only messages before this date-time will be included in results. Default is the current time.\nIt is a value that takes precedence over 'latest', 'latestTimestamp'."
          },
          "oldestDateTime": {
            "type": "string",
            "format": "date-time",
            "title": "oldestDateTime",
            "description": "Only messages after this date-time will be included in results.\nIt is a value that takes precedence over 'oldest', 'oldestTimestamp'."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "slack",
            "x-wrtn-secret-scopes": [
              "channels:read",
              "channels:history",
              "users.profile:read",
              "im:read",
              "im:history",
              "groups:history",
              "groups:read",
              "chat:write",
              "users:read",
              "files:read",
              "usergroups:read",
              "team:read"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 1000,
            "x-wrtn-placeholder": "200",
            "title": "limit",
            "description": "Indicates the number of data to look up at at once.\nIf not entered, use 100 as the default.\nThis should never be null. If you don't have a value, don't forward properties.\n\nIn reality, the value can be from 1 to 1000, so the recommendation is a number over 200.\nIf there is a user's request and there is a section that is cumbersome to page, you can enter 200.\n\nSince it is burdensome for users to inquire too many conversation details,\nit is recommended to page 100 to 200 conversation details at a time if more data is needed.\nAlternatively, it is also helpful to get a date to inquire from the user."
          },
          "cursor": {
            "type": "string",
            "title": "cursor",
            "description": "If you pass the next_cursor or cursor value received from the previous inquiry, you can get additional data from the data.\nIf the next_cursor is not null, you can retrieve additional data.\nIf you don't put a value, it will be recognized as the first page.\nThis should never be null. If you don't have a value, don't forward properties."
          }
        },
        "required": [
          "ts",
          "channel",
          "secretKey"
        ]
      },
      "ISlack.IGetChannelLinkHistoryOutput": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ISlack.ChannelHistory"
            },
            "title": "message",
            "description": "This refers to the history of conversations made on the channel.\nThe closer you are to the 0th in the array, the more recent it is.\nHowever, Slack's message can be modified, so just because it is the 0th, it may not be the last writing/modified."
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MyPickISlack.IGetUserOutputidim_channel_iddisplay_name"
            },
            "title": "members\n\nThis is a list of people who participated in the conversation in this conversation list."
          },
          "usergroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ISlack.UserGroup"
            },
            "title": "usergroups"
          },
          "channel": {
            "type": "object",
            "properties": {
              "name": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ],
                "title": "Channel Name",
                "description": "The channel name is the name of the channel for 'public' and 'private',\nand the name of the user for 'im'.\nIf the channel's name is not found, it is marked null."
              }
            },
            "required": [],
            "title": "Channel information"
          },
          "next_cursor": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "next_cursor",
            "description": "Cursor for pagination\n\nIf the following data exist, the cursor value exists.\nIf you want to see the next data from these data,\nyou can pass this value to the next request condition, `cursor`.\nIf this property is not null, It was not over to find data."
          }
        },
        "required": [
          "messages",
          "members",
          "usergroups",
          "channel",
          "next_cursor"
        ]
      },
      "ISlack.IGetChannelHistoryInput": {
        "type": "object",
        "properties": {
          "channel_type": {
            "oneOf": [
              {
                "const": "private"
              },
              {
                "const": "public"
              },
              {
                "const": "im"
              }
            ],
            "title": "Channel Type",
            "description": "If you know that the channel\nyou want to read the message is public, private, or im,\nmake sure to include it."
          },
          "channel": {
            "oneOf": [
              {
                "type": "string",
                "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/slack/get-public-channels",
                  "jmesPath": "[].{value:id, label:name}"
                }
              },
              {
                "type": "string",
                "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/slack/get-private-channels",
                  "jmesPath": "[].{value:id, label:name}"
                }
              },
              {
                "type": "string",
                "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/slack/get-im-channels",
                  "jmesPath": "[].{value:id, label:name || '개인 채널'}"
                }
              }
            ],
            "title": "channel id",
            "description": "It refers to the channel on which you want to view the conversation history.\nYou need to view the channel first.\nThis is a string that always begins with a capital letter 'C' or 'D'."
          },
          "latestDateTime": {
            "type": "string",
            "format": "date-time",
            "title": "latestDateTime",
            "description": "Only messages before this date-time will be included in results. Default is the current time.\nIt is a value that takes precedence over 'latest', 'latestTimestamp'."
          },
          "oldestDateTime": {
            "type": "string",
            "format": "date-time",
            "title": "oldestDateTime",
            "description": "Only messages after this date-time will be included in results.\nIt is a value that takes precedence over 'oldest', 'oldestTimestamp'."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "slack",
            "x-wrtn-secret-scopes": [
              "channels:read",
              "channels:history",
              "users.profile:read",
              "im:read",
              "im:history",
              "groups:history",
              "groups:read",
              "chat:write",
              "users:read",
              "files:read",
              "usergroups:read",
              "team:read"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 1000,
            "x-wrtn-placeholder": "200",
            "title": "limit",
            "description": "Indicates the number of data to look up at at once.\nIf not entered, use 100 as the default.\nThis should never be null. If you don't have a value, don't forward properties.\n\nIn reality, the value can be from 1 to 1000, so the recommendation is a number over 200.\nIf there is a user's request and there is a section that is cumbersome to page, you can enter 200.\n\nSince it is burdensome for users to inquire too many conversation details,\nit is recommended to page 100 to 200 conversation details at a time if more data is needed.\nAlternatively, it is also helpful to get a date to inquire from the user."
          },
          "cursor": {
            "type": "string",
            "title": "cursor",
            "description": "If you pass the next_cursor or cursor value received from the previous inquiry, you can get additional data from the data.\nIf the next_cursor is not null, you can retrieve additional data.\nIf you don't put a value, it will be recognized as the first page.\nThis should never be null. If you don't have a value, don't forward properties."
          }
        },
        "required": [
          "channel",
          "secretKey"
        ]
      },
      "ISlack.IGetChannelHistoryOutput": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ISlack.ChannelHistory"
            },
            "title": "message",
            "description": "This refers to the history of conversations made on the channel.\nThe closer you are to the 0th in the array, the more recent it is.\nHowever, Slack's message can be modified, so just because it is the 0th, it may not be the last writing/modified."
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MyPickISlack.IGetUserOutputidim_channel_iddisplay_name"
            },
            "title": "members\n\nThis is a list of people who participated in the conversation in this conversation list."
          },
          "usergroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ISlack.UserGroup"
            },
            "title": "usergroups"
          },
          "channel": {
            "type": "object",
            "properties": {
              "name": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ],
                "title": "Channel Name",
                "description": "The channel name is the name of the channel for 'public' and 'private',\nand the name of the user for 'im'.\nIf the channel's name is not found, it is marked null."
              }
            },
            "required": [],
            "title": "Channel information"
          },
          "next_cursor": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "next_cursor",
            "description": "Cursor for pagination\n\nIf the following data exist, the cursor value exists.\nIf you want to see the next data from these data,\nyou can pass this value to the next request condition, `cursor`.\nIf this property is not null, It was not over to find data."
          }
        },
        "required": [
          "messages",
          "members",
          "usergroups",
          "channel",
          "next_cursor"
        ]
      },
      "ISlack.PrivateChannel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "channel name"
          },
          "id": {
            "type": "string",
            "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
            "title": "channel id",
            "description": "The channel ID starts with 'C' and 'D', and for a private DM channel, 'D'.\nBut Sometimes there are channel names that start with a G."
          }
        },
        "required": [
          "name",
          "id"
        ]
      },
      "ISlack.IGetChannelInput": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 1000,
            "x-wrtn-placeholder": "200",
            "deprecated": true,
            "title": "limit"
          },
          "cursor": {
            "type": "string",
            "deprecated": true,
            "title": "cursor"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "slack",
            "x-wrtn-secret-scopes": [
              "channels:read",
              "channels:history",
              "users.profile:read",
              "im:read",
              "im:history",
              "groups:history",
              "groups:read",
              "chat:write",
              "users:read",
              "files:read",
              "usergroups:read",
              "team:read"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "secretKey"
        ],
        "title": "request condition"
      },
      "ISlack.PublicChannel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "channel name"
          },
          "id": {
            "type": "string",
            "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
            "title": "channel id",
            "description": "The channel ID starts with 'C' and 'D', and for a private DM channel, 'D'.\nBut Sometimes there are channel names that start with a G."
          }
        },
        "required": [
          "name",
          "id"
        ]
      },
      "ISlack.ImChannel": {
        "type": "object",
        "properties": {
          "created": {
            "type": "integer",
            "title": "created time"
          },
          "is_im": {
            "const": true,
            "title": "Is it the `im` type or not"
          },
          "is_org_shared": {
            "type": "boolean",
            "title": "is org shared"
          },
          "is_user_deleted": {
            "type": "boolean",
            "title": "is user deleted"
          },
          "priority": {
            "type": "number",
            "title": "priority"
          },
          "user": {
            "type": "string",
            "title": "channel owner's id"
          },
          "context_team_id": {
            "type": "string",
            "title": "channel owner's team id"
          },
          "username": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "username"
          },
          "id": {
            "type": "string",
            "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
            "title": "channel id",
            "description": "The channel ID starts with 'C' and 'D', and for a private DM channel, 'D'.\nBut Sometimes there are channel names that start with a G."
          }
        },
        "required": [
          "created",
          "is_im",
          "is_org_shared",
          "is_user_deleted",
          "priority",
          "user",
          "context_team_id",
          "id"
        ]
      },
      "ISlack.IGetFileOutput": {
        "type": "object",
        "properties": {
          "ok": {
            "type": "boolean"
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MyPickISlack.Filechannelsnameidusercreatedsizecomments_countmimetypeurl_privateurl_private_downloadthumb_1024"
            }
          },
          "paging": {
            "type": "object",
            "properties": {
              "count": {
                "type": "number",
                "title": "current file count"
              },
              "total": {
                "type": "number",
                "title": "total page"
              },
              "page": {
                "type": "number",
                "title": "current page"
              },
              "pages": {
                "type": "number",
                "title": "total page"
              }
            },
            "required": [
              "count",
              "total",
              "page",
              "pages"
            ]
          }
        },
        "required": [
          "ok",
          "files",
          "paging"
        ],
        "title": "File Lookup Results"
      },
      "MyPickISlack.Filechannelsnameidusercreatedsizecomments_countmimetypeurl_privateurl_private_downloadthumb_1024": {
        "type": "object",
        "properties": {
          "channels": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^((C(.*))|(D(.*))|(G(.*)))"
            },
            "title": "channels"
          },
          "name": {
            "type": "string",
            "title": "name"
          },
          "id": {
            "type": "string",
            "title": "id"
          },
          "user": {
            "type": "string",
            "title": "user"
          },
          "created": {
            "type": "number",
            "title": "created"
          },
          "size": {
            "type": "integer",
            "title": "size"
          },
          "comments_count": {
            "type": "integer",
            "title": "comments_count"
          },
          "mimetype": {
            "type": "string",
            "title": "mimetype"
          },
          "url_private": {
            "type": "string",
            "format": "iri",
            "title": "url_private"
          },
          "url_private_download": {
            "type": "string",
            "format": "iri",
            "title": "url_private_download"
          },
          "thumb_1024": {
            "type": "string",
            "format": "iri",
            "title": "thumb_1024"
          }
        },
        "required": [
          "channels",
          "name",
          "id",
          "user",
          "created",
          "size",
          "comments_count",
          "mimetype"
        ]
      },
      "ISlack.IGetFileInput": {
        "type": "object",
        "properties": {
          "page": {
            "type": "number",
            "default": 1,
            "title": "page"
          },
          "channel": {
            "oneOf": [
              {
                "type": "string",
                "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/slack/get-public-channels",
                  "jmesPath": "[].{value:id, label:name}"
                }
              },
              {
                "type": "string",
                "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/slack/get-private-channels",
                  "jmesPath": "[].{value:id, label:name}"
                }
              },
              {
                "type": "string",
                "pattern": "^((C(.*))|(D(.*))|(G(.*)))",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/slack/get-im-channels",
                  "jmesPath": "[].{value:id, label:name || '개인 채널'}"
                }
              }
            ],
            "title": "Channel ID to browse the file\n\nIf not specified, the entire Slack workspace will be explored."
          },
          "user": {
            "type": "string",
            "x-wrtn-prerequisite": {
              "method": "post",
              "path": "/connector/slack/get-users",
              "jmesPath": "users[].{value: id, label: display_name}"
            },
            "title": "user id\n\nIf you only want to check files sent by a particular user, enter your ID."
          },
          "types": {
            "type": "object",
            "properties": {
              "spaces": {
                "type": "boolean",
                "title": "spaces",
                "description": "Slack's Post is a feature that allows users to write and share long forms of documents or writings.\nIt is more formatting free than regular messages and can contain code blocks or sections, which are useful for creating structured documents.\nSlack often categorizes these documented files into spaces, helping to share knowledge or information easily within the team."
              },
              "snippets": {
                "type": "boolean",
                "title": "snippets",
                "description": "Snippets are used to share short code or text snippets.\nThey are usually useful when programmers share short code blocks or snippets of log files with their teams.\nSnippets quickly uploads text or code, and allows others to refer to or copy the content. In Slack, these files are classified into a file type called snippets."
              },
              "images": {
                "type": "boolean",
                "title": "images"
              },
              "gdocs": {
                "type": "boolean",
                "title": "gdocs\n\nGoogle docs"
              },
              "zips": {
                "type": "boolean",
                "title": "zips"
              },
              "pdfs": {
                "type": "boolean",
                "title": "pdfs"
              }
            },
            "required": [],
            "title": "file types to include",
            "description": "The file types you may encounter include (but are not limited to):\nIf you want to look up all of them regardless of the file type, you can ignore the properties.\nIf the file type is important, you can specify the file type property as true inside the object."
          },
          "latestDateTime": {
            "type": "string",
            "format": "date-time",
            "title": "latestDateTime",
            "description": "Only files before this date-time will be included in results. Default is the current time.\nIt is a value that takes precedence over 'latest', 'latestTimestamp'."
          },
          "oldestDateTime": {
            "type": "string",
            "format": "date-time",
            "title": "oldestDateTime",
            "description": "Only files after this date-time will be included in results.\nIt is a value that takes precedence over 'oldest', 'oldestTimestamp'."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "slack",
            "x-wrtn-secret-scopes": [
              "channels:read",
              "channels:history",
              "users.profile:read",
              "im:read",
              "im:history",
              "groups:history",
              "groups:read",
              "chat:write",
              "users:read",
              "files:read",
              "usergroups:read",
              "team:read"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 1000,
            "x-wrtn-placeholder": "200",
            "title": "limit",
            "description": "Indicates the number of data to look up at at once.\nIf not entered, use 100 as the default.\nThis should never be null. If you don't have a value, don't forward properties.\n\nIn reality, the value can be from 1 to 1000, so the recommendation is a number over 200.\nIf there is a user's request and there is a section that is cumbersome to page, you can enter 200.\n\nSince it is burdensome for users to inquire too many conversation details,\nit is recommended to page 100 to 200 conversation details at a time if more data is needed.\nAlternatively, it is also helpful to get a date to inquire from the user."
          }
        },
        "required": [
          "secretKey"
        ]
      },
      "ISlack.IGetUserGroupOutput": {
        "type": "object",
        "properties": {
          "ok": {
            "type": "boolean",
            "title": "ok"
          },
          "usergroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ISlack.UserGroup"
            },
            "title": "usergroups"
          }
        },
        "required": [
          "ok",
          "usergroups"
        ]
      },
      "ISlack.ISecret": {
        "type": "object",
        "properties": {
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "slack",
            "x-wrtn-secret-scopes": [
              "channels:read",
              "channels:history",
              "users.profile:read",
              "im:read",
              "im:history",
              "groups:history",
              "groups:read",
              "chat:write",
              "users:read",
              "files:read",
              "usergroups:read",
              "team:read"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "secretKey"
        ]
      },
      "ISlack.IGetMyInfoOutput": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "user_id": {
                "type": "string",
                "title": "User ID",
                "description": "Request's User ID.\nThis is identifier of requester from others."
              },
              "team_id": {
                "type": "string",
                "title": "Team ID"
              },
              "team": {
                "type": "string",
                "title": "Team Name"
              },
              "name": {
                "type": "string",
                "title": "User Name",
                "description": "Requester's User Name.\nBut, This is not unique. so This can't be used as an identifier."
              }
            },
            "required": [
              "user_id",
              "team_id",
              "team",
              "name"
            ],
            "title": "user"
          }
        },
        "required": [
          "user"
        ]
      },
      "ISlack.IDeleteMessageInput": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "channel": {
                  "type": "string",
                  "title": "Channel ID"
                },
                "user_id": {
                  "type": "string",
                  "x-wrtn-prerequisite": {
                    "method": "patch",
                    "path": "connector/slack/me",
                    "jmesPath": "user.{value: id, label: name}"
                  },
                  "title": "User ID",
                  "description": "User ID the of message.\nThis property is for checking log.\nyou can use only the `user_id` of messages matched requester's `user_id`"
                },
                "ts": {
                  "type": "string",
                  "x-wrtn-placeholder": "1405894322.002768",
                  "title": "timestamp",
                  "description": "for example, `1721804246.083609`.\nThis is the time value expression method used by Slack.\nYou must put the ts of the message sent by requester not others.\nyou can use only the `ts` of messages matched requester's `user_id`"
                }
              },
              "required": [
                "channel",
                "user_id",
                "ts"
              ]
            },
            "title": "Message Info List",
            "description": "Even if the user wants to delete \"all\" or \"every\" messages, you can delete only requester's messages."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "slack",
            "x-wrtn-secret-scopes": [
              "channels:read",
              "channels:history",
              "users.profile:read",
              "im:read",
              "im:history",
              "groups:history",
              "groups:read",
              "chat:write",
              "users:read",
              "files:read",
              "usergroups:read",
              "team:read"
            ],
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "messages",
          "secretKey"
        ]
      }
    }
  },
  "tags": [
    {
      "name": "Slack"
    }
  ],
  "x-samchon-emended": true
}