{
  "openapi": "3.1.0",
  "servers": [
    {
      "url": "https://studio-connector-api.wrtn.ai",
      "description": "Production Server"
    },
    {
      "url": "https://studio-connector-poc.dev.wrtn.club",
      "description": "Develop Server"
    },
    {
      "url": "http://localhost:3003",
      "description": "Local Server"
    }
  ],
  "info": {
    "title": "유튜브 검색",
    "summary": "유튜브에 원하는 영상을 검색해요",
    "description": "유튜브에 원하는 영상을 검색해요",
    "version": "0.1.429",
    "license": {
      "name": "AGPL-3.0-only"
    }
  },
  "paths": {
    "/connector/youtube-search": {
      "post": {
        "summary": "YouTube video search",
        "description": "Get YouTube video search results\n\nThe search results have the video title and link.\n\nIf most users are going to use this feature, they probably want to watch the video, so it's better to provide a URL.\n\nIn order to filter the period that the user wants, you should use the response field \"published_date\".\n\nFor example, if the user wants to retrieve only this year's videos, you should exclude videos that were uploaded in a period that the user does not want, such as \"1 year ago\" or \"2 years ago\" with a published_date.\n\nIt's great to use with the /transcript endpoint when summarizing videos, analyzing content, extracting keywords, etc.\n\nExtract the URL from the YouTube video information obtained from the execution result of the corresponding function and use it as the input of the /transcript endpoint.\n\nBased on the transcripts obtained from the execution result of the /transcript endpoint, perform tasks such as summarizing videos, analyzing content, and extracting keywords.\n\nExample Use Cases:\nProduct Reviews: Extract product names, pros, cons, and recommendations from air purifier review videos.\nTutorials: Create text-based tutorials or step-by-step guides from instructional videos.",
        "tags": [
          "Youtube"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Conditions for YouTube video search",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IYoutubeSearch.ISearchInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "List of YouTube video search results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IYoutubeSearch.ISearchOutput"
                  }
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "youtube_search",
          "search"
        ],
        "x-samchon-controller": "YoutubeSearchController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/fulls/Youtube_full.svg",
        "x-wrtn-standalone": true
      }
    },
    "/connector/youtube-search/official": {
      "post": {
        "summary": "YouTube video search (official)",
        "description": "Get YouTube video search results (official)\n\nThis function use the official YouTube API to search for videos.\n\nIf you want users to use the official YouTube API, use this function.\n\nIf you think you need to call an endpoint that retrieves YouTube video captions without explicitly specifying that you want to use the official YouTube API, call this endpoint.\nFor example, in a scenario like \"Get the content of the Galaxy Watch 7 review videos. Then, organize the user reviews of the product into pros and cons based on the content and organize which comments were made by whom. Please write the comments as they were made.\",\nyou need to retrieve the video content and the YouTuber's comments. This can be figured out from the YouTube video transcriptions, so you can see that you need to call an endpoint that retrieves YouTube video transcriptions. In this case, you should call this endpoint.\n\nThe search results have the video title and link.\n\nIf most users are going to use this feature, they probably want to watch the video, so it's better to provide a URL.\n\nIn order to filter the period that the user wants, you should use the response field \"published_date\".\n\nFor example, if the user wants to retrieve only this year's videos, you should exclude videos that were uploaded in a period that the user does not want, such as \"1 year ago\" or \"2 years ago\" with a published_date.\n\nIt's great to use with the /transcript endpoint when summarizing videos, analyzing content, extracting keywords, etc.\n\nExtract the URL from the YouTube video information obtained from the execution result of the corresponding function and use it as the input of the /transcript endpoint.\n\nBased on the transcripts obtained from the execution result of the /transcript endpoint, perform tasks such as summarizing videos, analyzing content, and extracting keywords.\n\nExample Use Cases:\nProduct Reviews: Extract product names, pros, cons, and recommendations from air purifier review videos.\nTutorials: Create text-based tutorials or step-by-step guides from instructional videos.",
        "tags": [
          "Youtube"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IYoutubeSearch.IYoutubeSearchVideoRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IYoutubeSearch.IYoutubeSearchVideoResponse"
                  }
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "youtube_search",
          "official",
          "searchVideo"
        ],
        "x-samchon-controller": "YoutubeSearchController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/fulls/Youtube_full.svg"
      }
    },
    "/connector/youtube-search/transcript": {
      "post": {
        "summary": "Get Youtube video transcripts",
        "description": "Extracts YouTube Video Transcripts\n\nThis function retrieves the text transcript of a YouTube video.\n\nIt's essential for tasks like video summarization, content analysis, and keyword extraction.\n\nBy analyzing the transcript, you can identify key points, main topics, and sentiment expressed in the video.\n\nExample Use Cases:\nProduct Reviews: Extract product names, pros, cons, and recommendations from air purifier review videos.\nTutorials: Create text-based tutorials or step-by-step guides from instructional videos.",
        "tags": [
          "Youtube"
        ],
        "parameters": [],
        "requestBody": {
          "description": "video url",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IYoutubeSearch.ITranscriptYoutubeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "transcripts of video",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IYoutubeSearch.ITranscriptYoutubeResponse"
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "youtube_search",
          "transcript"
        ],
        "x-samchon-controller": "YoutubeSearchController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/fulls/Youtube_full.svg"
      }
    }
  },
  "components": {
    "schemas": {
      "IYoutubeSearch.ISearchOutput": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "title": "YouTube video title",
            "description": "Title of the YouTube video that appears in the search results."
          },
          "link": {
            "type": "string",
            "format": "iri",
            "title": "YouTube video link",
            "description": "Links to YouTube videos that appear in search results."
          },
          "thumbnail": {
            "type": "string",
            "format": "iri",
            "title": "Thumbnail image for YouTube videos",
            "description": "Thumbnail image for YouTube videos."
          },
          "view_count": {
            "type": "integer",
            "title": "YouTube video views",
            "description": "YouTube video views."
          },
          "channel_name": {
            "type": "string",
            "title": "Channel name",
            "description": "Channel name of YouTube videos that appear in search results."
          },
          "channel_link": {
            "type": "string",
            "format": "iri",
            "title": "Channel link",
            "description": "Link to the YouTube channel that appears in the search results."
          },
          "published_date": {
            "type": "string",
            "title": "YouTube video published date",
            "description": "Date the YouTube video was published.\nex) 1 year ago"
          }
        },
        "required": [
          "title",
          "link",
          "thumbnail",
          "view_count",
          "channel_name",
          "channel_link",
          "published_date"
        ],
        "title": "YouTube search results"
      },
      "IYoutubeSearch.ISearchInput": {
        "type": "object",
        "properties": {
          "and_keywords": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1,
              "x-wrtn-placeholder": "뤼튼"
            },
            "minItems": 1,
            "title": "Must be included keywords",
            "description": "Keywords that must be included in search results."
          },
          "or_keywords": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1,
              "x-wrtn-placeholder": "스튜디오"
            },
            "title": "Keywords that you would like to see included",
            "description": "Keywords that you would like to see included in your search results."
          },
          "not_keywords": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1,
              "x-wrtn-placeholder": "폭력"
            },
            "title": "Keywords that should not be included",
            "description": "Keywords that should not be included in search results."
          }
        },
        "required": [
          "and_keywords"
        ],
        "title": "YouTube search conditions"
      },
      "IYoutubeSearch.IYoutubeSearchVideoResponse": {
        "type": "object",
        "properties": {
          "videoId": {
            "type": "string",
            "title": "videoId",
            "description": "The Unique ID of the YouTube video."
          },
          "title": {
            "type": "string",
            "title": "YouTube video title",
            "description": "Title of the YouTube video that appears in the search results."
          },
          "link": {
            "type": "string",
            "format": "iri",
            "title": "YouTube video link",
            "description": "Links to YouTube videos that appear in search results."
          },
          "channel_name": {
            "type": "string",
            "title": "YouTube video channel information",
            "description": "Channel information of YouTube videos that appear in search results."
          },
          "channel_link": {
            "type": "string",
            "format": "iri",
            "title": "YouTube Channel Link",
            "description": "Links to YouTube channels that appear in search results."
          },
          "published_date": {
            "type": "string",
            "title": "YouTube video published date",
            "description": "Date the YouTube video was published.\nex) 1 year ago"
          },
          "description": {
            "type": "string",
            "title": "YouTube video description",
            "description": "Description of YouTube video."
          },
          "thumbnail": {
            "type": "string",
            "format": "iri",
            "title": "Thumbnail image information for YouTube videos",
            "description": "Thumbnail image information for YouTube videos."
          }
        },
        "required": [
          "videoId",
          "title",
          "link",
          "channel_name",
          "channel_link",
          "published_date",
          "thumbnail"
        ]
      },
      "IYoutubeSearch.IYoutubeSearchVideoRequest": {
        "type": "object",
        "properties": {
          "and_keywords": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1,
              "x-wrtn-placeholder": "뤼튼"
            },
            "minItems": 1,
            "title": "Must be included keywords",
            "description": "Keywords that must be included in search results."
          },
          "or_keywords": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1,
              "x-wrtn-placeholder": "스튜디오"
            },
            "title": "Keywords that you would like to see included",
            "description": "Keywords that you would like to see included in your search results."
          },
          "not_keywords": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1,
              "x-wrtn-placeholder": "폭력"
            },
            "title": "Keywords that should not be included",
            "description": "Keywords that should not be included in search results."
          },
          "publishedAfter": {
            "type": "string",
            "format": "date-time",
            "title": "Published after",
            "description": "Indicates that video search results should only include resources created on or after the specified time."
          },
          "publishedBefore": {
            "type": "string",
            "format": "date-time",
            "title": "Published before",
            "description": "Indicates that video search results should only include resources created before the specified time."
          }
        },
        "required": [
          "and_keywords"
        ]
      },
      "IYoutubeSearch.ITranscriptYoutubeResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Video ID",
            "description": "Youtube video Id"
          },
          "title": {
            "type": "string",
            "title": "title",
            "description": "Youtube video title"
          },
          "channelName": {
            "type": "string",
            "title": "Channel Name",
            "description": "Youtube Channel Name"
          },
          "uploadedAt": {
            "type": "string",
            "title": "Uploaded At",
            "description": "Youtube video uploaded at"
          },
          "viewCount": {
            "type": "number",
            "title": "View Count",
            "description": "Youtube video view count"
          },
          "captionLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IYoutubeSearch.IYoutubeTranscriptItem"
            },
            "title": "Caption Lines",
            "description": "Youtube video caption lines"
          },
          "hasCaption": {
            "type": "boolean",
            "title": "Whether to have a caption",
            "description": "Determines whether to have a caption."
          },
          "hasAutoGeneratedCaption": {
            "type": "boolean",
            "title": "Whether to auto-generate subtitles",
            "description": "Determines whether subtitles are automatically generated."
          }
        },
        "required": [
          "id",
          "title",
          "channelName",
          "uploadedAt",
          "viewCount",
          "captionLines",
          "hasCaption",
          "hasAutoGeneratedCaption"
        ],
        "title": "YouTube video transcript information"
      },
      "IYoutubeSearch.IYoutubeTranscriptItem": {
        "type": "object",
        "properties": {
          "start": {
            "type": "number"
          },
          "duration": {
            "type": "number"
          },
          "text": {
            "type": "string"
          }
        },
        "required": [
          "start",
          "duration",
          "text"
        ]
      },
      "IYoutubeSearch.ITranscriptYoutubeRequest": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "iri",
            "title": "YouTube video URL",
            "description": "YouTube URL to retrieve transcripts"
          }
        },
        "required": [
          "url"
        ],
        "title": "YouTube URL to retrieve transcripts"
      }
    }
  },
  "tags": [
    {
      "name": "Youtube"
    }
  ],
  "x-samchon-emended": true
}