{
  "openapi": "3.1.0",
  "servers": [
    {
      "url": "https://studio-connector-api.wrtn.ai",
      "description": "Production Server"
    },
    {
      "url": "https://studio-connector-poc.dev.wrtn.club",
      "description": "Develop Server"
    },
    {
      "url": "http://localhost:3003",
      "description": "Local Server"
    }
  ],
  "info": {
    "title": "notion",
    "version": "0.1.451",
    "description": "wrtn-ecosystem connectors and sdk",
    "license": {
      "name": "AGPL-3.0-only"
    }
  },
  "paths": {
    "/connector/notion/page/block": {
      "delete": {
        "summary": "Delete a block",
        "description": "Delete a block\n\nSets a Block object, including page blocks,\nto archived: true using the ID specified. Note: in the Notion UI application, this moves the block to the \"Trash\" where it can still be accessed and restored.",
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/INotion.IDeleteBlockInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "notion",
          "page",
          "block",
          "deleteBlock"
        ],
        "x-samchon-controller": "NotionController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icons/notion.svg"
      }
    },
    "/connector/notion/page/markdown": {
      "post": {
        "summary": "Append block by markdown format",
        "description": "Append block by markdown format\n\nYou can add blocks to the page immediately with only the markdown grammar.\nYou can create pages more effectively than other connectors, so you can prioritize this.\nIf there are unique blocks of the note that cannot be created with the grammar of the markdown, it must be associated with other block generation connectors.\n\nSince users may not know the markdown grammar, it is more desirable to use the markdown grammar instead of guiding them.\nMarkdown supports text and heading 1, 2, 3, and various grammar such as table or bull list, number list, image attachment, boldface, italics, etc.",
        "tags": [
          "Notion"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/INotion.IAppendPageByMarkdownInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "title": "page id",
                          "description": "Unique id of the generated page"
                        },
                        "link": {
                          "type": "string",
                          "format": "iri",
                          "title": "page link"
                        }
                      },
                      "required": [
                        "id",
                        "link"
                      ]
                    },
                    {
                      "$ref": "#/components/schemas/INotion.Common.IError"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "notion",
          "page",
          "markdown",
          "appendBlocksByMarkdown"
        ],
        "x-samchon-controller": "NotionController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icons/notion.svg"
      }
    },
    "/connector/notion/page/file": {
      "post": {
        "summary": "Append an file type child node",
        "description": "Append an file type child node\n\nNotion is a very complex type, so you have to create a page in a block coding manner.\nTherefore, this connector is designed to create a page by taking only the page ID and one block of the corresponding block and continuously adding it to the bottom.\nThe type of block you can put in here is `file`.\n\nUploading a file exposes it to the Notion page as an icon in the file format, but there is no Preview.\nIf you want the internal elements to be seen as soon as you enter the page, it is better to create the image, pdf format for each format, and consider embed for other formats.\n\nCalling this connector requires the correct page ID, so it should only be called if you have previously created a page to obtain that ID, viewed the page, or obtained a link or page ID from the user in advance.",
        "tags": [
          "Notion"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/INotion.ICreateChildContentTypeFileInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "notion",
          "page",
          "file",
          "createFile"
        ],
        "x-samchon-controller": "NotionController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icons/notion.svg"
      }
    },
    "/connector/notion/page/embed": {
      "post": {
        "summary": "Append an embed type child node",
        "description": "Append an embed type child node\n\nNotion is a very complex type, so you have to create a page in a block coding manner.\nTherefore, this connector is designed to create a page by taking only the page ID and one block of the corresponding block and continuously adding it to the bottom.\nThe type of block you can put in here is `embed`.\n\nThis is suitable when you want an internal element to be rendered immediately, such as an imprame within a page.\n\nCalling this connector requires the correct page ID, so it should only be called if you have previously created a page to obtain that ID, viewed the page, or obtained a link or page ID from the user in advance.",
        "tags": [
          "Notion"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/INotion.ICreateChildContentTypeEmbedInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "notion",
          "page",
          "embed",
          "createEmbed"
        ],
        "x-samchon-controller": "NotionController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icons/notion.svg"
      }
    },
    "/connector/notion/page/bookmark": {
      "post": {
        "summary": "Append an bookmark type child node",
        "description": "Append an bookmark type child node\n\nNotion is a very complex type, so you have to create a page in a block coding manner.\nTherefore, this connector is designed to create a page by taking only the page ID and one block of the corresponding block and continuously adding it to the bottom.\nThe type of block you can put in here is `bookmark`.\n\nBookmarks are visually better and more organized because they have previews, images, and explanations than just saving url as text.\n\nCalling this connector requires the correct page ID, so it should only be called if you have previously created a page to obtain that ID, viewed the page, or obtained a link or page ID from the user in advance.",
        "tags": [
          "Notion"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/INotion.ICreateChildContentTypeBookmarkInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "notion",
          "page",
          "bookmark",
          "createBookmark"
        ],
        "x-samchon-controller": "NotionController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icons/notion.svg"
      }
    },
    "/connector/notion/page/image": {
      "post": {
        "summary": "Append an image type child node",
        "description": "Append an image type child node\n\nNotion is a very complex type, so you have to create a page in a block coding manner.\nTherefore, this connector is designed to create a page by taking only the page ID and one block of the corresponding block and continuously adding it to the bottom.\nThe type of block you can put in here is `image`.\n\nimage file's extension is one of: 'bmp', 'gif', 'heic', 'jpg', 'jpeg', 'png', 'svg', 'tif', 'tiff'.\n\nCalling this connector requires the correct page ID, so it should only be called if you have previously created a page to obtain that ID, viewed the page, or obtained a link or page ID from the user in advance.",
        "tags": [
          "Notion"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/INotion.ICreateChildContentTypeImageInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "notion",
          "page",
          "image",
          "createImage"
        ],
        "x-samchon-controller": "NotionController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icons/notion.svg"
      }
    },
    "/connector/notion/page/video": {
      "post": {
        "summary": "Append an video type child node",
        "description": "Append an video type child node\n\nNotion is a very complex type, so you have to create a page in a block coding manner.\nTherefore, this connector is designed to create a page by taking only the page ID and one block of the corresponding block and continuously adding it to the bottom.\nThe type of block you can put in here is `video`.\n\nvideo file must be one of: 'amv' ,'asf' ,'avi' ,'f4v' ,'flv' ,'gifv' ,'mkv' ,'mov' ,'mpg' ,'mpeg' ,'mpv' ,'mp4' ,'m4v' ,'qt' ,'wmv'\nOR\nYouTube video links that include embed or watch.\nE.g. https://www.youtube.com/watch?v=[id], https://www.youtube.com/embed/[id]\n\nCalling this connector requires the correct page ID, so it should only be called if you have previously created a page to obtain that ID, viewed the page, or obtained a link or page ID from the user in advance.",
        "tags": [
          "Notion"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/INotion.ICreateChildContentTypeVideoInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "notion",
          "page",
          "video",
          "createVideo"
        ],
        "x-samchon-controller": "NotionController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icons/notion.svg"
      }
    },
    "/connector/notion/page/pdf": {
      "post": {
        "summary": "Append an pdf type child node",
        "description": "Append an pdf type child node\n\nNotion is a very complex type, so you have to create a page in a block coding manner.\nTherefore, this connector is designed to create a page by taking only the page ID and one block of the corresponding block and continuously adding it to the bottom.\nThe type of block you can put in here is `pdf`.\n\nCalling this connector requires the correct page ID, so it should only be called if you have previously created a page to obtain that ID, viewed the page, or obtained a link or page ID from the user in advance.",
        "tags": [
          "Notion"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/INotion.ICreateChildContentTypePdfInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "notion",
          "page",
          "pdf",
          "createPdf"
        ],
        "x-samchon-controller": "NotionController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icons/notion.svg"
      }
    },
    "/connector/notion/page/code": {
      "post": {
        "summary": "Append an code type child node",
        "description": "Append an code type child node\n\nNotion is a very complex type, so you have to create a page in a block coding manner.\nTherefore, this connector is designed to create a page by taking only the page ID and one block of the corresponding block and continuously adding it to the bottom.\nThe type of block you can put in here is `code`.\n\nCalling this connector requires the correct page ID, so it should only be called if you have previously created a page to obtain that ID, viewed the page, or obtained a link or page ID from the user in advance.",
        "deprecated": true,
        "tags": [
          "Notion"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/INotion.ICreateChildContentTypeCodeInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "notion",
          "page",
          "code",
          "createCode"
        ],
        "x-samchon-controller": "NotionController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icons/notion.svg"
      }
    },
    "/connector/notion/page/equation": {
      "post": {
        "summary": "Append an equation type child node",
        "description": "Append an equation type child node\n\nNotion is a very complex type, so you have to create a page in a block coding manner.\nTherefore, this connector is designed to create a page by taking only the page ID and one block of the corresponding block and continuously adding it to the bottom.\nThe type of block you can put in here is `equation`.\n\nCalling this connector requires the correct page ID, so it should only be called if you have previously created a page to obtain that ID, viewed the page, or obtained a link or page ID from the user in advance.",
        "tags": [
          "Notion"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/INotion.ICreateChildContentTypeEquationInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "notion",
          "page",
          "equation",
          "createEquation"
        ],
        "x-samchon-controller": "NotionController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icons/notion.svg"
      }
    },
    "/connector/notion/page/divider": {
      "post": {
        "summary": "Append an divider type child node",
        "description": "Append an divider type child node\n\nNotion is a very complex type, so you have to create a page in a block coding manner.\nTherefore, this connector is designed to create a page by taking only the page ID and one block of the corresponding block and continuously adding it to the bottom.\nThe type of block you can put in here is `divider`.\n\nCalling this connector requires the correct page ID, so it should only be called if you have previously created a page to obtain that ID, viewed the page, or obtained a link or page ID from the user in advance.",
        "tags": [
          "Notion"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/INotion.ICreateChildContentTypeDividerInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "notion",
          "page",
          "divider",
          "createDivider"
        ],
        "x-samchon-controller": "NotionController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icons/notion.svg"
      }
    },
    "/connector/notion/page/table_of_contents": {
      "post": {
        "summary": "Append an table_of_contents type child node",
        "description": "Append an table_of_contents type child node\n\nNotion is a very complex type, so you have to create a page in a block coding manner.\nTherefore, this connector is designed to create a page by taking only the page ID and one block of the corresponding block and continuously adding it to the bottom.\nThe type of block you can put in here is `table_of_contents`.\n\nCalling this connector requires the correct page ID, so it should only be called if you have previously created a page to obtain that ID, viewed the page, or obtained a link or page ID from the user in advance.",
        "tags": [
          "Notion"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/INotion.ICreateChildContentTypeTableOfContentsInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "notion",
          "page",
          "table_of_contents",
          "createTableOfContents"
        ],
        "x-samchon-controller": "NotionController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icons/notion.svg"
      }
    },
    "/connector/notion/page/link_to_page": {
      "post": {
        "summary": "Append an link_to_page type child node",
        "description": "Append an link_to_page type child node\n\nNotion is a very complex type, so you have to create a page in a block coding manner.\nTherefore, this connector is designed to create a page by taking only the page ID and one block of the corresponding block and continuously adding it to the bottom.\nThe type of block you can put in here is `link_to_page`.\n\nCalling this connector requires the correct page ID, so it should only be called if you have previously created a page to obtain that ID, viewed the page, or obtained a link or page ID from the user in advance.",
        "tags": [
          "Notion"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/INotion.ICreateChildContentTypeLinkToPageInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "notion",
          "page",
          "link_to_page",
          "createLinkToPage"
        ],
        "x-samchon-controller": "NotionController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icons/notion.svg"
      }
    },
    "/connector/notion/page/toggle": {
      "post": {
        "summary": "Append an toggle type child node",
        "description": "Append an toggle type child node\n\nNotion is a very complex type, so you have to create a page in a block coding manner.\nTherefore, this connector is designed to create a page by taking only the page ID and one block of the corresponding block and continuously adding it to the bottom.\nThe type of block you can put in here is `toggle`.\n\nCalling this connector requires the correct page ID, so it should only be called if you have previously created a page to obtain that ID, viewed the page, or obtained a link or page ID from the user in advance.",
        "tags": [
          "Notion"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/INotion.ICreateChildContentTypeToggleInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {}
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "notion",
          "page",
          "toggle",
          "createToggle"
        ],
        "x-samchon-controller": "NotionController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icons/notion.svg"
      }
    },
    "/connector/notion/get/page/contents": {
      "patch": {
        "summary": "Read the contents of a Notion page",
        "description": "Read the contents of a Notion page.\nReads the contents of a Notion page in Markdown format.\n\nRead Notion page contents",
        "tags": [
          "Notion"
        ],
        "parameters": [],
        "requestBody": {
          "description": "pageId",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/INotion.IReadPageContentInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/INotion.IReadPageContentOutput"
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "notion",
          "get",
          "page",
          "contents",
          "readPageContents"
        ],
        "x-samchon-controller": "NotionController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icons/notion.svg"
      }
    },
    "/connector/notion/get/page": {
      "patch": {
        "summary": "Retrieve a list of pages",
        "description": "Retrieve a list of all pages in your Notion workspace",
        "tags": [
          "Notion"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/INotion.ISecret"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Page information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/INotion.IReadPageOutput"
                  }
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "notion",
          "get",
          "page",
          "readPageList"
        ],
        "x-samchon-controller": "NotionController",
        "x-wrtn-standalone": true,
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icons/notion.svg"
      }
    },
    "/connector/notion/get/users": {
      "patch": {
        "summary": "Retrieve the list of users",
        "description": "Retrieve the list of users in the workspace",
        "tags": [
          "Notion"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/INotion.ISecret"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/INotion.IUserOutput"
                  }
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "notion",
          "get",
          "users",
          "getUsers"
        ],
        "x-samchon-controller": "NotionController",
        "x-wrtn-standalone": true,
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icons/notion.svg"
      }
    },
    "/connector/notion/get/database-info": {
      "patch": {
        "summary": "Query the database list",
        "description": "Query the database list to create items in the database",
        "tags": [
          "Notion"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/INotion.ISecret"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A list of database information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/INotion.IDatabaseInfo"
                  }
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "notion",
          "get",
          "database_info",
          "getDatabaseListInfo"
        ],
        "x-samchon-controller": "NotionController",
        "x-wrtn-standalone": true,
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icons/notion.svg"
      }
    },
    "/connector/notion/get/database-info/{databaseId}": {
      "patch": {
        "summary": "Retrieves database information",
        "description": "Retrieves database information to create items in the database",
        "tags": [
          "Notion"
        ],
        "parameters": [
          {
            "name": "databaseId",
            "in": "path",
            "schema": {
              "type": "string",
              "x-wrtn-prerequisite": {
                "method": "patch",
                "path": "/connector/notion/get/database-info",
                "jmesPath": "[].{value:id, label:title || ''}"
              }
            },
            "required": true,
            "description": " Unique id of the database"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/INotion.ISecret"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Database information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/INotion.IDatabaseInfo"
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "notion",
          "get",
          "database_info",
          "getDatabaseInfo"
        ],
        "x-samchon-controller": "NotionController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icons/notion.svg"
      }
    },
    "/connector/notion/get-page-by-title": {
      "patch": {
        "summary": "Search for pages by title",
        "description": "Search for pages by title",
        "tags": [
          "Notion"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Page title",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/INotion.IFindPageOrDatabaseItemInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Searched page information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/INotion.IFindPageByTitleOutput"
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "notion",
          "get_page_by_title",
          "getPageByTitle"
        ],
        "x-samchon-controller": "NotionController",
        "x-wrtn-standalone": true,
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icons/notion.svg"
      }
    },
    "/connector/notion/find-item-list/{databaseId}": {
      "patch": {
        "summary": "Retrieve a list of database items",
        "description": "Retrieve a list of items that exist in a table database",
        "tags": [
          "Notion"
        ],
        "parameters": [
          {
            "name": "databaseId",
            "in": "path",
            "schema": {
              "type": "string",
              "x-wrtn-prerequisite": {
                "method": "patch",
                "path": "/connector/notion/get/database-info",
                "jmesPath": "[].{value:id, label:title || ''}"
              }
            },
            "required": true,
            "description": " Unique id of the database"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/INotion.ISecret"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of retrieved database items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/INotion.IDatabaseItemOutput"
                  }
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "notion",
          "find_item_list",
          "getDatabaseItemList"
        ],
        "x-samchon-controller": "NotionController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icons/notion.svg"
      }
    },
    "/connector/notion/find-item/{databaseId}": {
      "patch": {
        "summary": "Retrieval of database items",
        "description": "Retrieves an item that exists in a table database",
        "tags": [
          "Notion"
        ],
        "parameters": [
          {
            "name": "databaseId",
            "in": "path",
            "schema": {
              "type": "string",
              "x-wrtn-prerequisite": {
                "method": "patch",
                "path": "/connector/notion/get/database-info",
                "jmesPath": "[].{value:id, label:title || ''}"
              }
            },
            "required": true,
            "description": " Unique id of the database"
          }
        ],
        "requestBody": {
          "description": "Information required to retrieve database items",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/INotion.IFindDatabaseItemInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Information on retrieved database items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/INotion.IDatabaseItemOutput"
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "notion",
          "find_item",
          "getDatabaseItem"
        ],
        "x-samchon-controller": "NotionController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icons/notion.svg"
      }
    },
    "/connector/notion/markdown": {
      "post": {
        "summary": "Create page by markdown format",
        "description": "Create page by markdown format\n\nReceive the markdown text and immediately create it as a notation page.\nYou can create pages more effectively than other connectors, so you can prioritize this.\nIf there are unique blocks of the note that cannot be created with the grammar of the markdown, it must be associated with other block generation connectors.\n\nSince users may not know the markdown grammar, it is more desirable to use the markdown grammar instead of guiding them.\nMarkdown supports text and heading 1, 2, 3, and various grammar such as table or bull list, number list, image attachment, boldface, italics, etc.\n\nSince Notion prioritizes accessible pages during authentication, creating pages must be sub-pages within the page, which means that there must be a parent page.",
        "tags": [
          "Notion"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/INotion.ICreatePageByMarkdownInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/INotion.Common.IError"
                    },
                    {
                      "$ref": "#/components/schemas/INotion.___ICreatePageOutput"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "notion",
          "markdown",
          "createPageByMarkdown"
        ],
        "x-samchon-controller": "NotionController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icons/notion.svg"
      }
    },
    "/connector/notion/page/title": {
      "put": {
        "summary": "Update Notion Page Title",
        "description": "Update Notion Page Title",
        "tags": [
          "Notion"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/INotion.IUpdateNotionTitleInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/INotion.Common.IError"
                    },
                    {
                      "$ref": "#/components/schemas/INotion.___ICreatePageOutput"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "notion",
          "page",
          "title",
          "updatePageTitle"
        ],
        "x-samchon-controller": "NotionController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icons/notion.svg"
      }
    },
    "/connector/notion/create-gallery-database": {
      "post": {
        "summary": "Create a Notion Gallery Database",
        "description": "Create a gallery view database for notion.\n\nIt is not possible to create a gallery view at once, and you must change the view to a gallery directly.\nThis endpoint must not be used to create each items.\nThis endpoint is only used to create a database.\nCreating a database is different from adding items to a database.",
        "tags": [
          "Notion"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/INotion.ICreateGalleryDatabaseInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/INotion.ICreateGalleryDatabaseOutput"
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "notion",
          "create_gallery_database",
          "createGalleryDatabase"
        ],
        "x-samchon-controller": "NotionController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icons/notion.svg"
      }
    },
    "/connector/notion/create-gallery-item": {
      "post": {
        "summary": "Create items in the gallery database",
        "description": "Create an item in the generated gallery view database.\nCreating a database item means adding an item to an existing database.\nIf there is no database received from input, you must first create a database using the POST: /connector/notion/create-gallery-database endpoint and then run it.\nYou should use this endpoint when adding items to an already created database.\nYou need to use this endpoint to add multiple items to the gallery database at once.\nIf you need to add 3 items, instead of calling the endpoint 3 times, you should put the 3 items in an array in the info information and add the 3 items in 1 endpoint call.\nSince the Notion database can only be created in table format, you will need to instruct users to manually change it to a gallery database view.",
        "tags": [
          "Notion"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/INotion.ICreateGalleryDatabaseItemInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/INotion.ICreateGalleryDatabaseItemOutput"
                  }
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "notion",
          "create_gallery_item",
          "createGalleryItem"
        ],
        "x-samchon-controller": "NotionController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icons/notion.svg"
      }
    },
    "/connector/notion/update-page-content": {
      "post": {
        "summary": "Update Page Content",
        "description": "Updates the contents of the page.\n\nThis function updates the contents written on the page to the desired contents.\n\nThe contents to be updated must be written in Markdown format.",
        "tags": [
          "Notion"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/INotion.IUpdatePageContentInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "title": "page id",
                          "description": "Unique id of the generated page"
                        },
                        "link": {
                          "type": "string",
                          "format": "iri",
                          "title": "page link"
                        }
                      },
                      "required": [
                        "id",
                        "link"
                      ]
                    },
                    {
                      "$ref": "#/components/schemas/INotion.Common.IError"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "notion",
          "update_page_content",
          "updatePageContent"
        ],
        "x-samchon-controller": "NotionController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icons/notion.svg"
      }
    },
    "/connector/notion/create-database": {
      "post": {
        "summary": "Create a database",
        "description": "Create a Notion Database\n\nCreating a database is different from adding items to a database.\nCreating a database is a process of creating a database, and adding items to a database is a process of adding items to an existing database.\nYou need to understand what your users are asking for, how many properties they need, and which properties should be created.",
        "tags": [
          "Notion"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/INotion.ICreateDatabaseInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/INotion.ICreateDatabaseOutput"
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "notion",
          "create_database",
          "createDatabase"
        ],
        "x-samchon-controller": "NotionController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icons/notion.svg"
      }
    },
    "/connector/notion/add-database-property": {
      "post": {
        "summary": "Add property to database",
        "description": "Add property to notion database\nIf you want to add a property to an existing database, you should use this function.\nFor example, if there is an English word database in the Notion database, and there are three existing properties: word, meaning, and example sentence, and the user wants to add a property called Korean meaning, you should use this function to add a new property.\nThis function can only add one property at a time.",
        "tags": [
          "Notion"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/INotion.IAddDatabasePropertyInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/INotion.ICreateDatabaseOutput"
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "notion",
          "add_database_property",
          "addDatabaseProperty"
        ],
        "x-samchon-controller": "NotionController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icons/notion.svg"
      }
    },
    "/connector/notion/delete-database-property": {
      "post": {
        "summary": "Delete property to database",
        "description": "Delete property to notion database\nIf you want to delete a property in an existing database, you should use this function.\nFor example, if there is an English word database in the Notion database, and there are 4 properties: word, meaning, example, and Korean meaning, and the user wants to delete the property called Korean meaning, you should use this function to delete the property.\nYou need to know the property name to delete it.\nThis function can only delete one property at a time.",
        "tags": [
          "Notion"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/INotion.IDeleteDatabasePropertyInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/INotion.ICreateDatabaseOutput"
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "notion",
          "delete_database_property",
          "deleteDatabaseProperty"
        ],
        "x-samchon-controller": "NotionController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icons/notion.svg"
      }
    },
    "/connector/notion/add-items-to-database": {
      "post": {
        "summary": "Add items to the database",
        "description": "Adds an item to each row in the database\nIf you want to add items to an existing database, you should use this function.\nYou should analyze the user's requirements and assign appropriate values ​​to each property.\nYou should select the value you want to add and the property to which you want to add the value.\nFor example, if you have an English vocabulary database and the properties are word, example, and Korean meaning, and you create two items,\nif the items to add are [{\"apple\", \"Apple is a fruit\", \"사과\"}, {\"snack\", \"I like snack\", \"과자\"}],\nyou should assign \"apple\" and \"snack\" to the word property,  \"Apple is a fruit\" and \"I like snack\" to the example, and \"사과\" and \"과자\" to the Korean meaning property.",
        "tags": [
          "Notion"
        ],
        "parameters": [],
        "requestBody": {
          "description": "Items to add to the database",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/INotion.IAddItemsToDatabaseInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/INotion.ICreateDatabaseOutput"
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "connector",
          "notion",
          "add_items_to_database",
          "addItemsToDatabase"
        ],
        "x-samchon-controller": "NotionController",
        "x-wrtn-icon": "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icons/notion.svg"
      }
    }
  },
  "components": {
    "schemas": {
      "INotion.IDeleteBlockInput": {
        "type": "object",
        "properties": {
          "block_id": {
            "oneOf": [
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/get/page",
                  "jmesPath": "[].{value:pageId, label:title}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              },
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/page",
                  "jmesPath": "[].{value:id, label:id}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              }
            ],
            "title": "block_id",
            "description": "\nIndicates the ID of the page or block within the page to be deleted.\nIf you delete the page, it will go to the trash, so recovery is possible."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "notion",
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "block_id",
          "secretKey"
        ]
      },
      "INotion.Common.IError": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "name",
            "description": "for example, APIResponseError"
          },
          "code": {
            "type": "string",
            "title": "code",
            "description": "for example, object_not_found"
          },
          "status": {
            "type": "number",
            "title": "status",
            "description": "for example, 404"
          },
          "body": {
            "type": "string",
            "title": "serialized body",
            "description": "for example, '{\"object\":\"error\",\"status\":404,\"code\":\"object_not_found\",\"message\":\"Could not find page with ID: 6f8304d2-de52-417d-a032-b340a421a8c1. Make sure the relevant pages and databases are shared with your integration.\",\"request_id\":\"3e773c7e-c703-40a8-9b13-635ad750c3a2\"}'"
          }
        },
        "required": [
          "name",
          "code",
          "status",
          "body"
        ]
      },
      "INotion.IAppendPageByMarkdownInput": {
        "type": "object",
        "properties": {
          "pageId": {
            "oneOf": [
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/get/page",
                  "jmesPath": "[].{value:pageId, label:title}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              },
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/page",
                  "jmesPath": "[].{value:id, label:id}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              }
            ],
            "title": "pageId",
            "description": "Indicates the page on which you want to add a block.\nAt the bottom of this page, a block is added to match the requested object here.\nCalling this connector requires the correct page ID,\nso it should only be called if you have previously created a page to obtain that ID, viewed the page,\nor obtained a link or page ID from the user in advance."
          },
          "markdown": {
            "type": "string",
            "title": "markdown",
            "description": "If you add a markdown string, it will be converted appropriately according to the Notion's block.\nTherefore, you don't have to use Unicode symbols to implement lists or decorate documents using letters.\nOf course, this depends on the user, and there is no problem using the character string you want, such as inserting an emoji as well as Unicode."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "notion",
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "pageId",
          "markdown",
          "secretKey"
        ]
      },
      "INotion.ICreateChildContentTypeFileInput": {
        "type": "object",
        "properties": {
          "file": {
            "type": "object",
            "properties": {
              "external": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "format": "iri",
                    "title": "url\n\nYou can enter the path of the file you want to upload."
                  }
                },
                "required": [
                  "url"
                ],
                "title": "external"
              },
              "name": {
                "type": "string",
                "title": "filename"
              },
              "caption": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "text": {
                      "type": "object",
                      "properties": {
                        "content": {
                          "type": "string",
                          "title": "content"
                        },
                        "link": {
                          "type": "object",
                          "properties": {
                            "url": {
                              "type": "string",
                              "format": "iri",
                              "title": "url"
                            }
                          },
                          "required": [
                            "url"
                          ],
                          "title": "link"
                        }
                      },
                      "required": [
                        "content"
                      ],
                      "title": "text"
                    }
                  },
                  "required": [
                    "text"
                  ]
                },
                "minItems": 1,
                "maxItems": 1,
                "title": "caption for this file"
              }
            },
            "required": [
              "external"
            ],
            "title": "file"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "notion",
            "title": "Select authentication information",
            "description": "secret key."
          },
          "pageId": {
            "oneOf": [
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/get/page",
                  "jmesPath": "[].{value:pageId, label:title}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              },
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/page",
                  "jmesPath": "[].{value:id, label:id}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              }
            ],
            "title": "pageId",
            "description": "Indicates the page on which you want to add a block.\nAt the bottom of this page, a block is added to match the requested object here.\nCalling this connector requires the correct page ID,\nso it should only be called if you have previously created a page to obtain that ID, viewed the page,\nor obtained a link or page ID from the user in advance."
          }
        },
        "required": [
          "file",
          "secretKey",
          "pageId"
        ]
      },
      "INotion.ICreateChildContentTypeEmbedInput": {
        "type": "object",
        "properties": {
          "embed": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "iri",
                "title": "url\n\nYou can enter the path of the file you want to embed."
              },
              "caption": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "text": {
                      "type": "object",
                      "properties": {
                        "content": {
                          "type": "string",
                          "title": "content"
                        },
                        "link": {
                          "type": "object",
                          "properties": {
                            "url": {
                              "type": "string",
                              "format": "iri",
                              "title": "url"
                            }
                          },
                          "required": [
                            "url"
                          ],
                          "title": "link"
                        }
                      },
                      "required": [
                        "content"
                      ],
                      "title": "text"
                    }
                  },
                  "required": [
                    "text"
                  ]
                },
                "minItems": 1,
                "maxItems": 1,
                "title": "caption of this embed"
              }
            },
            "required": [
              "url"
            ],
            "title": "embed"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "notion",
            "title": "Select authentication information",
            "description": "secret key."
          },
          "pageId": {
            "oneOf": [
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/get/page",
                  "jmesPath": "[].{value:pageId, label:title}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              },
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/page",
                  "jmesPath": "[].{value:id, label:id}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              }
            ],
            "title": "pageId",
            "description": "Indicates the page on which you want to add a block.\nAt the bottom of this page, a block is added to match the requested object here.\nCalling this connector requires the correct page ID,\nso it should only be called if you have previously created a page to obtain that ID, viewed the page,\nor obtained a link or page ID from the user in advance."
          }
        },
        "required": [
          "embed",
          "secretKey",
          "pageId"
        ]
      },
      "INotion.ICreateChildContentTypeBookmarkInput": {
        "type": "object",
        "properties": {
          "bookmark": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "iri",
                "title": "url\n\nYou can enter the path of the file you want to bookmark."
              },
              "caption": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "text": {
                      "type": "object",
                      "properties": {
                        "content": {
                          "type": "string",
                          "title": "content"
                        },
                        "link": {
                          "type": "object",
                          "properties": {
                            "url": {
                              "type": "string",
                              "format": "iri",
                              "title": "url"
                            }
                          },
                          "required": [
                            "url"
                          ],
                          "title": "link"
                        }
                      },
                      "required": [
                        "content"
                      ],
                      "title": "text"
                    }
                  },
                  "required": [
                    "text"
                  ]
                },
                "minItems": 1,
                "maxItems": 1,
                "title": "caption of this bookmark"
              }
            },
            "required": [
              "url"
            ],
            "title": "bookmark"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "notion",
            "title": "Select authentication information",
            "description": "secret key."
          },
          "pageId": {
            "oneOf": [
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/get/page",
                  "jmesPath": "[].{value:pageId, label:title}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              },
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/page",
                  "jmesPath": "[].{value:id, label:id}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              }
            ],
            "title": "pageId",
            "description": "Indicates the page on which you want to add a block.\nAt the bottom of this page, a block is added to match the requested object here.\nCalling this connector requires the correct page ID,\nso it should only be called if you have previously created a page to obtain that ID, viewed the page,\nor obtained a link or page ID from the user in advance."
          }
        },
        "required": [
          "bookmark",
          "secretKey",
          "pageId"
        ]
      },
      "INotion.ICreateChildContentTypeImageInput": {
        "type": "object",
        "properties": {
          "image": {
            "type": "object",
            "properties": {
              "external": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "format": "uri",
                    "pattern": ".*\\.(bmp|gif|heic|jpe?g|png|svg|tiff?)(\\?.*)?",
                    "title": "url",
                    "description": "image file's extension is one of: 'bmp', 'gif', 'heic', 'jpg', 'jpeg', 'png', 'svg', 'tif', 'tiff'."
                  }
                },
                "required": [
                  "url"
                ],
                "title": "external"
              },
              "caption": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "text": {
                      "type": "object",
                      "properties": {
                        "content": {
                          "type": "string",
                          "title": "content"
                        },
                        "link": {
                          "type": "object",
                          "properties": {
                            "url": {
                              "type": "string",
                              "format": "iri",
                              "title": "url"
                            }
                          },
                          "required": [
                            "url"
                          ],
                          "title": "link"
                        }
                      },
                      "required": [
                        "content"
                      ],
                      "title": "text"
                    }
                  },
                  "required": [
                    "text"
                  ]
                },
                "minItems": 1,
                "maxItems": 1,
                "title": "caption of this image"
              }
            },
            "required": [
              "external"
            ],
            "title": "image"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "notion",
            "title": "Select authentication information",
            "description": "secret key."
          },
          "pageId": {
            "oneOf": [
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/get/page",
                  "jmesPath": "[].{value:pageId, label:title}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              },
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/page",
                  "jmesPath": "[].{value:id, label:id}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              }
            ],
            "title": "pageId",
            "description": "Indicates the page on which you want to add a block.\nAt the bottom of this page, a block is added to match the requested object here.\nCalling this connector requires the correct page ID,\nso it should only be called if you have previously created a page to obtain that ID, viewed the page,\nor obtained a link or page ID from the user in advance."
          }
        },
        "required": [
          "image",
          "secretKey",
          "pageId"
        ]
      },
      "INotion.ICreateChildContentTypeVideoInput": {
        "type": "object",
        "properties": {
          "video": {
            "type": "object",
            "properties": {
              "external": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "format": "iri",
                    "title": "url",
                    "description": "video file must be one of: 'amv' ,'asf' ,'avi' ,'f4v' ,'flv' ,'gifv' ,'mkv' ,'mov' ,'mpg' ,'mpeg' ,'mpv' ,'mp4' ,'m4v' ,'qt' ,'wmv'\nOR\nYouTube video links that include embed or watch.\nE.g. https://www.youtube.com/watch?v=[id], https://www.youtube.com/embed/[id]"
                  }
                },
                "required": [
                  "url"
                ],
                "title": "external"
              },
              "caption": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "text": {
                      "type": "object",
                      "properties": {
                        "content": {
                          "type": "string",
                          "title": "content"
                        },
                        "link": {
                          "type": "object",
                          "properties": {
                            "url": {
                              "type": "string",
                              "format": "iri",
                              "title": "url"
                            }
                          },
                          "required": [
                            "url"
                          ],
                          "title": "link"
                        }
                      },
                      "required": [
                        "content"
                      ],
                      "title": "text"
                    }
                  },
                  "required": [
                    "text"
                  ]
                },
                "minItems": 1,
                "maxItems": 1,
                "title": "caption of this embed"
              }
            },
            "required": [
              "external"
            ],
            "title": "video"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "notion",
            "title": "Select authentication information",
            "description": "secret key."
          },
          "pageId": {
            "oneOf": [
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/get/page",
                  "jmesPath": "[].{value:pageId, label:title}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              },
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/page",
                  "jmesPath": "[].{value:id, label:id}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              }
            ],
            "title": "pageId",
            "description": "Indicates the page on which you want to add a block.\nAt the bottom of this page, a block is added to match the requested object here.\nCalling this connector requires the correct page ID,\nso it should only be called if you have previously created a page to obtain that ID, viewed the page,\nor obtained a link or page ID from the user in advance."
          }
        },
        "required": [
          "video",
          "secretKey",
          "pageId"
        ]
      },
      "INotion.ICreateChildContentTypePdfInput": {
        "type": "object",
        "properties": {
          "pdf": {
            "type": "object",
            "properties": {
              "external": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "format": "iri",
                    "pattern": ".*\\.(pdf)(\\?.*)?",
                    "title": "url"
                  }
                },
                "required": [
                  "url"
                ],
                "title": "external"
              },
              "caption": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "text": {
                      "type": "object",
                      "properties": {
                        "content": {
                          "type": "string",
                          "title": "content"
                        },
                        "link": {
                          "type": "object",
                          "properties": {
                            "url": {
                              "type": "string",
                              "format": "iri",
                              "title": "url"
                            }
                          },
                          "required": [
                            "url"
                          ],
                          "title": "link"
                        }
                      },
                      "required": [
                        "content"
                      ],
                      "title": "text"
                    }
                  },
                  "required": [
                    "text"
                  ]
                },
                "minItems": 1,
                "maxItems": 1,
                "title": "caption of this pdf"
              }
            },
            "required": [
              "external"
            ],
            "title": "pdf"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "notion",
            "title": "Select authentication information",
            "description": "secret key."
          },
          "pageId": {
            "oneOf": [
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/get/page",
                  "jmesPath": "[].{value:pageId, label:title}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              },
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/page",
                  "jmesPath": "[].{value:id, label:id}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              }
            ],
            "title": "pageId",
            "description": "Indicates the page on which you want to add a block.\nAt the bottom of this page, a block is added to match the requested object here.\nCalling this connector requires the correct page ID,\nso it should only be called if you have previously created a page to obtain that ID, viewed the page,\nor obtained a link or page ID from the user in advance."
          }
        },
        "required": [
          "pdf",
          "secretKey",
          "pageId"
        ]
      },
      "INotion.ICreateChildContentTypeCodeInput": {
        "type": "object",
        "properties": {
          "code": {
            "type": "object",
            "properties": {
              "language": {
                "oneOf": [
                  {
                    "const": "c"
                  },
                  {
                    "const": "json"
                  },
                  {
                    "const": "diff"
                  },
                  {
                    "const": "html"
                  },
                  {
                    "const": "markdown"
                  },
                  {
                    "const": "r"
                  },
                  {
                    "const": "abap"
                  },
                  {
                    "const": "agda"
                  },
                  {
                    "const": "arduino"
                  },
                  {
                    "const": "assembly"
                  },
                  {
                    "const": "bash"
                  },
                  {
                    "const": "basic"
                  },
                  {
                    "const": "bnf"
                  },
                  {
                    "const": "c#"
                  },
                  {
                    "const": "c++"
                  },
                  {
                    "const": "clojure"
                  },
                  {
                    "const": "coffeescript"
                  },
                  {
                    "const": "coq"
                  },
                  {
                    "const": "css"
                  },
                  {
                    "const": "dart"
                  },
                  {
                    "const": "dhall"
                  },
                  {
                    "const": "docker"
                  },
                  {
                    "const": "ebnf"
                  },
                  {
                    "const": "elixir"
                  },
                  {
                    "const": "elm"
                  },
                  {
                    "const": "erlang"
                  },
                  {
                    "const": "f#"
                  },
                  {
                    "const": "flow"
                  },
                  {
                    "const": "fortran"
                  },
                  {
                    "const": "gherkin"
                  },
                  {
                    "const": "glsl"
                  },
                  {
                    "const": "go"
                  },
                  {
                    "const": "graphql"
                  },
                  {
                    "const": "groovy"
                  },
                  {
                    "const": "haskell"
                  },
                  {
                    "const": "idris"
                  },
                  {
                    "const": "java"
                  },
                  {
                    "const": "javascript"
                  },
                  {
                    "const": "julia"
                  },
                  {
                    "const": "kotlin"
                  },
                  {
                    "const": "latex"
                  },
                  {
                    "const": "less"
                  },
                  {
                    "const": "lisp"
                  },
                  {
                    "const": "livescript"
                  },
                  {
                    "const": "llvm ir"
                  },
                  {
                    "const": "lua"
                  },
                  {
                    "const": "makefile"
                  },
                  {
                    "const": "markup"
                  },
                  {
                    "const": "matlab"
                  },
                  {
                    "const": "mathematica"
                  },
                  {
                    "const": "mermaid"
                  },
                  {
                    "const": "nix"
                  },
                  {
                    "const": "notion formula"
                  },
                  {
                    "const": "objective-c"
                  },
                  {
                    "const": "ocaml"
                  },
                  {
                    "const": "pascal"
                  },
                  {
                    "const": "perl"
                  },
                  {
                    "const": "php"
                  },
                  {
                    "const": "plain text"
                  },
                  {
                    "const": "powershell"
                  },
                  {
                    "const": "prolog"
                  },
                  {
                    "const": "protobuf"
                  },
                  {
                    "const": "purescript"
                  },
                  {
                    "const": "python"
                  },
                  {
                    "const": "racket"
                  },
                  {
                    "const": "reason"
                  },
                  {
                    "const": "ruby"
                  },
                  {
                    "const": "rust"
                  },
                  {
                    "const": "sass"
                  },
                  {
                    "const": "scala"
                  },
                  {
                    "const": "scheme"
                  },
                  {
                    "const": "scss"
                  },
                  {
                    "const": "shell"
                  },
                  {
                    "const": "solidity"
                  },
                  {
                    "const": "sql"
                  },
                  {
                    "const": "swift"
                  },
                  {
                    "const": "toml"
                  },
                  {
                    "const": "typescript"
                  },
                  {
                    "const": "vb.net"
                  },
                  {
                    "const": "verilog"
                  },
                  {
                    "const": "vhdl"
                  },
                  {
                    "const": "visual basic"
                  },
                  {
                    "const": "webassembly"
                  },
                  {
                    "const": "xml"
                  },
                  {
                    "const": "yaml"
                  },
                  {
                    "const": "java/c/c++/c#"
                  }
                ],
                "title": "programming language name"
              },
              "rich_text": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "text": {
                      "type": "object",
                      "properties": {
                        "content": {
                          "type": "string",
                          "title": "content"
                        },
                        "link": {
                          "type": "object",
                          "properties": {
                            "url": {
                              "type": "string",
                              "format": "iri",
                              "title": "url"
                            }
                          },
                          "required": [
                            "url"
                          ],
                          "title": "link"
                        }
                      },
                      "required": [
                        "content"
                      ],
                      "title": "text"
                    }
                  },
                  "required": [
                    "text"
                  ]
                },
                "maxItems": 1,
                "title": "rich text for this codebox"
              }
            },
            "required": [
              "language",
              "rich_text"
            ],
            "title": "code"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "notion",
            "title": "Select authentication information",
            "description": "secret key."
          },
          "pageId": {
            "oneOf": [
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/get/page",
                  "jmesPath": "[].{value:pageId, label:title}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              },
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/page",
                  "jmesPath": "[].{value:id, label:id}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              }
            ],
            "title": "pageId",
            "description": "Indicates the page on which you want to add a block.\nAt the bottom of this page, a block is added to match the requested object here.\nCalling this connector requires the correct page ID,\nso it should only be called if you have previously created a page to obtain that ID, viewed the page,\nor obtained a link or page ID from the user in advance."
          }
        },
        "required": [
          "code",
          "secretKey",
          "pageId"
        ]
      },
      "INotion.ICreateChildContentTypeEquationInput": {
        "type": "object",
        "properties": {
          "equation": {
            "type": "object",
            "properties": {
              "expression": {
                "const": "y = 2x",
                "title": "expression\n\nan equation in mathematics"
              }
            },
            "required": [
              "expression"
            ],
            "title": "equation"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "notion",
            "title": "Select authentication information",
            "description": "secret key."
          },
          "pageId": {
            "oneOf": [
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/get/page",
                  "jmesPath": "[].{value:pageId, label:title}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              },
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/page",
                  "jmesPath": "[].{value:id, label:id}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              }
            ],
            "title": "pageId",
            "description": "Indicates the page on which you want to add a block.\nAt the bottom of this page, a block is added to match the requested object here.\nCalling this connector requires the correct page ID,\nso it should only be called if you have previously created a page to obtain that ID, viewed the page,\nor obtained a link or page ID from the user in advance."
          }
        },
        "required": [
          "equation",
          "secretKey",
          "pageId"
        ]
      },
      "INotion.ICreateChildContentTypeDividerInput": {
        "type": "object",
        "properties": {
          "divider": {
            "$ref": "#/components/schemas/Recordstringnever",
            "title": "divider"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "notion",
            "title": "Select authentication information",
            "description": "secret key."
          },
          "pageId": {
            "oneOf": [
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/get/page",
                  "jmesPath": "[].{value:pageId, label:title}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              },
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/page",
                  "jmesPath": "[].{value:id, label:id}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              }
            ],
            "title": "pageId",
            "description": "Indicates the page on which you want to add a block.\nAt the bottom of this page, a block is added to match the requested object here.\nCalling this connector requires the correct page ID,\nso it should only be called if you have previously created a page to obtain that ID, viewed the page,\nor obtained a link or page ID from the user in advance."
          }
        },
        "required": [
          "divider",
          "secretKey",
          "pageId"
        ]
      },
      "Recordstringnever": {
        "type": "object",
        "properties": {},
        "required": [],
        "description": "Construct a type with a set of properties K of type T"
      },
      "INotion.ICreateChildContentTypeTableOfContentsInput": {
        "type": "object",
        "properties": {
          "table_of_contents": {
            "type": "object",
            "properties": {
              "color": {
                "oneOf": [
                  {
                    "const": "default"
                  },
                  {
                    "const": "red"
                  },
                  {
                    "const": "green"
                  },
                  {
                    "const": "blue"
                  },
                  {
                    "const": "gray"
                  },
                  {
                    "const": "brown"
                  },
                  {
                    "const": "orange"
                  },
                  {
                    "const": "yellow"
                  },
                  {
                    "const": "purple"
                  },
                  {
                    "const": "pink"
                  },
                  {
                    "const": "gray_background"
                  },
                  {
                    "const": "brown_background"
                  },
                  {
                    "const": "orange_background"
                  },
                  {
                    "const": "yellow_background"
                  },
                  {
                    "const": "green_background"
                  },
                  {
                    "const": "blue_background"
                  },
                  {
                    "const": "purple_background"
                  },
                  {
                    "const": "pink_background"
                  },
                  {
                    "const": "red_background"
                  }
                ],
                "title": "color",
                "description": "It must be one of :\n\"default\", \"gray\", \"brown\", \"orange\", \"yellow\", \"green\", \"blue\", \"purple\", \"pink\", \"red\", \"gray_background\", \"brown_background\", \"orange_background\", \"yellow_background\", \"green_background\", \"blue_background\", \"purple_background\", \"pink_background\", \"red_background\""
              }
            },
            "required": [
              "color"
            ],
            "title": "table_of_contents"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "notion",
            "title": "Select authentication information",
            "description": "secret key."
          },
          "pageId": {
            "oneOf": [
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/get/page",
                  "jmesPath": "[].{value:pageId, label:title}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              },
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/page",
                  "jmesPath": "[].{value:id, label:id}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              }
            ],
            "title": "pageId",
            "description": "Indicates the page on which you want to add a block.\nAt the bottom of this page, a block is added to match the requested object here.\nCalling this connector requires the correct page ID,\nso it should only be called if you have previously created a page to obtain that ID, viewed the page,\nor obtained a link or page ID from the user in advance."
          }
        },
        "required": [
          "table_of_contents",
          "secretKey",
          "pageId"
        ]
      },
      "INotion.ICreateChildContentTypeLinkToPageInput": {
        "type": "object",
        "properties": {
          "link_to_page": {
            "type": "object",
            "properties": {
              "page_id": {
                "oneOf": [
                  {
                    "type": "string",
                    "x-wrtn-prerequisite": {
                      "method": "post",
                      "path": "/connector/notion/get/page",
                      "jmesPath": "[].{value:pageId, label:title}"
                    },
                    "x-wrtn-placeholder": "부모 페이지를 선택하세요."
                  },
                  {
                    "type": "string",
                    "x-wrtn-prerequisite": {
                      "method": "post",
                      "path": "/connector/notion/page",
                      "jmesPath": "[].{value:id, label:id}"
                    },
                    "x-wrtn-placeholder": "부모 페이지를 선택하세요."
                  }
                ],
                "title": "page_id",
                "description": "You can look up the page by passing the page ID as a parameter at the end of the notion link.\nFor example, in the format 'https://www.notion.so/ :pageId'."
              }
            },
            "required": [
              "page_id"
            ],
            "title": "link_to_page"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "notion",
            "title": "Select authentication information",
            "description": "secret key."
          },
          "pageId": {
            "oneOf": [
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/get/page",
                  "jmesPath": "[].{value:pageId, label:title}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              },
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/page",
                  "jmesPath": "[].{value:id, label:id}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              }
            ],
            "title": "pageId",
            "description": "Indicates the page on which you want to add a block.\nAt the bottom of this page, a block is added to match the requested object here.\nCalling this connector requires the correct page ID,\nso it should only be called if you have previously created a page to obtain that ID, viewed the page,\nor obtained a link or page ID from the user in advance."
          }
        },
        "required": [
          "link_to_page",
          "secretKey",
          "pageId"
        ]
      },
      "INotion.ICreateChildContentTypeToggleInput": {
        "type": "object",
        "properties": {
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "notion",
            "title": "Select authentication information",
            "description": "secret key."
          },
          "pageId": {
            "oneOf": [
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/get/page",
                  "jmesPath": "[].{value:pageId, label:title}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              },
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/page",
                  "jmesPath": "[].{value:id, label:id}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              }
            ],
            "title": "pageId",
            "description": "Indicates the page on which you want to add a block.\nAt the bottom of this page, a block is added to match the requested object here.\nCalling this connector requires the correct page ID,\nso it should only be called if you have previously created a page to obtain that ID, viewed the page,\nor obtained a link or page ID from the user in advance."
          },
          "toggle": {
            "$ref": "#/components/schemas/rich_textMultipleTextLinecolorApiColorundefinedRecordchildren(togglerich_textMultipleTextLinecolorApiColorundefinedRecord...)",
            "title": "toggle"
          }
        },
        "required": [
          "secretKey",
          "pageId",
          "toggle"
        ]
      },
      "rich_textMultipleTextLinecolorApiColorundefinedRecordchildren(togglerich_textMultipleTextLinecolorApiColorundefinedRecord...)": {
        "type": "object",
        "properties": {
          "rich_text": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "text": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "title": "content"
                    },
                    "link": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string",
                          "format": "iri",
                          "title": "url"
                        }
                      },
                      "required": [
                        "url"
                      ],
                      "title": "link"
                    }
                  },
                  "required": [
                    "content"
                  ],
                  "title": "text"
                }
              },
              "required": [
                "text"
              ]
            },
            "maxItems": 1,
            "title": "rich_text"
          },
          "color": {
            "oneOf": [
              {
                "const": "default"
              },
              {
                "const": "red"
              },
              {
                "const": "green"
              },
              {
                "const": "blue"
              },
              {
                "const": "gray"
              },
              {
                "const": "brown"
              },
              {
                "const": "orange"
              },
              {
                "const": "yellow"
              },
              {
                "const": "purple"
              },
              {
                "const": "pink"
              },
              {
                "const": "gray_background"
              },
              {
                "const": "brown_background"
              },
              {
                "const": "orange_background"
              },
              {
                "const": "yellow_background"
              },
              {
                "const": "green_background"
              },
              {
                "const": "blue_background"
              },
              {
                "const": "purple_background"
              },
              {
                "const": "pink_background"
              },
              {
                "const": "red_background"
              }
            ],
            "title": "color"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/togglerich_textMultipleTextLinecolorApiColorundefinedRecordtoggleRecordchildren(togglerich_textMultipleTextLinecolorApiColorundefinedRecord...)"
            }
          }
        },
        "required": [
          "rich_text",
          "children"
        ]
      },
      "togglerich_textMultipleTextLinecolorApiColorundefinedRecordtoggleRecordchildren(togglerich_textMultipleTextLinecolorApiColorundefinedRecord...)": {
        "type": "object",
        "properties": {
          "toggle": {
            "$ref": "#/components/schemas/rich_textMultipleTextLinecolorApiColorundefinedRecordchildren(togglerich_textMultipleTextLinecolorApiColorundefinedRecord...).o1",
            "title": "toggle"
          }
        },
        "required": [
          "toggle"
        ]
      },
      "rich_textMultipleTextLinecolorApiColorundefinedRecordchildren(togglerich_textMultipleTextLinecolorApiColorundefinedRecord...).o1": {
        "type": "object",
        "properties": {
          "rich_text": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "text": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "title": "content"
                    },
                    "link": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string",
                          "format": "iri",
                          "title": "url"
                        }
                      },
                      "required": [
                        "url"
                      ],
                      "title": "link"
                    }
                  },
                  "required": [
                    "content"
                  ],
                  "title": "text"
                }
              },
              "required": [
                "text"
              ]
            },
            "maxItems": 1,
            "title": "rich_text"
          },
          "color": {
            "oneOf": [
              {
                "const": "default"
              },
              {
                "const": "red"
              },
              {
                "const": "green"
              },
              {
                "const": "blue"
              },
              {
                "const": "gray"
              },
              {
                "const": "brown"
              },
              {
                "const": "orange"
              },
              {
                "const": "yellow"
              },
              {
                "const": "purple"
              },
              {
                "const": "pink"
              },
              {
                "const": "gray_background"
              },
              {
                "const": "brown_background"
              },
              {
                "const": "orange_background"
              },
              {
                "const": "yellow_background"
              },
              {
                "const": "green_background"
              },
              {
                "const": "blue_background"
              },
              {
                "const": "purple_background"
              },
              {
                "const": "pink_background"
              },
              {
                "const": "red_background"
              }
            ],
            "title": "color"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/togglerich_textMultipleTextLinecolorApiColorundefinedRecordtoggleRecordchildrentogglerich_textMultipleTextLinecolorApiColorundefined"
            }
          }
        },
        "required": [
          "rich_text",
          "children"
        ]
      },
      "togglerich_textMultipleTextLinecolorApiColorundefinedRecordtoggleRecordchildrentogglerich_textMultipleTextLinecolorApiColorundefined": {
        "type": "object",
        "properties": {
          "toggle": {
            "$ref": "#/components/schemas/rich_textMultipleTextLinecolorApiColorundefinedRecordchildrentogglerich_textMultipleTextLinecolorApiColorundefined",
            "title": "toggle"
          }
        },
        "required": [
          "toggle"
        ]
      },
      "rich_textMultipleTextLinecolorApiColorundefinedRecordchildrentogglerich_textMultipleTextLinecolorApiColorundefined": {
        "type": "object",
        "properties": {
          "rich_text": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "text": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "type": "string",
                      "title": "content"
                    },
                    "link": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string",
                          "format": "iri",
                          "title": "url"
                        }
                      },
                      "required": [
                        "url"
                      ],
                      "title": "link"
                    }
                  },
                  "required": [
                    "content"
                  ],
                  "title": "text"
                }
              },
              "required": [
                "text"
              ]
            },
            "maxItems": 1,
            "title": "rich_text"
          },
          "color": {
            "oneOf": [
              {
                "const": "default"
              },
              {
                "const": "red"
              },
              {
                "const": "green"
              },
              {
                "const": "blue"
              },
              {
                "const": "gray"
              },
              {
                "const": "brown"
              },
              {
                "const": "orange"
              },
              {
                "const": "yellow"
              },
              {
                "const": "purple"
              },
              {
                "const": "pink"
              },
              {
                "const": "gray_background"
              },
              {
                "const": "brown_background"
              },
              {
                "const": "orange_background"
              },
              {
                "const": "yellow_background"
              },
              {
                "const": "green_background"
              },
              {
                "const": "blue_background"
              },
              {
                "const": "purple_background"
              },
              {
                "const": "pink_background"
              },
              {
                "const": "red_background"
              }
            ],
            "title": "color"
          },
          "children": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "toggle": {
                  "type": "object",
                  "properties": {
                    "rich_text": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "text": {
                            "type": "object",
                            "properties": {
                              "content": {
                                "type": "string",
                                "title": "content"
                              },
                              "link": {
                                "type": "object",
                                "properties": {
                                  "url": {
                                    "type": "string",
                                    "format": "iri",
                                    "title": "url"
                                  }
                                },
                                "required": [
                                  "url"
                                ],
                                "title": "link"
                              }
                            },
                            "required": [
                              "content"
                            ],
                            "title": "text"
                          }
                        },
                        "required": [
                          "text"
                        ]
                      },
                      "maxItems": 1,
                      "title": "rich_text"
                    },
                    "color": {
                      "oneOf": [
                        {
                          "const": "default"
                        },
                        {
                          "const": "red"
                        },
                        {
                          "const": "green"
                        },
                        {
                          "const": "blue"
                        },
                        {
                          "const": "gray"
                        },
                        {
                          "const": "brown"
                        },
                        {
                          "const": "orange"
                        },
                        {
                          "const": "yellow"
                        },
                        {
                          "const": "purple"
                        },
                        {
                          "const": "pink"
                        },
                        {
                          "const": "gray_background"
                        },
                        {
                          "const": "brown_background"
                        },
                        {
                          "const": "orange_background"
                        },
                        {
                          "const": "yellow_background"
                        },
                        {
                          "const": "green_background"
                        },
                        {
                          "const": "blue_background"
                        },
                        {
                          "const": "purple_background"
                        },
                        {
                          "const": "pink_background"
                        },
                        {
                          "const": "red_background"
                        }
                      ],
                      "title": "color"
                    }
                  },
                  "required": [
                    "rich_text"
                  ],
                  "title": "toggle"
                }
              },
              "required": [
                "toggle"
              ]
            }
          }
        },
        "required": [
          "rich_text",
          "children"
        ]
      },
      "INotion.IReadPageContentOutput": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "title": "content",
            "description": "The contents of the page you  read.\n\nThe contents are in Markdown format."
          }
        },
        "required": [
          "content"
        ]
      },
      "INotion.IReadPageContentInput": {
        "type": "object",
        "properties": {
          "pageId": {
            "oneOf": [
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/get/page",
                  "jmesPath": "[].{value:pageId, label:title}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              },
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/page",
                  "jmesPath": "[].{value:id, label:id}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              }
            ],
            "title": "pageId",
            "description": "Indicates the ID of the page.\n\nThe unique ID of the page from which you want to read the content."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "notion",
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "pageId",
          "secretKey"
        ]
      },
      "INotion.IReadPageOutput": {
        "type": "object",
        "properties": {
          "pageId": {
            "type": "string",
            "x-wrtn-prerequisite": {
              "method": "post",
              "path": "/connector/notion/get/page",
              "jmesPath": "[].{value:pageId, label:title}"
            },
            "title": "id",
            "description": "페이지 고유 id\n\n\nIndicates the page on which you want to add a block.\nAt the bottom of this page, a block is added to match the requested object here."
          },
          "title": {
            "type": "string",
            "title": "Title",
            "description": "Page Title"
          },
          "link": {
            "type": "string",
            "format": "iri",
            "title": "page link"
          }
        },
        "required": [
          "pageId",
          "title",
          "link"
        ],
        "title": "Page list query results"
      },
      "INotion.ISecret": {
        "type": "object",
        "properties": {
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "notion",
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "secretKey"
        ]
      },
      "INotion.IUserOutput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "description": "User unique id"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Username"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "title": "User list query results"
      },
      "INotion.IDatabaseInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "description": "database unique id"
          },
          "title": {
            "type": "string",
            "title": "Title",
            "description": "Database Title"
          },
          "url": {
            "type": "string",
            "format": "iri",
            "title": "url",
            "description": "Database Page URL"
          },
          "properties": {
            "$ref": "#/components/schemas/RecordstringINotion.DatabaseProperty",
            "title": "property",
            "description": "Database property information"
          }
        },
        "required": [
          "id",
          "title",
          "url",
          "properties"
        ],
        "title": "Database Information"
      },
      "RecordstringINotion.DatabaseProperty": {
        "type": "object",
        "properties": {},
        "required": [],
        "description": "Construct a type with a set of properties K of type T",
        "additionalProperties": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/INotion.NumberDatabaseProperty"
            },
            {
              "$ref": "#/components/schemas/INotion.FormulaDatabaseProperty"
            },
            {
              "$ref": "#/components/schemas/INotion.SelectDatabaseProperty"
            },
            {
              "$ref": "#/components/schemas/INotion.MultiSelectDatabaseProperty"
            },
            {
              "$ref": "#/components/schemas/INotion.StatusDatabaseProperty"
            },
            {
              "$ref": "#/components/schemas/INotion.RelationDatabaseProperty"
            },
            {
              "$ref": "#/components/schemas/INotion.RollupDatabaseProperty"
            },
            {
              "$ref": "#/components/schemas/INotion.TitleDatabaseProperty"
            },
            {
              "$ref": "#/components/schemas/INotion.RichTextDatabaseProperty"
            },
            {
              "$ref": "#/components/schemas/INotion.UrlDatabaseProperty"
            },
            {
              "$ref": "#/components/schemas/INotion.PeopleDatabaseProperty"
            },
            {
              "$ref": "#/components/schemas/INotion.FilesDatabaseProperty"
            },
            {
              "$ref": "#/components/schemas/INotion.EmailDatabaseProperty"
            },
            {
              "$ref": "#/components/schemas/INotion.PhoneNumberDatabaseProperty"
            },
            {
              "$ref": "#/components/schemas/INotion.DateDatabaseProperty"
            },
            {
              "$ref": "#/components/schemas/INotion.CheckboxDatabaseProperty"
            },
            {
              "$ref": "#/components/schemas/INotion.CreatedByDatabaseProperty"
            },
            {
              "$ref": "#/components/schemas/INotion.CreatedTimeDatabaseProperty"
            },
            {
              "$ref": "#/components/schemas/INotion.LastEditedByDatabaseProperty"
            },
            {
              "$ref": "#/components/schemas/INotion.LastEditedTimeDatabaseProperty"
            }
          ],
          "discriminator": {
            "propertyName": "type",
            "mapping": {
              "number": "#/components/schemas/INotion.NumberDatabaseProperty",
              "formula": "#/components/schemas/INotion.FormulaDatabaseProperty",
              "select": "#/components/schemas/INotion.SelectDatabaseProperty",
              "multi_select": "#/components/schemas/INotion.MultiSelectDatabaseProperty",
              "status": "#/components/schemas/INotion.StatusDatabaseProperty",
              "relation": "#/components/schemas/INotion.RelationDatabaseProperty",
              "rollup": "#/components/schemas/INotion.RollupDatabaseProperty",
              "title": "#/components/schemas/INotion.TitleDatabaseProperty",
              "rich_text": "#/components/schemas/INotion.RichTextDatabaseProperty",
              "url": "#/components/schemas/INotion.UrlDatabaseProperty",
              "people": "#/components/schemas/INotion.PeopleDatabaseProperty",
              "files": "#/components/schemas/INotion.FilesDatabaseProperty",
              "email": "#/components/schemas/INotion.EmailDatabaseProperty",
              "phone_number": "#/components/schemas/INotion.PhoneNumberDatabaseProperty",
              "date": "#/components/schemas/INotion.DateDatabaseProperty",
              "checkbox": "#/components/schemas/INotion.CheckboxDatabaseProperty",
              "created_by": "#/components/schemas/INotion.CreatedByDatabaseProperty",
              "created_time": "#/components/schemas/INotion.CreatedTimeDatabaseProperty",
              "last_edited_by": "#/components/schemas/INotion.LastEditedByDatabaseProperty",
              "last_edited_time": "#/components/schemas/INotion.LastEditedTimeDatabaseProperty"
            }
          }
        }
      },
      "INotion.NumberDatabaseProperty": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id"
          },
          "name": {
            "type": "string",
            "title": "name"
          },
          "type": {
            "const": "number",
            "title": "type"
          },
          "number": {
            "type": "object",
            "properties": {
              "format": {
                "oneOf": [
                  {
                    "const": "number"
                  },
                  {
                    "const": "percent"
                  },
                  {
                    "const": "number_with_commas"
                  },
                  {
                    "const": "dollar"
                  },
                  {
                    "const": "canadian_dollar"
                  },
                  {
                    "const": "singapore_dollar"
                  },
                  {
                    "const": "euro"
                  },
                  {
                    "const": "pound"
                  },
                  {
                    "const": "yen"
                  },
                  {
                    "const": "ruble"
                  },
                  {
                    "const": "rupee"
                  },
                  {
                    "const": "won"
                  },
                  {
                    "const": "yuan"
                  },
                  {
                    "const": "real"
                  },
                  {
                    "const": "lira"
                  },
                  {
                    "const": "rupiah"
                  },
                  {
                    "const": "franc"
                  },
                  {
                    "const": "hong_kong_dollar"
                  },
                  {
                    "const": "new_zealand_dollar"
                  },
                  {
                    "const": "krona"
                  },
                  {
                    "const": "norwegian_krone"
                  },
                  {
                    "const": "mexican_peso"
                  },
                  {
                    "const": "rand"
                  },
                  {
                    "const": "new_taiwan_dollar"
                  },
                  {
                    "const": "danish_krone"
                  },
                  {
                    "const": "zloty"
                  },
                  {
                    "const": "baht"
                  },
                  {
                    "const": "forint"
                  },
                  {
                    "const": "koruna"
                  },
                  {
                    "const": "shekel"
                  },
                  {
                    "const": "chilean_peso"
                  },
                  {
                    "const": "philippine_peso"
                  },
                  {
                    "const": "dirham"
                  },
                  {
                    "const": "colombian_peso"
                  },
                  {
                    "const": "riyal"
                  },
                  {
                    "const": "ringgit"
                  },
                  {
                    "const": "leu"
                  },
                  {
                    "const": "argentine_peso"
                  },
                  {
                    "const": "uruguayan_peso"
                  },
                  {
                    "const": "peruvian_sol"
                  }
                ],
                "title": "format"
              }
            },
            "required": [
              "format"
            ],
            "title": "number"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "number"
        ],
        "title": "Database numeric properties"
      },
      "INotion.FormulaDatabaseProperty": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id"
          },
          "name": {
            "type": "string",
            "title": "name"
          },
          "type": {
            "const": "formula",
            "title": "type"
          },
          "formula": {
            "type": "object",
            "properties": {
              "expression": {
                "type": "string",
                "title": "expression"
              }
            },
            "required": [
              "expression"
            ],
            "title": "formula"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "formula"
        ],
        "title": "Database official properties"
      },
      "INotion.SelectDatabaseProperty": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id"
          },
          "name": {
            "type": "string",
            "title": "name"
          },
          "type": {
            "const": "select",
            "title": "type"
          },
          "select": {
            "type": "object",
            "properties": {
              "options": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "title": "id"
                    },
                    "name": {
                      "type": "string",
                      "title": "name"
                    },
                    "color": {
                      "oneOf": [
                        {
                          "const": "default"
                        },
                        {
                          "const": "red"
                        },
                        {
                          "const": "green"
                        },
                        {
                          "const": "blue"
                        },
                        {
                          "const": "gray"
                        },
                        {
                          "const": "brown"
                        },
                        {
                          "const": "orange"
                        },
                        {
                          "const": "yellow"
                        },
                        {
                          "const": "purple"
                        },
                        {
                          "const": "pink"
                        }
                      ],
                      "title": "color"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "color"
                  ]
                },
                "title": "options"
              }
            },
            "required": [
              "options"
            ],
            "title": "select"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "select"
        ],
        "title": "Database Selection Attributes"
      },
      "INotion.MultiSelectDatabaseProperty": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id"
          },
          "name": {
            "type": "string",
            "title": "name"
          },
          "type": {
            "const": "multi_select",
            "title": "type"
          },
          "multi_select": {
            "type": "object",
            "properties": {
              "options": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "title": "id"
                    },
                    "name": {
                      "type": "string",
                      "title": "name"
                    },
                    "color": {
                      "oneOf": [
                        {
                          "const": "default"
                        },
                        {
                          "const": "red"
                        },
                        {
                          "const": "green"
                        },
                        {
                          "const": "blue"
                        },
                        {
                          "const": "gray"
                        },
                        {
                          "const": "brown"
                        },
                        {
                          "const": "orange"
                        },
                        {
                          "const": "yellow"
                        },
                        {
                          "const": "purple"
                        },
                        {
                          "const": "pink"
                        }
                      ],
                      "title": "color"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "color"
                  ]
                },
                "title": "options"
              }
            },
            "required": [
              "options"
            ],
            "title": "multi_select"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "multi_select"
        ],
        "title": "Database Multi-Select Attribute"
      },
      "INotion.StatusDatabaseProperty": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id"
          },
          "name": {
            "type": "string",
            "title": "name"
          },
          "type": {
            "const": "status",
            "title": "type"
          },
          "status": {
            "type": "object",
            "properties": {
              "options": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "title": "id"
                    },
                    "name": {
                      "type": "string",
                      "title": "name"
                    },
                    "color": {
                      "oneOf": [
                        {
                          "const": "default"
                        },
                        {
                          "const": "red"
                        },
                        {
                          "const": "green"
                        },
                        {
                          "const": "blue"
                        },
                        {
                          "const": "gray"
                        },
                        {
                          "const": "brown"
                        },
                        {
                          "const": "orange"
                        },
                        {
                          "const": "yellow"
                        },
                        {
                          "const": "purple"
                        },
                        {
                          "const": "pink"
                        }
                      ],
                      "title": "color"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "color"
                  ]
                },
                "title": "options"
              },
              "groups": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "title": "id"
                    },
                    "name": {
                      "type": "string",
                      "title": "name"
                    },
                    "color": {
                      "oneOf": [
                        {
                          "const": "default"
                        },
                        {
                          "const": "red"
                        },
                        {
                          "const": "green"
                        },
                        {
                          "const": "blue"
                        },
                        {
                          "const": "gray"
                        },
                        {
                          "const": "brown"
                        },
                        {
                          "const": "orange"
                        },
                        {
                          "const": "yellow"
                        },
                        {
                          "const": "purple"
                        },
                        {
                          "const": "pink"
                        }
                      ],
                      "title": "color"
                    },
                    "option_ids": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "title": "option_ids"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "color",
                    "option_ids"
                  ]
                },
                "title": "groups"
              }
            },
            "required": [
              "options",
              "groups"
            ],
            "title": "status"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "status"
        ],
        "title": "Database status properties"
      },
      "INotion.RelationDatabaseProperty": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id"
          },
          "name": {
            "type": "string",
            "title": "name"
          },
          "type": {
            "const": "relation",
            "title": "type"
          },
          "relation": {
            "type": "object",
            "properties": {
              "database_id": {
                "type": "string",
                "title": "database_id"
              },
              "synced_property_id": {
                "type": "string",
                "title": "synced_property_id"
              },
              "synced_property_name": {
                "type": "string",
                "title": "synced_property_name"
              }
            },
            "required": [
              "database_id",
              "synced_property_id",
              "synced_property_name"
            ],
            "title": "relation"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "relation"
        ],
        "title": "Database Relationship Properties"
      },
      "INotion.RollupDatabaseProperty": {
        "type": "object",
        "properties": {
          "type": {
            "const": "rollup",
            "title": "type"
          },
          "rollup": {
            "type": "object",
            "properties": {
              "rollup_property_name": {
                "type": "string",
                "title": "rollup_property_name"
              },
              "relation_property_name": {
                "type": "string",
                "title": "relation_property_name"
              },
              "rollup_property_id": {
                "type": "string",
                "title": "rollup_property_id"
              },
              "relation_property_id": {
                "type": "string",
                "title": "relation_property_id"
              },
              "function": {
                "oneOf": [
                  {
                    "const": "date_range"
                  },
                  {
                    "const": "count"
                  },
                  {
                    "const": "range"
                  },
                  {
                    "const": "average"
                  },
                  {
                    "const": "unique"
                  },
                  {
                    "const": "count_values"
                  },
                  {
                    "const": "empty"
                  },
                  {
                    "const": "not_empty"
                  },
                  {
                    "const": "show_unique"
                  },
                  {
                    "const": "percent_empty"
                  },
                  {
                    "const": "percent_not_empty"
                  },
                  {
                    "const": "sum"
                  },
                  {
                    "const": "median"
                  },
                  {
                    "const": "min"
                  },
                  {
                    "const": "max"
                  },
                  {
                    "const": "earliest_date"
                  },
                  {
                    "const": "latest_date"
                  },
                  {
                    "const": "checked"
                  },
                  {
                    "const": "unchecked"
                  },
                  {
                    "const": "percent_checked"
                  },
                  {
                    "const": "percent_unchecked"
                  },
                  {
                    "const": "count_per_group"
                  },
                  {
                    "const": "percent_per_group"
                  },
                  {
                    "const": "show_original"
                  }
                ],
                "title": "function"
              }
            },
            "required": [
              "rollup_property_name",
              "relation_property_name",
              "rollup_property_id",
              "relation_property_id",
              "function"
            ],
            "title": "rollup"
          },
          "id": {
            "type": "string",
            "title": "id"
          },
          "name": {
            "type": "string",
            "title": "name"
          }
        },
        "required": [
          "type",
          "rollup",
          "id",
          "name"
        ],
        "title": "Database Aggregate Properties"
      },
      "INotion.TitleDatabaseProperty": {
        "type": "object",
        "properties": {
          "type": {
            "const": "title",
            "title": "type"
          },
          "title": {
            "$ref": "#/components/schemas/Recordstringnever",
            "title": "title"
          },
          "id": {
            "type": "string",
            "title": "id"
          },
          "name": {
            "type": "string",
            "title": "name"
          }
        },
        "required": [
          "type",
          "title",
          "id",
          "name"
        ],
        "title": "Database title property"
      },
      "INotion.RichTextDatabaseProperty": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id"
          },
          "name": {
            "type": "string",
            "title": "name"
          },
          "type": {
            "const": "rich_text",
            "title": "type"
          },
          "rich_text": {
            "$ref": "#/components/schemas/Recordstringnever",
            "title": "rich_text"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "rich_text"
        ],
        "title": "database text property"
      },
      "INotion.UrlDatabaseProperty": {
        "type": "object",
        "properties": {
          "type": {
            "const": "url",
            "title": "type"
          },
          "url": {
            "$ref": "#/components/schemas/Recordstringnever",
            "title": "url"
          },
          "id": {
            "type": "string",
            "title": "id"
          },
          "name": {
            "type": "string",
            "title": "name"
          }
        },
        "required": [
          "type",
          "url",
          "id",
          "name"
        ],
        "title": "Database Url property"
      },
      "INotion.PeopleDatabaseProperty": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id"
          },
          "name": {
            "type": "string",
            "title": "name"
          },
          "type": {
            "const": "people",
            "title": "type"
          },
          "people": {
            "$ref": "#/components/schemas/Recordstringnever",
            "title": "people"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "people"
        ],
        "title": "database people properties"
      },
      "INotion.FilesDatabaseProperty": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id"
          },
          "name": {
            "type": "string",
            "title": "name"
          },
          "type": {
            "const": "files",
            "title": "type"
          },
          "files": {
            "$ref": "#/components/schemas/Recordstringnever",
            "title": "files"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "files"
        ],
        "title": "Database File Properties"
      },
      "INotion.EmailDatabaseProperty": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id"
          },
          "name": {
            "type": "string",
            "title": "name"
          },
          "type": {
            "const": "email",
            "title": "type"
          },
          "email": {
            "$ref": "#/components/schemas/Recordstringnever",
            "title": "email"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "email"
        ],
        "title": "Database Email Attributes"
      },
      "INotion.PhoneNumberDatabaseProperty": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id"
          },
          "name": {
            "type": "string",
            "title": "name"
          },
          "type": {
            "const": "phone_number",
            "title": "type"
          },
          "phone_number": {
            "$ref": "#/components/schemas/Recordstringnever",
            "title": "phone_number"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "phone_number"
        ],
        "title": "Database Phone Number Attribute"
      },
      "INotion.DateDatabaseProperty": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id"
          },
          "name": {
            "type": "string",
            "title": "name"
          },
          "type": {
            "const": "date",
            "title": "type"
          },
          "date": {
            "$ref": "#/components/schemas/Recordstringnever",
            "title": "date"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "date"
        ],
        "title": "Database Date Attribute"
      },
      "INotion.CheckboxDatabaseProperty": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id"
          },
          "name": {
            "type": "string",
            "title": "name"
          },
          "type": {
            "const": "checkbox",
            "title": "type"
          },
          "checkbox": {
            "$ref": "#/components/schemas/Recordstringnever",
            "title": "checkbox"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "checkbox"
        ],
        "title": "Database Checkbox Properties"
      },
      "INotion.CreatedByDatabaseProperty": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id"
          },
          "name": {
            "type": "string",
            "title": "name"
          },
          "type": {
            "const": "created_by",
            "title": "type"
          }
        },
        "required": [
          "id",
          "name",
          "type"
        ],
        "title": "Database Creator Attributes"
      },
      "INotion.CreatedTimeDatabaseProperty": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id"
          },
          "name": {
            "type": "string",
            "title": "name"
          },
          "type": {
            "const": "created_time",
            "title": "type"
          },
          "created_time": {
            "$ref": "#/components/schemas/Recordstringnever",
            "title": "created_time"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "created_time"
        ],
        "title": "Database Creation Time Attribute"
      },
      "INotion.LastEditedByDatabaseProperty": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id"
          },
          "name": {
            "type": "string",
            "title": "name"
          },
          "type": {
            "const": "last_edited_by",
            "title": "type"
          },
          "last_edited_by": {
            "$ref": "#/components/schemas/Recordstringnever",
            "title": "last_edited_by"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "last_edited_by"
        ],
        "title": "Database Last Modified Attribute"
      },
      "INotion.LastEditedTimeDatabaseProperty": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id"
          },
          "name": {
            "type": "string",
            "title": "name"
          },
          "type": {
            "const": "last_edited_time",
            "title": "type"
          },
          "last_edited_time": {
            "$ref": "#/components/schemas/Recordstringnever",
            "title": "last_edited_time"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "last_edited_time"
        ],
        "title": "Database Modification Time Attribute"
      },
      "INotion.IFindPageByTitleOutput": {
        "type": "object",
        "properties": {
          "parent": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "title": "Type",
                "description": "Parent Page Object Type"
              },
              "workspace": {
                "type": "boolean",
                "title": "Whether the workspace is",
                "description": "Whether the parent page is a workspace"
              }
            },
            "required": [
              "type"
            ],
            "title": "Parent Page",
            "description": "Parent Page Information"
          },
          "properties": {
            "$ref": "#/components/schemas/INotion.IFindPageProperty",
            "title": "property",
            "description": "Page Properties Information"
          },
          "object": {
            "oneOf": [
              {
                "const": "user"
              },
              {
                "const": "page"
              },
              {
                "const": "list"
              },
              {
                "const": "comment"
              },
              {
                "const": "database"
              },
              {
                "const": "block"
              },
              {
                "const": "property_item"
              }
            ],
            "title": "Object Type",
            "description": "Type of page object"
          },
          "url": {
            "type": "string",
            "format": "iri",
            "title": "url",
            "description": "Page url"
          },
          "id": {
            "type": "string",
            "title": "page id",
            "description": "Unique id of the generated page"
          },
          "created_time": {
            "type": "string",
            "title": "Date created",
            "description": "Date the page was created"
          },
          "last_edited_time": {
            "type": "string",
            "title": "Last modified",
            "description": "Date the page was last modified"
          },
          "created_by": {
            "type": "object",
            "properties": {
              "object": {
                "oneOf": [
                  {
                    "const": "user"
                  },
                  {
                    "const": "page"
                  },
                  {
                    "const": "list"
                  },
                  {
                    "const": "comment"
                  },
                  {
                    "const": "database"
                  },
                  {
                    "const": "block"
                  },
                  {
                    "const": "property_item"
                  }
                ],
                "title": "Object Type",
                "description": "The type of the object that created the page"
              },
              "id": {
                "type": "string",
                "title": "id",
                "description": "Unique id of the person who created the page"
              }
            },
            "required": [
              "object",
              "id"
            ],
            "title": "Created by",
            "description": "Information about who created the page"
          },
          "last_edited_by": {
            "type": "object",
            "properties": {
              "object": {
                "oneOf": [
                  {
                    "const": "user"
                  },
                  {
                    "const": "page"
                  },
                  {
                    "const": "list"
                  },
                  {
                    "const": "comment"
                  },
                  {
                    "const": "database"
                  },
                  {
                    "const": "block"
                  },
                  {
                    "const": "property_item"
                  }
                ],
                "title": "Object Type",
                "description": "The type of object that last modified the page"
              },
              "id": {
                "type": "string",
                "title": "id",
                "description": "Unique id of the last person to edit the page"
              }
            },
            "required": [
              "object",
              "id"
            ],
            "title": "Last modified by",
            "description": "Information about who last modified the page"
          },
          "cover": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/INotion.IPageCover"
              }
            ],
            "title": "Background Image",
            "description": "Page Background Image Information"
          },
          "icon": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/INotion.IPageIcon"
              }
            ],
            "title": "Icon",
            "description": "Page Icon Information"
          },
          "archived": {
            "type": "boolean",
            "title": "Whether to archive the page",
            "description": "Whether to archive the page"
          },
          "public_url": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "iri"
              }
            ],
            "title": "public url",
            "description": "Page public url"
          }
        },
        "required": [
          "parent",
          "properties",
          "object",
          "url",
          "id",
          "created_time",
          "last_edited_time",
          "created_by",
          "last_edited_by",
          "cover",
          "icon",
          "archived",
          "public_url"
        ]
      },
      "INotion.IFindPageProperty": {
        "type": "object",
        "properties": {
          "title": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "title": "id",
                "description": "Page property id"
              },
              "type": {
                "type": "string",
                "title": "Property Type",
                "description": "Page Property Type"
              },
              "title": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/INotion.IFindPageTitleProperty"
                },
                "title": "Title Attribute",
                "description": "Page Title Attribute Information"
              }
            },
            "required": [
              "id",
              "type",
              "title"
            ],
            "title": "Title attribute",
            "description": "Information about the title attribute"
          }
        },
        "required": [
          "title"
        ],
        "title": "Page property information"
      },
      "INotion.IFindPageTitleProperty": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "title": "type",
            "description": "Title property type"
          },
          "text": {
            "$ref": "#/components/schemas/INotion.IPageTitleText",
            "title": "Text Information",
            "description": "Page Title Text Information"
          },
          "annotations": {
            "$ref": "#/components/schemas/INotion.IPageTitleAnnotation",
            "title": "Additional Information",
            "description": "Page Title Additional Information"
          },
          "plain_text": {
            "type": "string",
            "title": "Original",
            "description": "Page Title Original Text"
          },
          "href": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "iri"
              }
            ],
            "title": "Link",
            "description": "Page Link"
          }
        },
        "required": [
          "type",
          "text",
          "annotations",
          "plain_text",
          "href"
        ],
        "title": "Page title attribute"
      },
      "INotion.IPageTitleText": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "title": "Content",
            "description": "Title Text Content"
          },
          "link": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "iri"
              }
            ],
            "title": "Link",
            "description": "Page Title Link"
          }
        },
        "required": [
          "content",
          "link"
        ],
        "title": "Page title text information"
      },
      "INotion.IPageTitleAnnotation": {
        "type": "object",
        "properties": {
          "bold": {
            "type": "boolean",
            "title": "Bold",
            "description": "Title Text Bold"
          },
          "italic": {
            "type": "boolean",
            "title": "italicized",
            "description": "Title text italicized"
          },
          "strikethrough": {
            "type": "boolean",
            "title": "strikethrough",
            "description": "Title text strikethrough"
          },
          "underline": {
            "type": "boolean",
            "title": "underline",
            "description": "Title text underline"
          },
          "code": {
            "type": "boolean",
            "title": "Whether the title text is wrapped in code",
            "description": "Whether the title text is wrapped in code"
          },
          "color": {
            "type": "string",
            "title": "Color",
            "description": "Title Text Color"
          }
        },
        "required": [
          "bold",
          "italic",
          "strikethrough",
          "underline",
          "code",
          "color"
        ],
        "title": "Page title Additional information"
      },
      "INotion.IPageCover": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "description": "Image Type"
          },
          "external": {
            "$ref": "#/components/schemas/INotion.IExternalImage",
            "title": "Image",
            "description": "Image information"
          }
        },
        "required": [
          "type",
          "external"
        ],
        "title": "Page background image information"
      },
      "INotion.IExternalImage": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "iri",
            "title": "url",
            "description": "image url"
          }
        },
        "required": [
          "url"
        ],
        "title": "External image information"
      },
      "INotion.IPageIcon": {
        "type": "object",
        "properties": {
          "type": {
            "oneOf": [
              {
                "const": "file"
              },
              {
                "const": "emoji"
              },
              {
                "const": "external"
              }
            ],
            "title": "Type",
            "description": "Icon Type"
          },
          "emoji": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ],
            "title": "Emoji icon",
            "description": "Icon information when the icon type is emoji"
          },
          "external": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/INotion.IExternalImage"
              }
            ],
            "title": "Icon",
            "description": "Icon information when the icon type is icon"
          },
          "file": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "format": "iri",
                "title": "url",
                "description": "file url"
              },
              "expiry_time": {
                "type": "string",
                "title": "expiration time",
                "description": "Image file expiration time"
              }
            },
            "required": [
              "url",
              "expiry_time"
            ],
            "title": "Icon file",
            "description": "Icon information when the icon type is file"
          }
        },
        "required": [
          "type"
        ],
        "title": "Page Icon Information"
      },
      "INotion.IFindPageOrDatabaseItemInput": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "title": "Title",
            "description": "Page Title"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "notion",
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "title",
          "secretKey"
        ],
        "title": "Information needed to search the page"
      },
      "INotion.IDatabaseItemOutput": {
        "type": "object",
        "properties": {
          "parent": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "title": "type",
                "description": "Parent database item object type"
              },
              "database_id": {
                "type": "string",
                "title": "database id",
                "description": "database item parent id"
              }
            },
            "required": [
              "type",
              "database_id"
            ],
            "title": "Parent Database Item",
            "description": "Parent Database Item Information"
          },
          "properties": {
            "title": "Property",
            "description": "Database Item Properties"
          },
          "object": {
            "oneOf": [
              {
                "const": "user"
              },
              {
                "const": "page"
              },
              {
                "const": "list"
              },
              {
                "const": "comment"
              },
              {
                "const": "database"
              },
              {
                "const": "block"
              },
              {
                "const": "property_item"
              }
            ],
            "title": "Object Type",
            "description": "Type of page object"
          },
          "created_time": {
            "type": "string",
            "title": "Date created",
            "description": "Date the page was created"
          },
          "last_edited_time": {
            "type": "string",
            "title": "Last modified",
            "description": "Date the page was last modified"
          },
          "created_by": {
            "type": "object",
            "properties": {
              "object": {
                "oneOf": [
                  {
                    "const": "user"
                  },
                  {
                    "const": "page"
                  },
                  {
                    "const": "list"
                  },
                  {
                    "const": "comment"
                  },
                  {
                    "const": "database"
                  },
                  {
                    "const": "block"
                  },
                  {
                    "const": "property_item"
                  }
                ],
                "title": "Object Type",
                "description": "The type of the object that created the page"
              },
              "id": {
                "type": "string",
                "title": "id",
                "description": "Unique id of the person who created the page"
              }
            },
            "required": [
              "object",
              "id"
            ],
            "title": "Created by",
            "description": "Information about who created the page"
          },
          "last_edited_by": {
            "type": "object",
            "properties": {
              "object": {
                "oneOf": [
                  {
                    "const": "user"
                  },
                  {
                    "const": "page"
                  },
                  {
                    "const": "list"
                  },
                  {
                    "const": "comment"
                  },
                  {
                    "const": "database"
                  },
                  {
                    "const": "block"
                  },
                  {
                    "const": "property_item"
                  }
                ],
                "title": "Object Type",
                "description": "The type of object that last modified the page"
              },
              "id": {
                "type": "string",
                "title": "id",
                "description": "Unique id of the last person to edit the page"
              }
            },
            "required": [
              "object",
              "id"
            ],
            "title": "Last modified by",
            "description": "Information about who last modified the page"
          },
          "cover": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/INotion.IPageCover"
              }
            ],
            "title": "Background Image",
            "description": "Page Background Image Information"
          },
          "icon": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/INotion.IPageIcon"
              }
            ],
            "title": "Icon",
            "description": "Page Icon Information"
          },
          "archived": {
            "type": "boolean",
            "title": "Whether to archive the page",
            "description": "Whether to archive the page"
          },
          "url": {
            "type": "string",
            "format": "iri",
            "title": "url",
            "description": "Page url"
          },
          "public_url": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "format": "iri"
              }
            ],
            "title": "public url",
            "description": "Page public url"
          },
          "id": {
            "type": "string",
            "title": "page id",
            "description": "Unique id of the generated page"
          },
          "title": {
            "type": "string",
            "title": "tilte\n\nTitle of the document you just created"
          },
          "link": {
            "type": "string",
            "format": "iri",
            "title": "page link"
          }
        },
        "required": [
          "parent",
          "properties",
          "object",
          "created_time",
          "last_edited_time",
          "created_by",
          "last_edited_by",
          "cover",
          "icon",
          "archived",
          "url",
          "public_url",
          "id",
          "title",
          "link"
        ],
        "title": "Database item creation result"
      },
      "INotion.IFindDatabaseItemInput": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "title": "Title",
            "description": "The title of the item in the database item"
          },
          "number": {
            "type": "integer",
            "title": "Number",
            "description": "Number in database item"
          },
          "url": {
            "type": "string",
            "format": "iri",
            "title": "url",
            "description": "url in database item"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email address",
            "description": "Email address in database item"
          },
          "rich_text": {
            "type": "string",
            "title": "text",
            "description": "Text in database item"
          },
          "phone_number": {
            "type": "string",
            "title": "Phone number",
            "description": "Phone number in database item"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "notion",
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "secretKey"
        ],
        "title": "Information needed to find an item in the database",
        "additionalProperties": {}
      },
      "INotion.___ICreatePageOutput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "page id",
            "description": "Unique id of the generated page"
          },
          "title": {
            "type": "string",
            "title": "tilte\n\nTitle of the document you just created"
          },
          "link": {
            "type": "string",
            "format": "iri",
            "title": "page link"
          }
        },
        "required": [
          "id",
          "title",
          "link"
        ],
        "title": "Page creation result"
      },
      "INotion.ICreatePageByMarkdownInput": {
        "type": "object",
        "properties": {
          "parentPageId": {
            "oneOf": [
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/get/page",
                  "jmesPath": "[].{value:pageId, label:title}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              },
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/page",
                  "jmesPath": "[].{value:id, label:id}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              }
            ],
            "title": "parentPageId"
          },
          "title": {
            "type": "string",
            "x-wrtn-placeholder": "테스트 페이지.",
            "title": "Page title",
            "description": "New page title to be created"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "notion",
            "title": "Select authentication information",
            "description": "secret key."
          },
          "markdown": {
            "type": "string",
            "title": "markdown",
            "description": "If you add a markdown string, it will be converted appropriately according to the Notion's block.\nTherefore, you don't have to use Unicode symbols to implement lists or decorate documents using letters.\nOf course, this depends on the user, and there is no problem using the character string you want, such as inserting an emoji as well as Unicode."
          }
        },
        "required": [
          "parentPageId",
          "title",
          "secretKey",
          "markdown"
        ]
      },
      "INotion.IUpdateNotionTitleInput": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "title": "Title of Page",
            "description": "It means title to update this page"
          },
          "pageId": {
            "oneOf": [
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/get/page",
                  "jmesPath": "[].{value:pageId, label:title}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              },
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/page",
                  "jmesPath": "[].{value:id, label:id}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              }
            ],
            "title": "Page ID to update"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "notion",
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "title",
          "pageId",
          "secretKey"
        ]
      },
      "INotion.ICreateGalleryDatabaseOutput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "description": "Database id"
          },
          "title": {
            "type": "string",
            "title": "title",
            "description": "Title of database"
          },
          "url": {
            "type": "string",
            "format": "iri",
            "title": "url",
            "description": "Page url of database"
          }
        },
        "required": [
          "id",
          "title",
          "url"
        ],
        "title": "Information created a gallery view database"
      },
      "INotion.ICreateGalleryDatabaseInput": {
        "type": "object",
        "properties": {
          "parentPageId": {
            "oneOf": [
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/get/page",
                  "jmesPath": "[].{value:pageId, label:title}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              },
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/page",
                  "jmesPath": "[].{value:id, label:id}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              }
            ],
            "title": "parentPageId"
          },
          "title": {
            "type": "string",
            "title": "databaseTitle"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "notion",
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "parentPageId",
          "title",
          "secretKey"
        ],
        "title": "Information needed to create a gallery view database"
      },
      "INotion.ICreateGalleryDatabaseItemOutput": {
        "type": "object",
        "properties": {
          "pageId": {
            "type": "string",
            "title": "pageId",
            "description": "Created item database id"
          },
          "url": {
            "type": "string",
            "format": "iri",
            "title": "page url",
            "description": "Created item page url"
          }
        },
        "required": [
          "pageId",
          "url"
        ],
        "title": "Information created a gallery view database item"
      },
      "INotion.ICreateGalleryDatabaseItemInput": {
        "type": "object",
        "properties": {
          "databaseId": {
            "type": "string",
            "x-wrtn-prerequisite": {
              "method": "post",
              "path": "/connector/notion/get/database-info",
              "jmesPath": "[].{value:id, label:title}"
            },
            "title": "databaseId",
            "description": "Database Id what you want to add a item.\n\nIf the database is not created, you can create a database using the `Create Gallery Database` function first.\nThe endpoint is POST: /connector/notion/create-gallery-database."
          },
          "info": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/INotion.ICreateGalleryDatabaseItemInfo"
            },
            "title": "informations",
            "description": "Information needed to create a gallery database items.\n\nYou can add multiple items at once.\nIf you need to add multiple database items, you should add each piece of information to the info as an array.\nYou should not make multiple calls when you need to add multiple items."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "notion",
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "databaseId",
          "info",
          "secretKey"
        ],
        "title": "Information needed to create a gallery view database items"
      },
      "INotion.ICreateGalleryDatabaseItemInfo": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "title": "title",
            "description": "Database Item Title.\nThe title of the item to be added to the database."
          },
          "markdown": {
            "type": "string",
            "title": "markdown",
            "description": "If you add a markdown string, it will be converted appropriately according to the Notion's block.\nTherefore, you don't have to use Unicode symbols to implement lists or decorate documents using letters.\nOf course, this depends on the user, and there is no problem using the character string you want, such as inserting an emoji as well as Unicode."
          }
        },
        "required": [
          "title",
          "markdown"
        ],
        "title": "Information created a gallery view database item"
      },
      "INotion.IUpdatePageContentInput": {
        "type": "object",
        "properties": {
          "pageId": {
            "oneOf": [
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/get/page",
                  "jmesPath": "[].{value:pageId, label:title}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              },
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/page",
                  "jmesPath": "[].{value:id, label:id}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              }
            ],
            "title": "pageId",
            "description": "Page id what you want to update."
          },
          "markdown": {
            "type": "string",
            "title": "markdown",
            "description": "If you add a markdown string, it will be converted appropriately according to the Notion's block.\nTherefore, you don't have to use Unicode symbols to implement lists or decorate documents using letters.\nOf course, this depends on the user, and there is no problem using the character string you want, such as inserting an emoji as well as Unicode."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "notion",
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "pageId",
          "markdown",
          "secretKey"
        ],
        "title": "Information needed to update the page content"
      },
      "INotion.ICreateDatabaseOutput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "id",
            "description": "Database id"
          },
          "title": {
            "type": "string",
            "title": "title",
            "description": "Database title"
          },
          "url": {
            "type": "string",
            "format": "iri",
            "title": "url",
            "description": "Database page url"
          }
        },
        "required": [
          "id",
          "title",
          "url"
        ],
        "title": "Information created a notion database"
      },
      "INotion.ICreateDatabaseInput": {
        "type": "object",
        "properties": {
          "parentPageId": {
            "oneOf": [
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/get/page",
                  "jmesPath": "[].{value:pageId, label:title}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              },
              {
                "type": "string",
                "x-wrtn-prerequisite": {
                  "method": "post",
                  "path": "/connector/notion/page",
                  "jmesPath": "[].{value:id, label:id}"
                },
                "x-wrtn-placeholder": "부모 페이지를 선택하세요."
              }
            ],
            "title": "parentPageId"
          },
          "title": {
            "type": "string",
            "title": "title",
            "description": "Database Title"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/INotion.IDatabaseSchema"
            },
            "description": "Database Properties Schema"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "notion",
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "parentPageId",
          "title",
          "properties",
          "secretKey"
        ],
        "title": "Information needed to create a notion database"
      },
      "INotion.IDatabaseSchema": {
        "type": "object",
        "properties": {},
        "required": [],
        "title": "Database Schema",
        "additionalProperties": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/INotion.IRichTextProperty"
            },
            {
              "$ref": "#/components/schemas/INotion.ITitleProperty"
            }
          ]
        }
      },
      "INotion.IRichTextProperty": {
        "type": "object",
        "properties": {
          "rich_text": {
            "type": "object",
            "properties": {},
            "required": []
          }
        },
        "required": [
          "rich_text"
        ],
        "title": "Notion Database rich_text property",
        "description": "This property is used when adding a text property to the database.\nThe text property can only accept text.\nThis is a property for creating items that should be expressed as text.\nFor example, when creating an English vocabulary list, if you need three properties: word, meaning, and idiom, you should be able to create the meaning and idiom as rich_text properties."
      },
      "INotion.ITitleProperty": {
        "type": "object",
        "properties": {
          "title": {
            "type": "object",
            "properties": {},
            "required": []
          }
        },
        "required": [
          "title"
        ],
        "title": "Notion Database title property",
        "description": "This property is used when adding a title property to a database.\nThis property must be added when creating a database.\nIt must never be omitted.\nThe title property can only accept text.\nItems added to that property can be used as pages, and content can also be added to the pages.\nThis is a property for creating items that should be expressed as topics or titles.\nFor example, when creating an English vocabulary list, if you need three properties: word, meaning, and idiom, you should be able to create words as title properties because words can be used as topics or titles."
      },
      "INotion.IAddDatabasePropertyInput": {
        "type": "object",
        "properties": {
          "databaseId": {
            "type": "string",
            "x-wrtn-prerequisite": {
              "method": "post",
              "path": "/connector/notion/get/database-info",
              "jmesPath": "[].{value:id, label:title}"
            },
            "title": "databaseId",
            "description": "Database Id what you want to delete property."
          },
          "property": {
            "$ref": "#/components/schemas/INotion.IDatabaseSchema",
            "title": "property",
            "description": "Database Properties Schema what want to add"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "notion",
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "databaseId",
          "property",
          "secretKey"
        ],
        "title": "Information needed to add a property to the database"
      },
      "INotion.IDeleteDatabasePropertyInput": {
        "type": "object",
        "properties": {
          "databaseId": {
            "type": "string",
            "x-wrtn-prerequisite": {
              "method": "post",
              "path": "/connector/notion/get/database-info",
              "jmesPath": "[].{value:id, label:title}"
            },
            "title": "databaseId",
            "description": "Database Id what you want to delete property."
          },
          "propertyName": {
            "type": "string",
            "title": "propertyName",
            "description": "The name of the property want to delete"
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "notion",
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "databaseId",
          "propertyName",
          "secretKey"
        ],
        "title": "Information needed to delete a property to the database"
      },
      "INotion.IAddItemsToDatabaseInput": {
        "type": "object",
        "properties": {
          "databaseId": {
            "type": "string",
            "x-wrtn-prerequisite": {
              "method": "post",
              "path": "/connector/notion/get/database-info",
              "jmesPath": "[].{value:id, label:title}"
            },
            "title": "databaseId",
            "description": "Database Id what you want to add a item.\n\nIf the database is not created, you can create a database using the `Create Database` function first.\nThe endpoint is POST: /connector/notion/create-database."
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/INotion.ICreateDatabaseItem"
            },
            "title": "Items to create",
            "description": "These are the item combinations to be created in the database.\nEach item combination is created for each row in the database."
          },
          "secretKey": {
            "type": "string",
            "x-wrtn-secret-key": "notion",
            "title": "Select authentication information",
            "description": "secret key."
          }
        },
        "required": [
          "databaseId",
          "items",
          "secretKey"
        ],
        "title": "Information needed to add an items to the database"
      },
      "INotion.ICreateDatabaseItem": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "title": "title value",
            "description": "The value to be filled in the title property."
          },
          "rich_text": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "propertyName": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "required": [
                "propertyName",
                "value"
              ]
            },
            "title": "rich_text value",
            "description": "The values to be filled in the rich_text property."
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "title": "date value",
            "description": "The value to be filled in the date property.\nYou must specify the date-time at the time the input was filled in."
          },
          "markdown": {
            "type": "string",
            "title": "page content",
            "description": "If you add a markdown string, it will be converted appropriately according to the Notion's block.\nTherefore, you don't have to use Unicode symbols to implement lists or decorate documents using letters.\nOf course, this depends on the user, and there is no problem using the character string you want, such as inserting an emoji as well as Unicode.\nThis Markdown string is used to add content to the page of each database row."
          }
        },
        "required": [
          "title",
          "rich_text",
          "date"
        ],
        "title": "Information about the item added to the database",
        "description": "This combination of items is used to populate a row in the database.\nFor example, if the properties of the database are title, rich_text, rich_text, rich_text, date, The combination of items requires 1 title, 3 rich_texts, and 1 date."
      }
    }
  },
  "tags": [
    {
      "name": "Notion"
    }
  ],
  "x-samchon-emended": true
}