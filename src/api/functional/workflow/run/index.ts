/**
 * @packageDocumentation
 * @module api.functional.workflow.run
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type {
  IRunWorkflowInput,
  IRunWorkflowOutput,
  IWorkflowRunStatus,
} from "../../../structures/workflow/Workflow";

/**
 * Run workflow
 *
 * @tag Workflow
 * @internal
 *
 * @controller WorkflowController.runWorkflow
 * @path POST /workflow/run
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function runWorkflow(
  connection: IConnection,
  input: runWorkflow.Input,
): Promise<runWorkflow.Output> {
  return !!connection.simulate
    ? runWorkflow.simulate(connection, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...runWorkflow.METADATA,
          template: runWorkflow.METADATA.path,
          path: runWorkflow.path(),
        },
        input,
      );
}
export namespace runWorkflow {
  export type Input = Primitive<IRunWorkflowInput>;
  export type Output = Primitive<IRunWorkflowOutput>;

  export const METADATA = {
    method: "POST",
    path: "/workflow/run",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/workflow/run";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<IRunWorkflowOutput>> =>
    typia.random<Primitive<IRunWorkflowOutput>>(g);
  export const simulate = (
    connection: IConnection,
    input: runWorkflow.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Return status of one workflow run
 *
 * @tag Workflow
 * @internal
 *
 * @controller WorkflowController.getWorkflowRunStatus
 * @path GET /workflow/run/:workflowRunId
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getWorkflowRunStatus(
  connection: IConnection,
  workflowRunId: string,
): Promise<getWorkflowRunStatus.Output> {
  return !!connection.simulate
    ? getWorkflowRunStatus.simulate(connection, workflowRunId)
    : PlainFetcher.fetch(connection, {
        ...getWorkflowRunStatus.METADATA,
        template: getWorkflowRunStatus.METADATA.path,
        path: getWorkflowRunStatus.path(workflowRunId),
      });
}
export namespace getWorkflowRunStatus {
  export type Output = Primitive<IWorkflowRunStatus>;

  export const METADATA = {
    method: "GET",
    path: "/workflow/run/:workflowRunId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (workflowRunId: string) =>
    `/workflow/run/${encodeURIComponent(workflowRunId ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<IWorkflowRunStatus>> =>
    typia.random<Primitive<IWorkflowRunStatus>>(g);
  export const simulate = (
    connection: IConnection,
    workflowRunId: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(workflowRunId),
      contentType: "application/json",
    });
    assert.param("workflowRunId")(() => typia.assert(workflowRunId));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
