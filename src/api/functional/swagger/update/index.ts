/**
 * @packageDocumentation
 * @module api.functional.swagger.update
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

/**
 * Swagger.json 업데이트.
 *
 * @internal
 *
 * @controller SwaggerController.updateSwagger
 * @path POST /swagger/update
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function updateSwagger(connection: IConnection): Promise<void> {
  return !!connection.simulate
    ? updateSwagger.simulate(connection)
    : PlainFetcher.fetch(connection, {
        ...updateSwagger.METADATA,
        template: updateSwagger.METADATA.path,
        path: updateSwagger.path(),
      });
}
export namespace updateSwagger {
  export const METADATA = {
    method: "POST",
    path: "/swagger/update",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/swagger/update";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<void>> => typia.random<Primitive<void>>(g);
  export const simulate = (connection: IConnection): void => {
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
