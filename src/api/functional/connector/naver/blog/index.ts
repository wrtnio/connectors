/**
 * @packageDocumentation
 * @module api.functional.connector.naver.blog
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { INaver } from "../../../../structures/connector/naver/INaver";

export * as detail from "./detail";

/**
 * 네이버 블로그 컨텐츠를 검색합니다.
 *
 * @summary 네이버 블로그 검색
 * @param input 네이버 블로그 검색을 위한 조건
 * @tag Naver 네이버 포털 사이트
 *
 * @controller NaverController.blogList
 * @path POST /connector/naver/blog
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function blogList(
  connection: IConnection,
  input: blogList.Input,
): Promise<blogList.Output> {
  return !!connection.simulate
    ? blogList.simulate(connection, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...blogList.METADATA,
          path: blogList.path(),
        },
        input,
      );
}
export namespace blogList {
  export type Input = Primitive<INaver.INaverKeywordInput>;
  export type Output = Primitive<INaver.IBlogNaverOutput>;

  export const METADATA = {
    method: "POST",
    path: "/connector/naver/blog",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/connector/naver/blog";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<INaver.IBlogNaverOutput>> =>
    typia.random<Primitive<INaver.IBlogNaverOutput>>(g);
  export const simulate = (
    connection: IConnection,
    input: blogList.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
