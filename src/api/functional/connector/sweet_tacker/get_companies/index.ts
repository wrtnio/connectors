/**
 * @packageDocumentation
 * @module api.functional.connector.sweet_tacker.get_companies
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { Try } from "../../../../../utils/createResponseForm";
import type { ISweetTracker } from "../../../../structures/connector/sweet_tracker/ISweetTacker";

export * as recommended from "./recommended";

/**
 * 택배사 목록을 조회합니다.
 *
 * @summary 택배사 목록 조회
 * @returns 택배사 목록
 * @tag sweet-tracker
 *
 * @controller SweetTrackerController.getCompanyList
 * @path POST /connector/sweet-tacker/get-companies
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getCompanyList(
  connection: IConnection,
): Promise<getCompanyList.Output> {
  return !!connection.simulate
    ? getCompanyList.simulate(connection)
    : PlainFetcher.fetch(connection, {
        ...getCompanyList.METADATA,
        template: getCompanyList.METADATA.path,
        path: getCompanyList.path(),
      });
}
export namespace getCompanyList {
  export type Output = Primitive<Try<ISweetTracker.IGetCompanyListOutput>>;

  export const METADATA = {
    method: "POST",
    path: "/connector/sweet-tacker/get-companies",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/connector/sweet-tacker/get-companies";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<Try<ISweetTracker.IGetCompanyListOutput>>> =>
    typia.random<Primitive<Try<ISweetTracker.IGetCompanyListOutput>>>(g);
  export const simulate = (connection: IConnection): Output => {
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
