/**
 * @packageDocumentation
 * @module api.functional.connector.rag.status
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { Try } from "../../../../../utils/createResponseForm";
import type { IRag } from "../../../../structures/connector/rag/IRag";

/**
 * 분석 진행 상태를 조회합니다.
 *
 * @summary RAG 분석 상태 조회.
 * @param docId 분석 진행 상태를 조회할 문서 ID.
 * @tag RAG
 * @internal
 *
 * @controller RagController.getStatus
 * @path GET /connector/rag/:docId/status
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getStatus(
  connection: IConnection,
  docId: string,
): Promise<getStatus.Output> {
  return !!connection.simulate
    ? getStatus.simulate(connection, docId)
    : PlainFetcher.fetch(connection, {
        ...getStatus.METADATA,
        template: getStatus.METADATA.path,
        path: getStatus.path(docId),
      });
}
export namespace getStatus {
  export type Output = Primitive<Try<IRag.IStatusOutput>>;

  export const METADATA = {
    method: "GET",
    path: "/connector/rag/:docId/status",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (docId: string) =>
    `/connector/rag/${encodeURIComponent(docId ?? "null")}/status`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<Try<IRag.IStatusOutput>>> =>
    typia.random<Primitive<Try<IRag.IStatusOutput>>>(g);
  export const simulate = (connection: IConnection, docId: string): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(docId),
      contentType: "application/json",
    });
    assert.param("docId")(() => typia.assert(docId));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
