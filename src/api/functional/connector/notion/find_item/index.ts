/**
 * @packageDocumentation
 * @module api.functional.connector.notion.find_item
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { INotion } from "../../../../structures/connector/notion/INotion";

/**
 * 테이블 데이터베이스에 존재하는 아이템을 조회합니다.
 *
 * @summary 데이터베이스 아이템 조회
 * @param input 데이터베이스 아이템 조회에 필요한 정보
 * @param databaseId 데이터베이스 고유 id
 * @returns 조회된 데이터베이스 아이템 정보
 * @tag Notion
 * @tag 노션
 * @tag 노트
 * @tag 메모
 * @tag 작업 관리
 * @tag 프로젝트 관리
 * @tag 할 일 목록
 * @tag 일정 관리
 * @tag 문서 작성
 * @tag 회의록 작성
 * @tag 체크리스트
 * @tag 아이디어 정리
 * @tag 업무 기록
 * @tag 학습 노트
 * @tag 스터디 플래너
 * @tag 제품기획
 * @tag 이력서
 * @tag 포트폴리오
 * @tag 협업
 * @tag 문서
 * @tag Note
 * @tag Memo
 * @tag Task Management
 * @tag Project Management
 * @tag To do list
 * @tag Schedule Management
 * @tag Document Creation
 * @tag Meeting Notes
 * @tag Checklist
 * @tag Idea Organization
 * @tag Work Logging
 * @tag Study Notes
 * @tag Study Planner
 * @tag Product Management
 * @tag Resume
 * @tag Portfolio
 * @tag Collaboration
 * @tag Document
 *
 * @controller NotionController.getDatabaseItem
 * @path POST /connector/notion/find-item/:databaseId
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getDatabaseItem(
  connection: IConnection,
  input: getDatabaseItem.Input,
  databaseId: string,
): Promise<getDatabaseItem.Output> {
  return !!connection.simulate
    ? getDatabaseItem.simulate(connection, input, databaseId)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getDatabaseItem.METADATA,
          template: getDatabaseItem.METADATA.path,
          path: getDatabaseItem.path(databaseId),
        },
        input,
      );
}
export namespace getDatabaseItem {
  export type Input = Primitive<INotion.IFindDatabaseItemInput>;
  export type Output = Primitive<INotion.IDatabaseItemOutput>;

  export const METADATA = {
    method: "POST",
    path: "/connector/notion/find-item/:databaseId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (databaseId: string) =>
    `/connector/notion/find-item/${encodeURIComponent(databaseId ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<INotion.IDatabaseItemOutput>> =>
    typia.random<Primitive<INotion.IDatabaseItemOutput>>(g);
  export const simulate = (
    connection: IConnection,
    input: getDatabaseItem.Input,
    databaseId: string,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(databaseId),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(input));
    assert.param("databaseId")(() => typia.assert(databaseId));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
