/**
 * @packageDocumentation
 * @module api.functional.connector.work24.job_openings
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { IWork24 } from "../../../../structures/connector/work24/IWork24";

/**
 * @controller Work24Controller.getJobOpenings
 * @path GET /connector/work24/job-openings
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getJobOpenings(
  connection: IConnection,
): Promise<getJobOpenings.Output> {
  return !!connection.simulate
    ? getJobOpenings.simulate(connection)
    : PlainFetcher.fetch(connection, {
        ...getJobOpenings.METADATA,
        template: getJobOpenings.METADATA.path,
        path: getJobOpenings.path(),
      });
}
export namespace getJobOpenings {
  export type Output = Primitive<IWork24.IGetJobOpeningOutput>;

  export const METADATA = {
    method: "GET",
    path: "/connector/work24/job-openings",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/connector/work24/job-openings";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<IWork24.IGetJobOpeningOutput>> =>
    typia.random<Primitive<IWork24.IGetJobOpeningOutput>>(g);
  export const simulate = (connection: IConnection): Output => {
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
