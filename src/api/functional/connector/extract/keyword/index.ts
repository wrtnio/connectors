/**
 * @packageDocumentation
 * @module api.functional.connector.extract.keyword
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { Try } from "../../../../../utils/createResponseForm";
import type { IKeywordExtraction } from "../../../../structures/connector/extract/IKeywordExtractor";

/**
 * 주어진 입력과 관련 높은 키워드를 추출합니다.
 *
 * @summary 키워드 추출
 * @param input 키워드 추출을 위한 입력
 * @returns 추출된 키워드
 * @tag Llm 키워드 추출 생성
 *
 * @controller KeywordExtractController.extractKeyword
 * @path POST /connector/extract/keyword
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function extractKeyword(
  connection: IConnection,
  input: extractKeyword.Input,
): Promise<extractKeyword.Output> {
  return !!connection.simulate
    ? extractKeyword.simulate(connection, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...extractKeyword.METADATA,
          template: extractKeyword.METADATA.path,
          path: extractKeyword.path(),
        },
        input,
      );
}
export namespace extractKeyword {
  export type Input = Primitive<IKeywordExtraction.IExtractKeywordInput>;
  export type Output = Primitive<Try<IKeywordExtraction.IExtractKeywordOutput>>;

  export const METADATA = {
    method: "POST",
    path: "/connector/extract/keyword",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/connector/extract/keyword";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<Try<IKeywordExtraction.IExtractKeywordOutput>>> =>
    typia.random<Primitive<Try<IKeywordExtraction.IExtractKeywordOutput>>>(g);
  export const simulate = (
    connection: IConnection,
    input: extractKeyword.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
