/**
 * @packageDocumentation
 * @module api.functional.connector.llm.selector_llm
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type {
  ISelectorLlmRequest,
  ISelectorLlmResponse,
} from "../../../../structures/connector/llm/ILlm";

/**
 * 주어진 후보 중에서 조건에 맞는 것을 선택합니다.
 *
 * @summary 조건 선택
 * @param body 후보 선택을 위한 입력
 * @returns 선택된 후보 인덱스 배열
 * @tag Llm selection 선택 추출
 *
 * @controller LlmController.selectorLlm
 * @path POST /connector/llm/selector-llm
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function selectorLlm(
  connection: IConnection,
  body: selectorLlm.Input,
): Promise<selectorLlm.Output> {
  return !!connection.simulate
    ? selectorLlm.simulate(connection, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...selectorLlm.METADATA,
          template: selectorLlm.METADATA.path,
          path: selectorLlm.path(),
        },
        body,
      );
}
export namespace selectorLlm {
  export type Input = Primitive<ISelectorLlmRequest>;
  export type Output = Primitive<ISelectorLlmResponse>;

  export const METADATA = {
    method: "POST",
    path: "/connector/llm/selector-llm",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/connector/llm/selector-llm";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<ISelectorLlmResponse>> =>
    typia.random<Primitive<ISelectorLlmResponse>>(g);
  export const simulate = (
    connection: IConnection,
    body: selectorLlm.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(body));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
