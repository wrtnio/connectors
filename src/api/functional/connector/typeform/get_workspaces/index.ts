/**
 * @packageDocumentation
 * @module api.functional.connector.typeform.get_workspaces
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { ITypeform } from "../../../../structures/connector/typeform/ITypeform";

/**
 * 워크스페이스 정보를 가져옵니다.
 *
 * @summary 타입폼 워크스페이스 정보 가져오기.
 * @returns 워크스페이스 ID, 제목, URL.
 * @tag 타입폼
 * @tag 설문조사
 * @tag 온라인 폼
 * @tag 설문지
 * @tag 고객 만족도 조사
 * @tag 설문 양식
 * @tag 퀴즈
 * @tag 응답 확인
 * @tag 응답 관리
 * @tag 응답자 관리
 * @tag 설문 분석
 * @tag 응답 데이터
 * @tag 설문지 템플릿
 * @tag 설문 응답
 * @tag 설문지 공유
 * @tag 설문조사 결과
 * @tag 질문지 작성
 * @tag 인터뷰 신청
 * @tag 응답 수집
 * @tag 행사
 * @tag 피드백
 * @tag 사용자 조사
 * @tag 이벤트 피드백
 * @tag 행사 피드백
 * @tag Typeform
 * @tag Survey
 * @tag Online Form
 * @tag Questionnaire
 * @tag Customer Satisfaction Survey
 * @tag Survey Form
 * @tag Quiz
 * @tag Survey Responses
 * @tag Manage Responses
 * @tag Manage Respondents
 * @tag Survey Analysis
 * @tag Response Data
 * @tag Survey Template
 * @tag Survey Answers
 * @tag Share Survey
 * @tag Survey Results
 * @tag Create Questionnaire
 * @tag Interview Application
 * @tag Collect Responses
 * @tag Event
 * @tag Feedback
 * @tag User Survey
 * @tag Event Feedback
 * @internal
 *
 * @controller TypeformController.getWorkspaces
 * @path POST /connector/typeform/get-workspaces
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getWorkspaces(
  connection: IConnection,
): Promise<getWorkspaces.Output> {
  return !!connection.simulate
    ? getWorkspaces.simulate(connection)
    : PlainFetcher.fetch(connection, {
        ...getWorkspaces.METADATA,
        path: getWorkspaces.path(),
      });
}
export namespace getWorkspaces {
  export type Output = Primitive<Array<ITypeform.IFindWorkspaceOutput>>;

  export const METADATA = {
    method: "POST",
    path: "/connector/typeform/get-workspaces",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/connector/typeform/get-workspaces";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<Array<ITypeform.IFindWorkspaceOutput>>> =>
    typia.random<Primitive<Array<ITypeform.IFindWorkspaceOutput>>>(g);
  export const simulate = (connection: IConnection): Output => {
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
