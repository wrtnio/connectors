/**
 * @packageDocumentation
 * @module api.functional.connector.discord.user
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { IDiscord } from "../../../../structures/connector/discord/IDiscord";

/**
 * @controller DiscordController.findUserById
 * @path POST /connector/discord/user/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function findUserById(
  connection: IConnection,
  userId: string,
): Promise<findUserById.Output> {
  return !!connection.simulate
    ? findUserById.simulate(connection, userId)
    : PlainFetcher.fetch(connection, {
        ...findUserById.METADATA,
        path: findUserById.path(userId),
      });
}
export namespace findUserById {
  export type Output = Primitive<IDiscord.IDiscordFindUserOutput>;

  export const METADATA = {
    method: "POST",
    path: "/connector/discord/user/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (userId: string) =>
    `/connector/discord/user/${encodeURIComponent(userId ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<IDiscord.IDiscordFindUserOutput>> =>
    typia.random<Primitive<IDiscord.IDiscordFindUserOutput>>(g);
  export const simulate = (connection: IConnection, userId: string): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(userId),
      contentType: "application/json",
    });
    assert.param("userId")(() => typia.assert(userId));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
