/**
 * @packageDocumentation
 * @module api.functional.connector.miro
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { IMiro } from "../../../structures/connector/miro/IMiro";

export * as auth from "./auth";

/**
 * Miro 액세스 토큰 갱신.
 *
 * @internal
 * @param input Refresh Token DTO.
 *
 * @controller MiroController.refresh
 * @path POST /connector/miro/refresh
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function refresh(
  connection: IConnection,
  input: refresh.Input,
): Promise<refresh.Output> {
  return !!connection.simulate
    ? refresh.simulate(connection, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...refresh.METADATA,
          path: refresh.path(),
        },
        input,
      );
}
export namespace refresh {
  export type Input = Primitive<IMiro.IRefreshTokenInput>;
  export type Output = Primitive<IMiro.IRefreshTokenOutput>;

  export const METADATA = {
    method: "POST",
    path: "/connector/miro/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/connector/miro/refresh";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<IMiro.IRefreshTokenOutput>> =>
    typia.random<Primitive<IMiro.IRefreshTokenOutput>>(g);
  export const simulate = (
    connection: IConnection,
    input: refresh.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Miro Board 생성.
 *
 * @internal
 * @param input Create Board DTO.
 *
 * @controller MiroController.createBoard
 * @path POST /connector/miro/createBoard
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function createBoard(
  connection: IConnection,
  input: createBoard.Input,
): Promise<createBoard.Output> {
  return !!connection.simulate
    ? createBoard.simulate(connection, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createBoard.METADATA,
          path: createBoard.path(),
        },
        input,
      );
}
export namespace createBoard {
  export type Input = Primitive<IMiro.ICreateBoardInput>;
  export type Output = Primitive<IMiro.ICreateBoardOutput>;

  export const METADATA = {
    method: "POST",
    path: "/connector/miro/createBoard",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/connector/miro/createBoard";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<IMiro.ICreateBoardOutput>> =>
    typia.random<Primitive<IMiro.ICreateBoardOutput>>(g);
  export const simulate = (
    connection: IConnection,
    input: createBoard.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Miro Board 생성.
 *
 * @internal
 * @param input Copy Board DTO.
 *
 * @controller MiroController.copyBoard
 * @path POST /connector/miro/copyBoard
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function copyBoard(
  connection: IConnection,
  input: copyBoard.Input,
): Promise<copyBoard.Output> {
  return !!connection.simulate
    ? copyBoard.simulate(connection, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...copyBoard.METADATA,
          path: copyBoard.path(),
        },
        input,
      );
}
export namespace copyBoard {
  export type Input = Primitive<IMiro.ICopyBoardInput>;
  export type Output = Primitive<IMiro.ICopyBoardOutput>;

  export const METADATA = {
    method: "POST",
    path: "/connector/miro/copyBoard",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/connector/miro/copyBoard";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<IMiro.ICopyBoardOutput>> =>
    typia.random<Primitive<IMiro.ICopyBoardOutput>>(g);
  export const simulate = (
    connection: IConnection,
    input: copyBoard.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Miro Card 생성.
 *
 * @internal
 * @param input Create Card DTO.
 *
 * @controller MiroController.createCard
 * @path POST /connector/miro/createCard
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function createCard(
  connection: IConnection,
  input: createCard.Input,
): Promise<createCard.Output> {
  return !!connection.simulate
    ? createCard.simulate(connection, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createCard.METADATA,
          path: createCard.path(),
        },
        input,
      );
}
export namespace createCard {
  export type Input = Primitive<IMiro.ICreateCardItemInput>;
  export type Output = Primitive<IMiro.ICreateCardItemOutput>;

  export const METADATA = {
    method: "POST",
    path: "/connector/miro/createCard",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/connector/miro/createCard";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<IMiro.ICreateCardItemOutput>> =>
    typia.random<Primitive<IMiro.ICreateCardItemOutput>>(g);
  export const simulate = (
    connection: IConnection,
    input: createCard.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
