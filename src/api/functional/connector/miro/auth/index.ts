/**
 * @packageDocumentation
 * @module api.functional.connector.miro.auth
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Resolved, Primitive } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { IMiro } from "../../../../structures/connector/miro/IMiro";

/**
 * Miro 액세스 토큰 발급.
 *
 * @internal
 * @param query Authorization Code Dto.
 *
 * @controller MiroController.authorization
 * @path GET /connector/miro/auth
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function authorization(
  connection: IConnection,
  query: authorization.Query,
): Promise<authorization.Output> {
  return !!connection.simulate
    ? authorization.simulate(connection, query)
    : PlainFetcher.fetch(connection, {
        ...authorization.METADATA,
        path: authorization.path(query),
      });
}
export namespace authorization {
  export type Query = Resolved<IMiro.IAccessTokenInput>;
  export type Output = Primitive<IMiro.IAccessTokenOutput>;

  export const METADATA = {
    method: "GET",
    path: "/connector/miro/auth",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (query: authorization.Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = "/connector/miro/auth";
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<IMiro.IAccessTokenOutput>> =>
    typia.random<Primitive<IMiro.IAccessTokenOutput>>(g);
  export const simulate = (
    connection: IConnection,
    query: authorization.Query,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(query),
      contentType: "application/json",
    });
    assert.query(() => typia.assert(query));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
