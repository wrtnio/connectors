/**
 * @packageDocumentation
 * @module api.functional.connector.student_report_generator.row
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { Try } from "../../../../../utils/createResponseForm";
import type {
  IStudentReportRowGeneratorRequest,
  IStudentReportRowGeneratorResponse,
} from "../../../../structures/connector/student_report_generator/IStudentReportGenerator";

/**
 * 입력된 정보를 바탕으로 학생 생활 기록부를 생성합니다.
 *
 * @summary 학생 생활 기록부 생성
 * @param input 학생 생활 기록부 생성을 위한 정보.
 * @returns 생성된 학생 생활 기록부.
 *
 * @controller StudentReportGeneratorController.generateRow
 * @path POST /connector/student-report-generator/row
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function generateRow(
  connection: IConnection,
  input: generateRow.Input,
): Promise<generateRow.Output> {
  return !!connection.simulate
    ? generateRow.simulate(connection, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...generateRow.METADATA,
          template: generateRow.METADATA.path,
          path: generateRow.path(),
        },
        input,
      );
}
export namespace generateRow {
  export type Input = Primitive<IStudentReportRowGeneratorRequest>;
  export type Output = Primitive<Try<IStudentReportRowGeneratorResponse>>;

  export const METADATA = {
    method: "POST",
    path: "/connector/student-report-generator/row",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/connector/student-report-generator/row";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<Try<IStudentReportRowGeneratorResponse>>> =>
    typia.random<Primitive<Try<IStudentReportRowGeneratorResponse>>>(g);
  export const simulate = (
    connection: IConnection,
    input: generateRow.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
