/**
 * @packageDocumentation
 * @module api.functional.connector.google_calendar.event.attendees
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { IGoogleCalendar } from "../../../../../structures/connector/google_calendar/IGoogleCalendar";

/**
 * 이벤트에 참석자를 추가합니다.
 *
 * @summary 구글 캘린더 이벤트 참석자 추가.
 * @param calendarId 이벤트가 있는 캘린더 고유 ID.
 * @param eventId 참석자를 추가할 이벤트 고유 ID.
 * @param input 추가할 참석자 이메일 목록.
 * @returns 참석자가 추가된 이벤트 정보.
 * @tag Google-Calendar
 * @tag 구글 캘린더
 * @tag 캘린더
 * @tag 일정 관리
 * @tag 일정 추가
 * @tag 일정 생성
 * @tag 일정 공유
 * @tag 일정 알림
 * @tag 회의 추가
 * @tag 약속 추가
 * @tag 시간 관리
 * @tag 달력
 * @tag 스케줄 관리
 * @tag 일정 조정
 * @tag 반복 일정
 * @tag 일정 동기화
 * @tag 일정 초대
 * @tag 일정 리마인더
 * @tag 캘린더 공유
 * @tag 시간표
 * @tag 구글 일정
 * @tag 스케줄러
 * @tag 이번 주 일정
 * @tag 다음 주 일정
 * @tag 월간 일정
 * @tag 개인 일정
 * @tag 팀 일정
 * @tag 회의 예약
 * @tag 업무 캘린더
 * @tag 휴가 일정
 * @tag Google Calendar
 * @tag Calendar
 * @tag Manage Schedule
 * @tag Add Event
 * @tag Create Event
 * @tag Share Event
 * @tag Event Reminder
 * @tag Add Meeting
 * @tag Add Appointment
 * @tag Time Management
 * @tag Schedule Management
 * @tag Adjust Schedule
 * @tag Recurring Event
 * @tag Sync Calendar
 * @tag Invite to Event
 * @tag Share Calendar
 * @tag Timetable
 * @tag Google Schedule
 * @tag Scheduler
 * @tag This Week's Schedule
 * @tag Next Week's Schedule
 * @tag Monthly Schedule
 * @tag Personal Schedule
 * @tag Team Schedule
 * @tag Schedule Meeting
 * @tag Work Calendar
 * @tag Vacation Schedule
 *
 * @controller GoogleCalendarController.addAttendeesToEvent
 * @path PUT /connector/google-calendar/:calendarId/event/:eventId/attendees
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function addAttendeesToEvent(
  connection: IConnection,
  calendarId: string,
  eventId: string,
  input: addAttendeesToEvent.Input,
): Promise<addAttendeesToEvent.Output> {
  return !!connection.simulate
    ? addAttendeesToEvent.simulate(connection, calendarId, eventId, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...addAttendeesToEvent.METADATA,
          template: addAttendeesToEvent.METADATA.path,
          path: addAttendeesToEvent.path(calendarId, eventId),
        },
        input,
      );
}
export namespace addAttendeesToEvent {
  export type Input = Primitive<IGoogleCalendar.IAddAttendeesToEventInput>;
  export type Output = Primitive<IGoogleCalendar.IGoogleCalendarEvent>;

  export const METADATA = {
    method: "PUT",
    path: "/connector/google-calendar/:calendarId/event/:eventId/attendees",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (calendarId: string, eventId: string) =>
    `/connector/google-calendar/${encodeURIComponent(calendarId ?? "null")}/event/${encodeURIComponent(eventId ?? "null")}/attendees`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<IGoogleCalendar.IGoogleCalendarEvent>> =>
    typia.random<Primitive<IGoogleCalendar.IGoogleCalendarEvent>>(g);
  export const simulate = (
    connection: IConnection,
    calendarId: string,
    eventId: string,
    input: addAttendeesToEvent.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(calendarId, eventId),
      contentType: "application/json",
    });
    assert.param("calendarId")(() => typia.assert(calendarId));
    assert.param("eventId")(() => typia.assert(eventId));
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
