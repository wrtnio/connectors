import core from "@nestia/core";
import { Controller } from "@nestjs/common";
import { RouteIcon } from "@wrtnio/decorators";

import { IMarp } from "@wrtn/connector-api/lib/structures/connector/marp/IMarp";

import { ApiTags } from "@nestjs/swagger";
import { MarpProvider } from "../../../providers/connector/marp/MarpProvider";

@Controller("connector/marp")
export class MarpController {
  constructor(private readonly marpProvider: MarpProvider) {}

  /**
   * Convert Marp markdown to PPT and store in S3
   *
   * When you write a markdown according to marp grammar, you convert it to create an html file that contains all of that content.
   * Because users won't know the markdown and marp grammar, this should be automatically generated by LLM, and users just need to provide the format, image, text, etc. they want.
   * So, instead of asking the user to provide marp or markdown grammar, ask for hints on how to organize the template and how to deploy it.
   * All tasks such as making presentation materials or organizing contents with slides, such as pptx, google slides, html, markdown (marp), and hanshow, may have to go through a connector that changes marp to this pptx.
   *
   * @summary Convert Marp markdown to PPT
   * @param input The Marp markdown string
   * @returns The S3 link of the converted PPT
   */
  @core.TypedRoute.Post("/convert-to-ppt")
  @ApiTags("pptx", "hanshow", "ppt", "powerpoint", "markdown", "marp")
  @RouteIcon(
    "https://ecosystem-connector.s3.ap-northeast-2.amazonaws.com/icon/fulls/MARP_full.svg",
  )
  @ApiTags("Marp")
  async convertToPpt(
    @core.TypedBody() input: IMarp.IConvertInput,
  ): Promise<IMarp.IConvertOutput> {
    return this.marpProvider.convertToPpt(input);
  }
}
